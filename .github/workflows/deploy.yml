name: Deploy to VPS

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Run type check
        run: pnpm typecheck

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          NEXT_PUBLIC_UMAMI_URL: ${{ secrets.NEXT_PUBLIC_UMAMI_URL }}
          NEXT_PUBLIC_UMAMI_WEBSITE_ID: ${{ secrets.NEXT_PUBLIC_UMAMI_WEBSITE_ID }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=true
            CACHEBUST=${{ github.sha }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
            NEXT_PUBLIC_UMAMI_URL=${{ secrets.NEXT_PUBLIC_UMAMI_URL }}
            NEXT_PUBLIC_UMAMI_WEBSITE_ID=${{ secrets.NEXT_PUBLIC_UMAMI_WEBSITE_ID }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Navigate to project directory
            cd /opt/headon

            # Fetch latest changes and force sync with origin
            git fetch origin
            git reset --hard origin/main

            # Create .env from secrets
            cat > .env << EOF
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
            NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            NOTIFICATION_EMAIL=${{ secrets.NOTIFICATION_EMAIL }}
            UMAMI_APP_SECRET=${{ secrets.UMAMI_APP_SECRET }}
            UMAMI_DB_PASSWORD=${{ secrets.UMAMI_DB_PASSWORD }}
            NEXT_PUBLIC_UMAMI_URL=${{ secrets.NEXT_PUBLIC_UMAMI_URL }}
            NEXT_PUBLIC_UMAMI_WEBSITE_ID=${{ secrets.NEXT_PUBLIC_UMAMI_WEBSITE_ID }}
            EOF

            # Stop existing container
            docker compose down || true

            # Pull latest image from registry
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Start new container with the pulled image
            docker compose up -d

            # Clean up old images
            docker image prune -f

            # Check if container is running
            docker compose ps

            # Show logs (last 50 lines)
            docker compose logs --tail=50

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Wait for container to become healthy (max 2 minutes)
            echo "Waiting for container to become healthy..."
            TIMEOUT=120
            ELAPSED=0
            INTERVAL=5

            while [ $ELAPSED -lt $TIMEOUT ]; do
              # Check container health status
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' headon 2>/dev/null || echo "none")

              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "‚úÖ Container is healthy!"
                break
              fi

              echo "‚è≥ Container status: $HEALTH_STATUS (${ELAPSED}s / ${TIMEOUT}s)"
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done

            # Final check with curl
            if curl -f http://localhost:3001/api/health; then
              echo "‚úÖ Deployment successful! Application is running and responding."
            else
              echo "‚ùå Health check failed - application not responding"
              docker compose logs --tail=100 headon
              exit 1
            fi

      - name: Purge Cloudflare Cache
        if: success()
        run: |
          echo "üîÑ Purging Cloudflare cache..."

          RESPONSE=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}')

          # Check if purge was successful
          SUCCESS=$(echo $RESPONSE | jq -r '.success')

          if [ "$SUCCESS" = "true" ]; then
            echo "‚úÖ Cloudflare cache successfully purged!"
            echo "‚è≥ Cache will warm up over the next 10-30 minutes"
          else
            ERROR=$(echo $RESPONSE | jq -r '.errors[0].message // "Unknown error"')
            echo "‚ö†Ô∏è Warning: Cache purge failed: $ERROR"
            echo "üìù Full response: $RESPONSE"
            # Don't fail the deployment, just warn
          fi

      - name: Warm Up Critical Pages
        if: success()
        run: |
          echo "üî• Warming up cache for critical pages..."

          CRITICAL_URLS=(
            "${{ secrets.NEXT_PUBLIC_SITE_URL }}/"
            "${{ secrets.NEXT_PUBLIC_SITE_URL }}/blog"
            "${{ secrets.NEXT_PUBLIC_SITE_URL }}/portfolio"
            "${{ secrets.NEXT_PUBLIC_SITE_URL }}/services"
            "${{ secrets.NEXT_PUBLIC_SITE_URL }}/contact"
          )

          for url in "${CRITICAL_URLS[@]}"; do
            echo "Fetching: $url"
            curl -s -o /dev/null "$url" || echo "‚ö†Ô∏è Failed to fetch $url"
            sleep 0.5
          done

          echo "‚úÖ Cache warmup completed for ${#CRITICAL_URLS[@]} pages"

      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Deployment successful! The application has been deployed to the VPS."
          echo "üåê URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}"
          echo "üí® Cloudflare cache has been purged and warmed up"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Please check the logs for more information."
          exit 1
