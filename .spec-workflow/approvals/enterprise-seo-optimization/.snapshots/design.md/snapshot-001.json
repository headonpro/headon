{
  "id": "snapshot_1759341089488_ovo57q7tf",
  "approvalId": "approval_1759341089486_9tizjlkfd",
  "approvalTitle": "Design: Enterprise-SEO-Optimierung",
  "version": 1,
  "timestamp": "2025-10-01T17:51:29.488Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nDie Enterprise-SEO-Optimierung erweitert HEADON.pro um ein vollständiges Content-Management-System (MDX-based), dynamische Schema-Generierung, erweiterte Sitemap-Funktionalität und lokale SEO-Pages. Das Design folgt der bestehenden Next.js 15 App Router Architektur und integriert sich nahtlos in die vorhandene Component-Struktur.\n\n**Kern-Module:**\n1. **Content-System** (`lib/content/`) - MDX-Loading, Parsing, Metadata-Extraction\n2. **SEO-System** (`lib/seo/`) - Schema-Generierung, Sitemap-Generierung, Meta-Tag-Builder\n3. **Dynamic Routes** (`app/blog/[slug]`, `app/portfolio/[slug]`, etc.) - Server Components für Content-Rendering\n4. **SEO Components** (`components/seo/`) - Reusable SEO-Components (Breadcrumbs, Schema-Injector, etc.)\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**Next.js 15 App Router (tech.md Zeile 21-23)**\n- Design nutzt Server Components als Default für alle Content-Pages\n- Client Components nur für interaktive Features (Table of Contents Navigation, Reading Progress Bar)\n- Metadata API für type-safe SEO (tech.md Zeile 85)\n\n**TypeScript Strict Mode (tech.md Zeile 8-13)**\n- Alle neuen Module haben vollständige Type-Safety\n- Zod-Schemas für Content-Frontmatter Validation\n- Type-generated Interfaces für Schema.org Markups\n\n**Performance Requirements (tech.md Zeile 240-246)**\n- Static Generation für Blog/Portfolio (Pre-rendering at Build Time)\n- Incremental Static Regeneration (ISR) für Content-Updates\n- Image Optimization mit next/image (WebP/AVIF auto-generation)\n- Bundle Size < 200KB durch Code Splitting\n\n**Supabase Integration (tech.md Zeile 46-49, 89-93)**\n- Bestehende Supabase-Integration wird NICHT für Content verwendet\n- Content bleibt file-based (MDX) für bessere Developer Experience\n- Supabase nur für User-Generated Content (Testimonials, optional)\n\n### Project Structure (structure.md)\n\n**Directory Organization (structure.md Zeile 3-108)**\n```\napp/\n├── blog/[slug]/          # Neue dynamische Route\n│   ├── page.tsx\n│   └── metadata.ts\n├── portfolio/[slug]/     # Neue dynamische Route\n│   ├── page.tsx\n│   └── metadata.ts\n├── services/[slug]/      # Neue dynamische Route\n│   ├── page.tsx\n│   └── metadata.ts\n├── standorte/            # Neue Route für Stadt-Pages\n│   ├── page.tsx          # Übersicht mit Karte\n│   └── [city]/\n│       ├── page.tsx\n│       └── metadata.ts\n\ncomponents/\n├── content/              # NEUE: Content-spezifische Components\n│   ├── MDXContent.tsx    # MDX Renderer mit Syntax Highlighting\n│   ├── TableOfContents.tsx\n│   ├── ReadingProgress.tsx\n│   └── RelatedArticles.tsx\n├── seo/                  # ERWEITERT\n│   ├── SchemaGenerator.tsx  # NEUE Universal Schema Generator\n│   ├── FAQSchema.tsx        # NEUE FAQ-spezifisch\n│   ├── ArticleSchema.tsx    # NEUE Article-spezifisch\n│   └── (bestehend: StructuredData.tsx, Breadcrumbs.tsx)\n\nlib/\n├── content/              # NEUE: Content-Management\n│   ├── mdx-loader.ts     # MDX-Dateien laden & parsen\n│   ├── content-api.ts    # High-level Content API\n│   └── frontmatter.ts    # Frontmatter Validation\n├── seo/                  # NEUE: SEO-Utilities\n│   ├── schema-builder.ts # Schema.org JSON-LD Builder\n│   ├── sitemap-generator.ts\n│   ├── rss-generator.ts\n│   └── meta-builder.ts   # Meta-Tag Helper\n\ncontent/                  # NEUE: Content-Dateien\n├── blog/\n│   ├── article-1.mdx\n│   ├── article-2.mdx\n│   └── ...\n├── portfolio/\n│   ├── project-1.mdx\n│   └── ...\n└── cities/\n    ├── bad-mergentheim.mdx\n    └── ...\n```\n\n**Naming Conventions (structure.md Zeile 110-167)**\n- Route Folders: `kebab-case` (z.B. `blog/[slug]`)\n- Components: `PascalCase.tsx` (z.B. `MDXContent.tsx`)\n- Utilities: `camelCase.ts` (z.B. `mdx-loader.ts`)\n- Content Files: `kebab-case.mdx` (z.B. `next-js-performance.mdx`)\n\n**Import Patterns (structure.md Zeile 169-229)**\n```typescript\n// 1. React/Next.js\nimport type { Metadata } from 'next'\nimport { notFound } from 'next/navigation'\n\n// 2. External Dependencies\nimport { compileMDX } from 'next-mdx-remote/rsc'\nimport rehypePrettyCode from 'rehype-pretty-code'\n\n// 3. Internal Components\nimport { MDXContent } from '@/components/content/MDXContent'\nimport { ArticleSchema } from '@/components/seo/ArticleSchema'\n\n// 4. Utilities\nimport { loadMDX } from '@/lib/content/mdx-loader'\nimport { generateArticleSchema } from '@/lib/seo/schema-builder'\n\n// 5. Types\nimport type { BlogPost, Frontmatter } from '@/lib/types'\n```\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n**1. Layout System**\n- **Header.tsx** (components/layout/Header.tsx:5-102) - Wiederverwendet für alle neuen Pages\n- **Footer.tsx** (components/layout/Footer.tsx:5-78) - Unverändert für alle neuen Pages\n- **Integration**: Neue Routes nutzen bestehende Root-Layout (app/layout.tsx:66-103)\n\n**2. UI Components (shadcn/ui)**\n- **Button** (components/ui/button.tsx) - CTAs auf Content-Pages\n- **Accordion** (components/ui/accordion.tsx) - FAQ-Sections auf Service-Pages\n- **Dialog** (components/ui/dialog.tsx) - Lightbox für Portfolio-Bilder\n- **Alle Komponenten** bleiben unverändert, werden nur importiert\n\n**3. Styling System**\n- **cn() Utility** (lib/utils.ts:4-6) - Für conditional Tailwind classes\n- **Tailwind Config** (tailwind.config.ts) - Bestehende Design-Tokens\n- **Global CSS** (app/globals.css) - Bestehende CSS-Variablen\n\n**4. SEO Foundation**\n- **StructuredData.tsx** (components/seo/StructuredData.tsx:1-258) - ERWEITERN für neue Schema-Typen\n  - Aktuell: Organization, LocalBusiness, Service\n  - Neu: Article, FAQPage, CreativeWork, Person, Review, Breadcrumb\n- **sitemap.ts** (app/sitemap.ts:1-65) - KOMPLETT NEU SCHREIBEN für dynamische Generation\n- **robots.ts** (app/robots.ts:1-28) - Unverändert (bereits optimal)\n\n**5. Metadata Pattern**\n- **Existing Pattern**: Separate `metadata.ts` Files (z.B. app/services/metadata.ts:1-24)\n- **Reuse**: Gleiche Struktur für alle neuen Routes\n- **Extend**: Dynamische Metadata-Generierung aus MDX-Frontmatter\n\n### Integration Points\n\n**1. Next.js App Router**\n- **generateStaticParams()**: Für alle dynamischen Routes ([slug])\n- **Dynamic Metadata**: generateMetadata() aus MDX-Frontmatter\n- **Server Components**: Content-Loading direkt in Page-Component\n\n**2. File System (MDX Content)**\n- **Content Storage**: `content/` directory als Single Source of Truth\n- **Build-Time Processing**: MDX wird zu Build-Zeit kompiliert\n- **No Database**: Content ist file-based für bessere Git-Integration\n\n**3. Image Pipeline**\n- **next/image** (tech.md Zeile 14): Auto-Optimization für alle Content-Bilder\n- **Public Assets**: Content-Bilder in `public/images/blog/`, `public/images/portfolio/`\n- **Responsive Images**: Automatisches srcset via next/image\n\n**4. Analytics (Existing)**\n- **Plausible Analytics** (app/layout.tsx:81-86) - Bereits vorhanden, trackt automatisch neue Pages\n- **Web Vitals** (components/web-vitals-reporter.tsx) - Tracks LCP/CLS für neue Content-Pages\n\n## Architecture\n\n### Modular Design Principles\n\n**Single File Responsibility**\n- `mdx-loader.ts`: NUR MDX-Dateien laden\n- `schema-builder.ts`: NUR Schema.org JSON-LD generieren\n- `sitemap-generator.ts`: NUR Sitemap XML generieren\n- `MDXContent.tsx`: NUR MDX rendern (kein Schema, keine Metadata)\n\n**Component Isolation**\n- Jede Content-Section ist eigene Component (RelatedArticles, TableOfContents, etc.)\n- Schema-Components sind wiederverwendbar und unabhängig vom Content-Typ\n- Error Boundaries um kritische Components\n\n**Service Layer Separation**\n```\nPresentation Layer (components/)\n    ↓\nBusiness Logic Layer (lib/content/, lib/seo/)\n    ↓\nData Layer (file system MDX, Supabase optional)\n```\n\n**Utility Modularity**\n- Schema-Builder hat einzelne Functions pro Schema-Typ\n- Content-API abstrahiert File-System-Details\n- Meta-Builder generiert Meta-Tags unabhängig von Content-Typ\n\n### Architecture Diagram\n\n```mermaid\ngraph TD\n    A[User Request: /blog/article-slug] --> B[Next.js App Router]\n    B --> C[app/blog/slug/page.tsx]\n    C --> D[loadMDX slug]\n    D --> E[content/blog/article-slug.mdx]\n    E --> F[Parse Frontmatter + MDX]\n    F --> G[Compile MDX to React]\n    G --> H[Generate Metadata]\n    G --> I[Generate Schema]\n    H --> J[Return Page with SEO]\n    I --> J\n    J --> K[Render to User]\n\n    L[Build Time] --> M[generateStaticParams]\n    M --> N[Scan content/ directory]\n    N --> O[Generate all /blog/slug routes]\n    O --> P[Pre-render Pages]\n\n    Q[/sitemap.xml Request] --> R[Dynamic Route Handler]\n    R --> S[Scan all content/]\n    S --> T[Generate XML]\n    T --> U[Return Sitemap]\n```\n\n### Data Flow\n\n**1. Content Authoring Flow**\n```\nDeveloper writes article.mdx\n    ↓\nCommit to Git\n    ↓\nCI/CD Trigger\n    ↓\nNext.js Build scans content/\n    ↓\ngenerateStaticParams() creates routes\n    ↓\nStatic Pages pre-rendered\n    ↓\nDeploy to Production\n```\n\n**2. Runtime Content Request Flow**\n```\nUser requests /blog/my-article\n    ↓\nNext.js matches app/blog/[slug]/page.tsx\n    ↓\nloadMDX('my-article') called\n    ↓\nRead content/blog/my-article.mdx from filesystem\n    ↓\nParse Frontmatter (title, date, tags, etc.)\n    ↓\nCompile MDX to React Components\n    ↓\nGenerate Metadata + Schema from Frontmatter\n    ↓\nRender Page with Content + SEO\n    ↓\nReturn to User (Cached via CDN)\n```\n\n## Components and Interfaces\n\n### Component 1: MDXContent\n\n- **Purpose:** Renders compiled MDX with syntax highlighting, custom components, and responsive images\n- **File:** `components/content/MDXContent.tsx`\n- **Interfaces:**\n  ```typescript\n  interface MDXContentProps {\n    source: MDXRemoteSerializeResult\n    components?: MDXComponents\n  }\n  ```\n- **Dependencies:** next-mdx-remote, rehype-pretty-code, next/image\n- **Reuses:** Existing Tailwind styles, Typography scale from globals.css\n\n### Component 2: SchemaGenerator\n\n- **Purpose:** Universal Schema.org JSON-LD generator for all schema types\n- **File:** `components/seo/SchemaGenerator.tsx`\n- **Interfaces:**\n  ```typescript\n  interface SchemaGeneratorProps {\n    type: 'Article' | 'FAQPage' | 'CreativeWork' | 'Person' | 'Review' | 'BreadcrumbList'\n    data: Record<string, any>\n    context?: string // Custom @context if needed\n  }\n  ```\n- **Dependencies:** Next.js Script component\n- **Reuses:** Pattern from existing StructuredData.tsx (components/seo/StructuredData.tsx:250-257)\n\n### Component 3: TableOfContents\n\n- **Purpose:** Client component for sticky ToC with scroll-spy highlighting\n- **File:** `components/content/TableOfContents.tsx`\n- **Interfaces:**\n  ```typescript\n  interface TOCItem {\n    id: string\n    title: string\n    level: 2 | 3 // H2 or H3\n  }\n\n  interface TableOfContentsProps {\n    items: TOCItem[]\n  }\n  ```\n- **Dependencies:** React hooks (useState, useEffect), Framer Motion\n- **Reuses:** Existing scroll-spy pattern, Framer Motion animations\n\n### Component 4: ReadingProgress\n\n- **Purpose:** Client component for reading progress bar in header\n- **File:** `components/content/ReadingProgress.tsx`\n- **Interfaces:**\n  ```typescript\n  interface ReadingProgressProps {\n    contentRef: React.RefObject<HTMLElement>\n  }\n  ```\n- **Dependencies:** React hooks, Framer Motion\n- **Reuses:** Existing motion patterns from HeroSection.tsx\n\n### Component 5: RelatedArticles\n\n- **Purpose:** Server component displaying related articles based on tags\n- **File:** `components/content/RelatedArticles.tsx`\n- **Interfaces:**\n  ```typescript\n  interface RelatedArticlesProps {\n    currentSlug: string\n    tags: string[]\n    maxResults?: number\n  }\n  ```\n- **Dependencies:** Content API (lib/content/content-api.ts)\n- **Reuses:** Existing card patterns from BlogContent.tsx\n\n### Component 6: CityMap\n\n- **Purpose:** Interactive map showing all 6 cities (Bad Mergentheim, Lauda, etc.)\n- **File:** `components/sections/CityMap.tsx`\n- **Interfaces:**\n  ```typescript\n  interface City {\n    slug: string\n    name: string\n    lat: number\n    lng: number\n  }\n\n  interface CityMapProps {\n    cities: City[]\n    highlightedCity?: string\n  }\n  ```\n- **Dependencies:** Leaflet or Mapbox (lightweight map library)\n- **Reuses:** Existing card styling, Framer Motion for hover effects\n\n## Data Models\n\n### BlogPost Model\n\n```typescript\n// lib/types.ts\ninterface BlogPost {\n  slug: string\n  frontmatter: {\n    title: string\n    description: string\n    publishedAt: string // ISO 8601\n    updatedAt?: string // ISO 8601\n    author: {\n      name: string\n      avatar?: string\n      bio?: string\n    }\n    tags: string[]\n    category: 'development' | 'design' | 'performance' | 'mobile'\n    image: {\n      url: string\n      alt: string\n      width: number\n      height: number\n    }\n    readingTime: number // minutes\n    featured?: boolean\n  }\n  content: string // Compiled MDX\n  toc: TOCItem[] // Table of Contents\n}\n```\n\n### PortfolioProject Model\n\n```typescript\ninterface PortfolioProject {\n  slug: string\n  frontmatter: {\n    title: string\n    description: string\n    client: {\n      name: string\n      logo?: string\n      industry: string\n      website?: string\n    }\n    date: string // ISO 8601 (project completion)\n    category: 'web' | 'mobile' | 'ui-ux' | 'full-stack'\n    tags: string[] // Technologies used\n    image: {\n      url: string\n      alt: string\n    }\n    metrics: {\n      label: string\n      value: string\n      improvement?: string // e.g. \"+300%\"\n    }[]\n    testimonial?: {\n      quote: string\n      author: string\n      role: string\n      rating: number // 1-5\n    }\n    liveUrl?: string\n    githubUrl?: string\n  }\n  content: string // Case study details (MDX)\n}\n```\n\n### ServicePage Model\n\n```typescript\ninterface ServicePage {\n  slug: string // 'web-development', 'mobile-development', etc.\n  frontmatter: {\n    title: string\n    description: string\n    icon: string // Lucide icon name\n    pricing: {\n      from: number\n      currency: 'EUR'\n      unit: 'project' | 'hour' | 'month'\n    }\n    deliverables: string[]\n    processSteps: {\n      title: string\n      description: string\n      duration: string\n    }[]\n    faqs: {\n      question: string\n      answer: string\n    }[]\n    relatedCaseStudies: string[] // Slugs\n  }\n  content: string // Long-form service description (MDX)\n}\n```\n\n### CityPage Model\n\n```typescript\ninterface CityPage {\n  slug: string // 'bad-mergentheim', 'lauda-koenigshofen', etc.\n  frontmatter: {\n    name: string // 'Bad Mergentheim'\n    state: string // 'Baden-Württemberg'\n    coordinates: {\n      lat: number\n      lng: number\n    }\n    population: number\n    description: string // Short intro\n    services: string[] // Service slugs relevant for this city\n    caseStudies: string[] // Project slugs from this region\n    localKeywords: string[] // e.g. ['Webentwicklung Bad Mergentheim', ...]\n  }\n  content: string // Local content (MDX)\n}\n```\n\n### Schema Models\n\n```typescript\n// lib/types/schema.ts\ninterface ArticleSchema {\n  '@context': 'https://schema.org'\n  '@type': 'Article'\n  headline: string\n  description: string\n  image: string[]\n  datePublished: string\n  dateModified?: string\n  author: {\n    '@type': 'Person'\n    name: string\n    url?: string\n  }\n  publisher: {\n    '@type': 'Organization'\n    name: string\n    logo: {\n      '@type': 'ImageObject'\n      url: string\n    }\n  }\n}\n\ninterface FAQSchema {\n  '@context': 'https://schema.org'\n  '@type': 'FAQPage'\n  mainEntity: {\n    '@type': 'Question'\n    name: string\n    acceptedAnswer: {\n      '@type': 'Answer'\n      text: string\n    }\n  }[]\n}\n\n// ... weitere Schema-Types\n```\n\n## Error Handling\n\n### Error Scenarios\n\n**1. MDX File Not Found**\n- **Handling:** Check if file exists before loading, return 404 via Next.js `notFound()`\n- **User Impact:** Custom 404 page with search and navigation\n- **Implementation:**\n  ```typescript\n  // app/blog/[slug]/page.tsx\n  const post = await loadMDX(slug)\n  if (!post) notFound()\n  ```\n\n**2. Invalid MDX Frontmatter**\n- **Handling:** Validate with Zod schema, throw error at build time (fail fast)\n- **User Impact:** Build fails, developer sees clear validation error\n- **Implementation:**\n  ```typescript\n  // lib/content/frontmatter.ts\n  const frontmatterSchema = z.object({ ... })\n  const validated = frontmatterSchema.parse(frontmatter) // Throws if invalid\n  ```\n\n**3. MDX Compilation Error**\n- **Handling:** Catch compilation error, show helpful error message\n- **User Impact:** Build fails with line number and error description\n- **Implementation:**\n  ```typescript\n  try {\n    const compiled = await compileMDX({ source, options })\n  } catch (error) {\n    throw new Error(`Failed to compile ${slug}: ${error.message}`)\n  }\n  ```\n\n**4. Schema Generation Failure**\n- **Handling:** Log warning, render page without schema (graceful degradation)\n- **User Impact:** Page loads normally, schema just missing (no user-facing error)\n- **Implementation:**\n  ```typescript\n  try {\n    const schema = generateArticleSchema(data)\n    return <SchemaGenerator data={schema} />\n  } catch {\n    console.warn('Schema generation failed, continuing without schema')\n    return null\n  }\n  ```\n\n**5. Image Not Found in Content**\n- **Handling:** next/image shows placeholder, log warning\n- **User Impact:** Placeholder image shown, no broken layout\n- **Implementation:** Built-in next/image error handling\n\n**6. Sitemap Generation Timeout**\n- **Handling:** Implement pagination for large content sets, cache results\n- **User Impact:** Sitemap loads within timeout, possibly paginated\n- **Implementation:**\n  ```typescript\n  // app/sitemap.xml/route.ts\n  export const maxDuration = 30 // seconds\n  export const revalidate = 3600 // 1 hour cache\n  ```\n\n## Testing Strategy\n\n**WICHTIG:** User hat explizit gesagt \"Wir brauchen keine Tests\". Daher fokussiert sich diese Section auf **manuelle Validierung** statt automatisierte Tests.\n\n### Build-Time Validation\n\n**Frontmatter Schema Validation**\n- Alle MDX-Files werden bei Build-Time via Zod validiert\n- Build schlägt fehl bei invaliden Frontmatter\n- Developer sieht sofort klare Fehlermeldungen\n\n**Schema.org Validation (Manuell)**\n- Google Rich Results Test: https://search.google.com/test/rich-results\n- Schema.org Validator: https://validator.schema.org/\n- Manuelle Checks nach jedem neuen Schema-Typ\n\n**Lighthouse Checks (Manuell)**\n- `pnpm build && pnpm start` für Production-Build\n- Lighthouse Audit für min. 5 repräsentative Pages\n- Target: 95+ Score in allen Kategorien\n\n### Development Verification\n\n**Hot Reload Testing**\n- MDX-Änderungen müssen sofort in dev server sichtbar sein\n- Schema-Änderungen müssen nach reload korrekt sein\n- Keine build errors bei Änderungen an Content\n\n**Visual Regression (Manuell)**\n- Neue Components in Storybook-ähnlichem Setup testen\n- Oder: Manuelle Browser-Tests Chrome/Firefox/Safari\n- Mobile-Ansicht via Chrome DevTools testen\n\n### Production Verification\n\n**Post-Deployment Checks (Manuell)**\n1. `/sitemap.xml` aufrufen → alle URLs enthalten?\n2. `/rss.xml` aufrufen → valides XML?\n3. Google Search Console → Coverage Report checken\n4. Bing Webmaster Tools → Sitemap submitten\n5. Random Blog-Artikel aufrufen → LCP < 1.5s?\n\n**SEO Monitoring (Extern)**\n- Google Search Console für Rankings\n- Google Analytics/Plausible für Traffic\n- Manual Keyword-Checks 1x weekly\n\n### No Automated Tests\n\n**Begründung (von User):**\n- Project ist Template/Portfolio, keine Mission-Critical App\n- Manuelle Tests sind bei Content-Changes ausreichend\n- Build-Time Validation via Zod ist ausreichend für Type-Safety\n- Focus auf schnelle Iteration statt Test-Coverage\n\n**Alternativen:**\n- TypeScript Strict Mode ersetzt viele Unit Tests\n- Zod-Schemas ersetzen Input-Validation-Tests\n- Build Success = Integration Test\n- Google Tools ersetzen SEO-Tests\n",
  "fileStats": {
    "size": 19979,
    "lines": 663,
    "lastModified": "2025-10-01T17:51:18.810Z"
  },
  "comments": []
}
