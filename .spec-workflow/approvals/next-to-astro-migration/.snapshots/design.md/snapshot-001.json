{
  "id": "snapshot_1760212021161_mz4dfhbkj",
  "approvalId": "approval_1760212021159_om42peesq",
  "approvalTitle": "Design: Next.js to Astro Migration",
  "version": 1,
  "timestamp": "2025-10-11T19:47:01.161Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nDie Migration von Next.js 15 zu Astro 4.x ist eine **strategische Replatforming-Entscheidung** für die HEADON.pro Marketing-Website. Während Next.js ein hervorragendes Framework für interaktive Web-Apps ist, ist Astro speziell für **content-fokussierte Websites** optimiert und liefert messbar bessere Performance durch seine **Islands Architecture** und **Static-First-Ansatz**.\n\n**Kern-Design-Prinzipien:**\n1. **Zero-JavaScript by Default**: Nur laden, wo tatsächlich Interaktivität benötigt wird\n2. **Parallele Migration**: Next.js bleibt produktiv während Astro-Version entsteht\n3. **Design-Parität**: Pixel-perfekte Übereinstimmung mit Next.js-Version\n4. **Performance-First**: Jede Entscheidung wird anhand von Core Web Vitals bewertet\n5. **Developer-Friendly**: Gleiche oder bessere DX wie Next.js\n\n**Migrations-Zielarchitektur:**\n```\n~/projects/headon-astro/          # Neues Astro-Projekt\n├── src/\n│   ├── pages/                   # File-based Routing (wie Next.js app/)\n│   ├── components/              # Astro + React Islands\n│   ├── layouts/                 # Layout-Wrapper\n│   ├── content/                 # Content Collections (MDX)\n│   └── lib/                     # Utilities (wiederverwendet)\n├── public/                      # Static Assets (1:1 kopiert)\n└── astro.config.mjs            # Astro-Konfiguration\n```\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**Alignment mit bestehenden Tech-Entscheidungen:**\n\n1. **TypeScript Strict Mode** ✅\n   - Astro unterstützt TypeScript nativ mit gleicher Strict-Mode-Konfiguration\n   - `.astro`-Files können TypeScript in Frontmatter nutzen\n   - React-Islands behalten TypeScript-Typing bei\n\n2. **pnpm Package Manager** ✅\n   - Astro funktioniert perfekt mit pnpm (getestet)\n   - Gleiche pnpm-Version (10.15.0) wird verwendet\n   - Workspace-fähig für zukünftige Monorepo-Struktur\n\n3. **Tailwind CSS v4** ✅\n   - Astro hat offizielle Tailwind-Integration (`@astrojs/tailwind`)\n   - `@theme` Syntax in `globals.css` wird 1:1 übernommen\n   - CSS-in-CSS Konfiguration (kein tailwind.config.js nötig)\n\n4. **Supabase Backend** ✅\n   - `@supabase/supabase-js` funktioniert identisch in Astro\n   - API-Routes werden zu Astro-Endpoints (`src/pages/api/*.ts`)\n   - Service-Role-Key für Server-Side, Anon-Key für Client-Side\n\n5. **shadcn/ui Komponenten** ⚙️ Adaption\n   - Primitive Komponenten als React-Islands (`client:load`)\n   - Oder Konvertierung zu nativen Astro-Komponenten (statisch)\n   - Radix-UI funktioniert in React-Islands\n\n**Neue Technologie-Entscheidungen:**\n\n| Technologie | Zweck | Begründung |\n|------------|-------|------------|\n| **Astro 4.15+** | Static Site Generator + SSR | Optimiert für Content-Sites, 90% weniger JS |\n| **@astrojs/tailwind** | Tailwind-Integration | Offizielle Integration, 0-Config |\n| **@astrojs/react** | React-Islands | Für interaktive Komponenten (Forms, etc.) |\n| **@astrojs/mdx** | MDX-Support | Natives MDX mit besserer Performance als `next-mdx-remote` |\n| **@astrojs/sitemap** | Sitemap-Generierung | Automatische sitemap.xml |\n| **Shiki** (built-in) | Code-Highlighting | In Astro eingebaut, keine extra Config |\n\n### Project Structure (structure.md)\n\n**Mapping von Next.js zu Astro:**\n\n```typescript\n// Next.js Structure              →  Astro Structure\napp/                                  src/pages/\n├── page.tsx                     →    ├── index.astro\n├── layout.tsx                   →    ├── layouts/Layout.astro\n├── about/page.tsx               →    ├── about.astro\n├── services/page.tsx            →    ├── services/index.astro\n├── services/[slug]/page.tsx     →    ├── services/[slug].astro\n├── api/contact/route.ts         →    ├── api/contact.ts (Endpoint)\n└── globals.css                  →  src/styles/globals.css\n\ncomponents/                           src/components/\n├── ui/                          →    ├── ui/ (React Islands)\n│   ├── button.tsx               →    │   └── Button.tsx (client:load)\n├── sections/                    →    ├── sections/\n│   ├── HeroSection.tsx          →    │   └── HeroSection.astro (native)\n├── layout/                      →    ├── layout/\n│   ├── Header.tsx               →    │   └── Header.astro\n│   └── Footer.tsx               →    │   └── Footer.astro\n\nlib/                                  src/lib/\n├── utils.ts                     →    ├── utils.ts (1:1 copy)\n├── supabase.ts                  →    ├── supabase.ts (minimal changes)\n└── validations.ts               →    └── validations.ts (1:1 copy)\n\npublic/                               public/\n└── ** (alle Dateien)            →    └── ** (1:1 copy)\n```\n\n**Naming Conventions (beibehalten):**\n- Astro-Komponenten: `PascalCase.astro` (z.B. `HeroSection.astro`)\n- React-Islands: `PascalCase.tsx` mit `'use client'` entfernt\n- Routes: `kebab-case.astro` oder `index.astro` in Ordnern\n- Utilities: `camelCase.ts` (identisch zu Next.js)\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n**1:1 Wiederverwendung (keine Änderungen):**\n\n- ✅ **`lib/utils.ts`**: `cn()` Funktion - funktioniert identisch in Astro\n- ✅ **`lib/validations.ts`**: Zod-Schemas - keine Änderungen nötig\n- ✅ **`public/*`**: Alle Assets (Bilder, Logos, Fonts) - 1:1 Copy\n- ✅ **`app/globals.css`**: Tailwind v4 Config - nur Pfad ändern zu `src/styles/`\n- ✅ **Type Definitions**: Interface-Definitionen wiederverwendbar\n\n**Minimale Anpassungen (80-90% wiederverwendbar):**\n\n- ⚙️ **`lib/supabase.ts`**:\n  ```typescript\n  // Next.js\n  import { createClient } from '@supabase/supabase-js'\n\n  // Astro (identisch, nur Import-Kontext)\n  import { createClient } from '@supabase/supabase-js'\n  // Funktioniert in .astro Frontmatter und API-Endpoints\n  ```\n\n- ⚙️ **React-Hook-Form Komponenten**:\n  - Bleiben als React-Components (`.tsx`)\n  - Werden als React-Islands eingebunden: `<ContactForm client:load />`\n\n**Konvertierung zu Astro (neue Implementation):**\n\n- 🔄 **Statische Sections** (13 Komponenten):\n  - `HeroSection.tsx` → `HeroSection.astro` (kein React nötig)\n  - `ProcessSection.tsx` → `ProcessSection.astro`\n  - `PricingSection.tsx` → `PricingSection.astro`\n  - etc.\n\n- 🔄 **Layout-Komponenten**:\n  - `Header.tsx` → `Header.astro` (mit interaktivem Mobile-Menu als Island)\n  - `Footer.tsx` → `Footer.astro` (komplett statisch)\n\n### Integration Points\n\n**Supabase Backend:**\n- **Client-Side**: Identische `@supabase/supabase-js` Usage\n- **Server-Side**: Astro-Endpoints statt Next.js Route Handlers\n- **Authentication**: Supabase Auth bleibt gleich\n- **Database**: Keine Änderungen an Schema oder RLS-Policies\n\n**API-Endpoints:**\n```typescript\n// Next.js: app/api/contact/route.ts\nexport async function POST(request: NextRequest) { ... }\n\n// Astro: src/pages/api/contact.ts\nexport async function POST({ request }: APIContext) {\n  const body = await request.json()\n  // Rest identisch\n}\n```\n\n**MDX-Content:**\n```typescript\n// Next.js: next-mdx-remote mit komplexer Config\nimport { serialize } from 'next-mdx-remote/serialize'\n\n// Astro: Native Content Collections\nimport { getCollection } from 'astro:content'\nconst posts = await getCollection('blog')\n```\n\n## Architecture\n\n### Islands Architecture (Astro's Killer-Feature)\n\n**Konzept:** \"Inseln\" von Interaktivität in einem Ozean von statischem HTML.\n\n```mermaid\ngraph TD\n    A[Static HTML Page] --> B[Static Header]\n    A --> C[Static Hero Section]\n    A --> D[React Island: Contact Form]\n    A --> E[Static Footer]\n\n    D --> F[React Hydration nur hier!]\n\n    style D fill:#ff8c00\n    style F fill:#ffd700\n    style A,B,C,E fill:#1034A6\n```\n\n**Rendering-Strategie:**\n\n| Komponente | Strategie | Begründung |\n|-----------|-----------|------------|\n| Header | Astro-Component | Statisch, Navigation als Alpine.js |\n| Hero Section | Astro-Component | Animationen via CSS oder View Transitions |\n| Process Section | Astro-Component | Statischer Content |\n| Pricing Section | Astro-Component | Statische Cards |\n| Contact Form | React Island (`client:load`) | Interaktiv: Form-State, Validation |\n| Footer | Astro-Component | Komplett statisch |\n| Mobile Menu | React Island (`client:visible`) | Toggle-State nötig |\n\n**Island Loading-Strategien:**\n\n```astro\n<!-- 1. Sofort laden (für kritische Interaktivität) -->\n<ContactForm client:load />\n\n<!-- 2. Wenn sichtbar (für below-the-fold Content) -->\n<MobileMenu client:visible />\n\n<!-- 3. Wenn Browser idle (für non-kritische Features) -->\n<NewsletterForm client:idle />\n\n<!-- 4. Nur auf Mobile (conditional) -->\n<MobileNav client:media=\"(max-width: 768px)\" />\n```\n\n### Modular Design Principles\n\n**File Responsibility:**\n\n```\nsrc/components/\n├── ui/                      # Atomic Design: Atoms\n│   ├── Button.tsx          # React Island (interaktiv)\n│   ├── Input.astro         # Astro (statisch)\n│   └── Label.astro         # Astro (statisch)\n├── sections/               # Organisms\n│   ├── HeroSection.astro   # Statisch, nutzt Atoms\n│   ├── ProcessSection.astro\n│   └── ContactSection.astro # Nutzt ContactForm-Island\n├── layout/                 # Templates\n│   ├── Header.astro\n│   └── Footer.astro\n└── islands/                # Interaktive Komponenten\n    ├── ContactForm.tsx     # React mit Hook Form\n    └── MobileMenu.tsx      # React mit State\n```\n\n**Component Isolation:**\n- Astro-Komponenten sind per Definition isoliert (kein Global-State)\n- React-Islands kommunizieren via Props oder Custom Events\n- Kein Prop-Drilling durch `nanostores` (Astro's State-Management)\n\n**Service Layer Separation:**\n```\nsrc/\n├── lib/\n│   ├── services/          # Business Logic\n│   │   ├── contact.service.ts    # Kontaktformular-Logik\n│   │   └── blog.service.ts       # Blog-Content-Logik\n│   ├── api/               # API-Clients\n│   │   └── supabase.ts\n│   └── utils/             # Pure Utilities\n│       ├── date.ts\n│       └── format.ts\n```\n\n## Components and Interfaces\n\n### Component 1: Layout System\n\n**Purpose:** Root-Layout für alle Seiten mit konsistentem Header/Footer\n\n**File:** `src/layouts/Layout.astro`\n\n**Interface:**\n```typescript\ninterface LayoutProps {\n  title: string\n  description: string\n  image?: string\n  canonical?: string\n}\n```\n\n**Implementation:**\n```astro\n---\n// src/layouts/Layout.astro\nimport Header from '@/components/layout/Header.astro'\nimport Footer from '@/components/layout/Footer.astro'\nimport '@/styles/globals.css'\n\ninterface Props {\n  title: string\n  description: string\n  image?: string\n  canonical?: string\n}\n\nconst { title, description, image, canonical } = Astro.props\nconst siteUrl = import.meta.env.SITE || 'https://headon.pro'\n---\n\n<!DOCTYPE html>\n<html lang=\"de\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>{title}</title>\n    <meta name=\"description\" content={description} />\n    {canonical && <link rel=\"canonical\" href={canonical} />}\n    <!-- SEO Meta Tags -->\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    {image && <meta property=\"og:image\" content={image} />}\n  </head>\n  <body>\n    <Header />\n    <main>\n      <slot />\n    </main>\n    <Footer />\n  </body>\n</html>\n```\n\n**Dependencies:** Header.astro, Footer.astro, globals.css\n\n**Reuses:** Next.js layout-Konzept, Metadata-Pattern\n\n### Component 2: Hero Section (Native Astro)\n\n**Purpose:** Homepage-Hero mit animiertem Background (CSS-Animationen statt Framer Motion)\n\n**File:** `src/components/sections/HeroSection.astro`\n\n**Interface:**\n```typescript\ninterface HeroSectionProps {\n  title: string\n  subtitle: string\n  ctaText: string\n  ctaLink: string\n}\n```\n\n**Implementation-Strategy:**\n- **Animationen:** CSS `@keyframes` statt Framer Motion (bereits in globals.css vorhanden)\n- **Gradient-Shift:** Nutze bestehende `@keyframes gradient-shift` Animation\n- **Responsive:** Tailwind Breakpoints identisch zu Next.js\n- **Performance:** 0KB JavaScript für Hero-Section\n\n**Reuses:**\n- `app/globals.css` Animationen (blob, gradient-shift)\n- Tailwind-Classes identisch\n- Next.js HeroSection als Design-Referenz\n\n### Component 3: Contact Form (React Island)\n\n**Purpose:** Multi-Step Kontaktformular mit React Hook Form + Zod\n\n**File:** `src/components/islands/ContactForm.tsx`\n\n**Interface:**\n```typescript\nimport type { z } from 'zod'\nimport { contactSchema } from '@/lib/validations'\n\ntype ContactFormData = z.infer<typeof contactSchema>\n\ninterface ContactFormProps {\n  className?: string\n}\n```\n\n**Implementation:**\n```tsx\n// src/components/islands/ContactForm.tsx\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { contactSchema } from '@/lib/validations'\nimport { Button } from '@/components/ui/Button'\n\nexport default function ContactForm({ className }: ContactFormProps) {\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema)\n  })\n\n  async function onSubmit(data: ContactFormData) {\n    const response = await fetch('/api/contact', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    })\n    // ... error handling\n  }\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className={className}>\n      {/* Form fields - identisch zu Next.js */}\n    </form>\n  )\n}\n```\n\n**Usage in Astro:**\n```astro\n---\n// src/pages/contact.astro\nimport Layout from '@/layouts/Layout.astro'\nimport ContactForm from '@/components/islands/ContactForm'\n---\n\n<Layout title=\"Kontakt\">\n  <section>\n    <h1>Kontaktieren Sie uns</h1>\n    <ContactForm client:load />\n  </section>\n</Layout>\n```\n\n**Dependencies:** React Hook Form, Zod, Button-Component\n\n**Reuses:**\n- `lib/validations.ts` (1:1)\n- Next.js ContactForm-Logik\n- Bestehende Form-Components\n\n### Component 4: Content Collections (Blog-System)\n\n**Purpose:** Type-safe MDX-Content mit Astro Content Collections\n\n**File:** `src/content/config.ts`\n\n**Implementation:**\n```typescript\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content'\n\nconst blogCollection = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    pubDate: z.date(),\n    author: z.string().default('HEADON Team'),\n    image: z.string().optional(),\n    tags: z.array(z.string()).default([])\n  })\n})\n\nexport const collections = {\n  blog: blogCollection\n}\n```\n\n**Usage:**\n```astro\n---\n// src/pages/blog/[slug].astro\nimport { getCollection } from 'astro:content'\nimport Layout from '@/layouts/Layout.astro'\n\nexport async function getStaticPaths() {\n  const posts = await getCollection('blog')\n  return posts.map(post => ({\n    params: { slug: post.slug },\n    props: { post }\n  }))\n}\n\nconst { post } = Astro.props\nconst { Content } = await post.render()\n---\n\n<Layout title={post.data.title}>\n  <article>\n    <h1>{post.data.title}</h1>\n    <Content />\n  </article>\n</Layout>\n```\n\n**Dependencies:** Astro Content Collections API, Zod\n\n**Reuses:**\n- Bestehende MDX-Files aus `content/blog/`\n- Frontmatter-Schema (kompatibel)\n\n## Data Models\n\n### Content Collection Schema\n\n```typescript\n// src/content/config.ts\nconst blogPost = z.object({\n  title: z.string(),\n  description: z.string(),\n  pubDate: z.date(),\n  updatedDate: z.date().optional(),\n  author: z.string().default('HEADON Team'),\n  image: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n  draft: z.boolean().default(false)\n})\n\nconst serviceSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  icon: z.string(),\n  features: z.array(z.string()),\n  pricing: z.object({\n    from: z.number(),\n    duration: z.string()\n  }).optional()\n})\n\nconst portfolioSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  client: z.string(),\n  year: z.number(),\n  technologies: z.array(z.string()),\n  image: z.string(),\n  url: z.string().url().optional()\n})\n```\n\n### Supabase Data Models (unverändert)\n\n```typescript\n// src/types/supabase.ts\n// 1:1 aus Next.js übernommen\n\nexport interface ContactSubmission {\n  id: string\n  name: string\n  email: string\n  company?: string\n  message: string\n  created_at: string\n}\n```\n\n## Error Handling\n\n### Error Scenarios\n\n1. **Scenario: API-Endpoint Fehler (Kontaktformular)**\n   - **Handling:** Try-Catch in Astro-Endpoint, JSON-Error-Response\n   - **User Impact:** Toast-Notification mit Fehlermeldung\n   ```typescript\n   // src/pages/api/contact.ts\n   export async function POST({ request }: APIContext) {\n     try {\n       const data = await request.json()\n       const validated = contactSchema.parse(data)\n       // ... Supabase insert\n       return new Response(JSON.stringify({ success: true }), { status: 200 })\n     } catch (error) {\n       return new Response(\n         JSON.stringify({ error: 'Validation failed' }),\n         { status: 400 }\n       )\n     }\n   }\n   ```\n\n2. **Scenario: MDX-Content nicht gefunden**\n   - **Handling:** Astro wirft 404 automatisch bei ungültigen Slugs\n   - **User Impact:** Custom 404-Page mit hilfreichen Links\n   ```astro\n   ---\n   // src/pages/404.astro\n   import Layout from '@/layouts/Layout.astro'\n   ---\n   <Layout title=\"404 - Seite nicht gefunden\">\n     <h1>Seite nicht gefunden</h1>\n     <a href=\"/\">Zurück zur Startseite</a>\n   </Layout>\n   ```\n\n3. **Scenario: Build-Fehler (TypeScript/Zod)**\n   - **Handling:** Build schlägt fehl, CI/CD verhindert Deployment\n   - **User Impact:** Keine - Fehler wird vor Production gefangen\n   - **Developer Impact:** Klare Fehlermeldung in Build-Logs\n\n4. **Scenario: React-Island Hydration-Fehler**\n   - **Handling:** Error Boundary in React-Island\n   - **User Impact:** Fallback-UI, Formular bleibt nutzbar\n   ```tsx\n   // src/components/islands/ContactForm.tsx\n   import { ErrorBoundary } from 'react-error-boundary'\n\n   function ErrorFallback() {\n     return <div>Formular konnte nicht geladen werden. Bitte kontaktieren Sie uns per E-Mail.</div>\n   }\n\n   export default function ContactFormWrapper() {\n     return (\n       <ErrorBoundary FallbackComponent={ErrorFallback}>\n         <ContactForm />\n       </ErrorBoundary>\n     )\n   }\n   ```\n\n## Testing Strategy\n\n### Unit Testing\n\n**Approach:** Vitest (Astro's bevorzugtes Test-Framework)\n\n```bash\n# Installation\npnpm add -D vitest @vitest/ui\n\n# package.json\n{\n  \"scripts\": {\n    \"test\": \"vitest\",\n    \"test:ui\": \"vitest --ui\"\n  }\n}\n```\n\n**Key Components to Test:**\n- `lib/utils.ts` - `cn()` Funktion\n- `lib/validations.ts` - Zod-Schemas\n- `lib/services/*` - Business-Logik\n- React-Islands - Formular-Validierung, State-Management\n\n**Example:**\n```typescript\n// lib/utils.test.ts\nimport { describe, it, expect } from 'vitest'\nimport { cn } from './utils'\n\ndescribe('cn utility', () => {\n  it('merges classes correctly', () => {\n    expect(cn('foo', 'bar')).toBe('foo bar')\n    expect(cn('foo', { bar: true })).toBe('foo bar')\n  })\n})\n```\n\n### Integration Testing\n\n**Approach:** Playwright (bereits im Projekt vorhanden)\n\n**Key Flows to Test:**\n1. **Navigation Flow:** Homepage → Services → Contact\n2. **Contact Form Flow:** Ausfüllen → Validierung → Submission → Success\n3. **Blog Flow:** Blog-Liste → Artikel → Zurück\n4. **Responsive Flow:** Mobile-Menu → Navigation → Close\n\n**Example:**\n```typescript\n// tests/contact-form.spec.ts\nimport { test, expect } from '@playwright/test'\n\ntest('contact form submission', async ({ page }) => {\n  await page.goto('/contact')\n  await page.fill('[name=\"name\"]', 'Test User')\n  await page.fill('[name=\"email\"]', 'test@example.com')\n  await page.fill('[name=\"message\"]', 'Test message')\n  await page.click('button[type=\"submit\"]')\n\n  await expect(page.locator('.success-message')).toBeVisible()\n})\n```\n\n### End-to-End Testing\n\n**Approach:** Lighthouse CI für Performance-Tests\n\n```bash\n# Installation\npnpm add -D @lhci/cli\n\n# lighthouserc.json\n{\n  \"ci\": {\n    \"collect\": {\n      \"url\": [\"http://localhost:4321\"],\n      \"numberOfRuns\": 3\n    },\n    \"assert\": {\n      \"assertions\": {\n        \"categories:performance\": [\"error\", { \"minScore\": 0.98 }],\n        \"categories:accessibility\": [\"error\", { \"minScore\": 0.95 }],\n        \"categories:seo\": [\"error\", { \"minScore\": 0.95 }]\n      }\n    }\n  }\n}\n```\n\n**User Scenarios to Test:**\n1. **First-Time Visitor:** Homepage Load → LCP < 1.0s → Interactive < 2s\n2. **Returning Visitor:** Cached Assets → LCP < 0.5s\n3. **Mobile User:** Touch-Targets ≥ 48px → Viewport correct\n4. **SEO Crawler:** Meta-Tags vorhanden → Structured Data valid\n\n### Performance Benchmarking\n\n**Baseline (Next.js):**\n- LCP: ~1.5s\n- TTI: ~2-3s\n- Bundle: ~200-300KB\n- Lighthouse: 85-95\n\n**Target (Astro):**\n- LCP: < 1.0s\n- TTI: < 1.5s\n- Bundle: < 50KB\n- Lighthouse: 98-100\n\n**Measurement:**\n```bash\n# Build beiden Versionen\ncd ~/projects/headon && pnpm build\ncd ~/projects/headon-astro && pnpm build\n\n# Lighthouse-Vergleich\nlhci autorun --config=lighthouserc.json\n\n# Bundle-Analyse\ncd ~/projects/headon-astro\npnpm astro build --analyze\n```\n\n## Migration Phases\n\n### Phase 1: Foundation (Woche 1)\n\n**Tasks:**\n1. Astro-Projekt initialisieren (`pnpm create astro@latest`)\n2. Tailwind v4 + Integrations installieren\n3. `globals.css` übertragen\n4. `lib/utils.ts` + `lib/validations.ts` kopieren\n5. Layout-Struktur aufbauen (`Layout.astro`, `Header.astro`, `Footer.astro`)\n\n**Deliverable:** Leeres Astro-Projekt mit Design-System\n\n### Phase 2: Static Pages (Woche 1-2)\n\n**Tasks:**\n1. Homepage migrieren (`index.astro`)\n2. Statische Sections konvertieren (Hero, Process, Pricing)\n3. About-Page migrieren\n4. Legal-Pages migrieren (Imprint, Privacy, Terms)\n\n**Deliverable:** Alle statischen Seiten funktional\n\n### Phase 3: Dynamic Content (Woche 2)\n\n**Tasks:**\n1. Content Collections Setup (`src/content/config.ts`)\n2. Blog-Posts migrieren\n3. Blog-Liste + Detail-Pages\n4. Services-Pages (mit Dynamic Routes)\n5. Portfolio-Pages\n\n**Deliverable:** Alle Content-Pages funktional\n\n### Phase 4: Interactivity (Woche 2-3)\n\n**Tasks:**\n1. React-Integration testen\n2. Contact-Form als Island\n3. Mobile-Menu als Island\n4. API-Endpoints migrieren (`/api/contact`)\n5. Supabase-Integration testen\n\n**Deliverable:** Alle interaktiven Features funktional\n\n### Phase 5: Optimization (Woche 3)\n\n**Tasks:**\n1. Performance-Tests (Lighthouse)\n2. SEO-Audit (Meta-Tags, Sitemap, Robots)\n3. Image-Optimization\n4. Bundle-Analyse\n5. Accessibility-Tests\n\n**Deliverable:** Production-Ready Astro-Version\n\n### Phase 6: Deployment (Woche 3-4)\n\n**Tasks:**\n1. Docker-Setup für Astro\n2. CI/CD Pipeline anpassen\n3. Beta-Deployment (`beta.headon.pro`)\n4. A/B-Test (10% Traffic)\n5. Full-Rollout\n\n**Deliverable:** Live Astro-Website\n\n## Risk Mitigation\n\n| Risk | Impact | Likelihood | Mitigation |\n|------|--------|-----------|------------|\n| Framer Motion Animationen nicht replizierbar | Medium | Low | CSS-Animationen + View Transitions API |\n| React-Islands zu groß | High | Medium | Code-Splitting, lazy Loading |\n| SEO-Rankings sinken | High | Low | Pre-Launch SEO-Audit, Canonical-Tags |\n| Breaking Changes in Dependencies | Medium | Medium | Lock-File committen, staged Rollout |\n| Team-Onboarding schwierig | Low | Low | Astro ist einfacher als Next.js |\n\n## Success Metrics\n\n**Migration gilt als erfolgreich, wenn:**\n\n1. ✅ Lighthouse Performance ≥ 98 (aktuell 85-95)\n2. ✅ LCP < 1.0s (aktuell ~1.5s)\n3. ✅ JavaScript Bundle < 50KB (aktuell ~200-300KB)\n4. ✅ Build-Size < 100MB (aktuell 439MB)\n5. ✅ Alle 10 Requirements aus requirements.md erfüllt\n6. ✅ Keine SEO-Ranking-Verluste nach 30 Tagen\n7. ✅ Build-Zeit < 15s (aktuell 30-60s)\n8. ✅ Zero Critical Accessibility Issues\n",
  "fileStats": {
    "size": 24014,
    "lines": 822,
    "lastModified": "2025-10-11T19:46:47.517Z"
  },
  "comments": []
}
