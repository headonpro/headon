{
  "id": "snapshot_1761557484551_idddztifo",
  "approvalId": "approval_1761557484548_hzssswgh4",
  "approvalTitle": "SEO & Keyword Optimization - Design Document",
  "version": 1,
  "timestamp": "2025-10-27T09:31:24.551Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document: SEO & Keyword Optimization\n\n## Overview\n\nThis design document specifies the technical implementation of the SEO & Keyword Optimization feature for HEADON.pro. The implementation leverages Next.js 15's App Router, Server Components, and Metadata API to achieve superior SEO performance while maintaining the existing 95+ Lighthouse score.\n\n**Architecture Approach**:\n- Server-first rendering for optimal SEO crawlability\n- MDX-based content management for flexibility\n- Component-based design leveraging existing UI patterns\n- Static generation for maximum performance\n\n**Key Design Principles**:\n1. **Reuse Existing Patterns**: Follow established regional page patterns (app/regionen/[city])\n2. **Maintainable Content**: MDX frontmatter + content for easy updates\n3. **Performance First**: All new pages target <1.5s LCP, 95+ Lighthouse\n4. **Modular Components**: Single-purpose, reusable components\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**Language & Framework Compliance**:\n- ✅ TypeScript 5.9.2 with strict mode for all components\n- ✅ Next.js 15.5.2 App Router with Server Components as default\n- ✅ React 19.1.1 for UI components\n\n**Styling & UI**:\n- ✅ Tailwind CSS 4.1.13 for all styling\n- ✅ shadcn/ui components (Button, Select, Accordion, etc.) where applicable\n- ✅ Framer Motion for animations (if needed on client components)\n\n**Forms & Validation**:\n- ✅ React Hook Form 7.62.0 for PriceCalculator interactive form\n- ✅ Zod 4.1.5 for schema validation (if contact forms on landing pages)\n\n**Performance Requirements** (from tech.md):\n- ✅ Page Load Time (LCP): < 1.5 seconds ✓\n- ✅ Time to Interactive (TTI): < 3 seconds ✓\n- ✅ Lighthouse Score: 95+ maintained ✓\n- ✅ Initial Bundle Size: < 200KB (no heavy dependencies added) ✓\n\n**SEO Standards** (from tech.md):\n- ✅ Next.js Metadata API for all pages\n- ✅ Open Graph tags for social sharing\n- ✅ Schema.org structured data (LocalBusiness, Article)\n- ✅ Automatic sitemap.xml generation via Next.js\n\n**Development Tools**:\n- ✅ ESLint 9.35.0 for code quality\n- ✅ Prettier 3.6.2 for consistent formatting\n- ✅ pnpm 10.15.0 as package manager\n\n### Project Structure (structure.md)\n\n**File Organization**:\n```\napp/\n├── branchen/                    # Industry landing pages (NEW)\n│   ├── [branche]/\n│   │   ├── page.tsx            # Dynamic industry page\n│   │   └── metadata.ts         # Metadata generation\n│   └── page.tsx                # Industry overview\n├── preise/                      # Pricing page (NEW)\n│   └── page.tsx\n├── blog/                        # Existing, will add posts\n│   └── [slug]/page.tsx\n└── technologie/                 # Technology pages (NEW)\n    └── [tech]/page.tsx\n\ncomponents/\n├── sections/\n│   ├── BrancheContent.tsx      # Industry page layout (NEW)\n│   ├── PricingCalculator.tsx   # Interactive calculator (NEW)\n│   ├── PricingTable.tsx        # Price packages (NEW)\n│   └── BlogPostContent.tsx     # Blog post layout (NEW)\n└── seo/\n    ├── StructuredData.tsx      # JSON-LD schema (exists, extend)\n    └── Breadcrumbs.tsx         # Navigation breadcrumbs (exists)\n\ncontent/\n├── branchen/                    # Industry MDX content (NEW)\n│   ├── gastronomie.mdx\n│   ├── handwerk.mdx\n│   ├── einzelhandel.mdx\n│   ├── beratung.mdx\n│   ├── immobilien.mdx\n│   └── fitness.mdx\n├── blog/                        # Blog MDX content (NEW)\n│   ├── website-kosten-2025.mdx\n│   ├── website-erstellen-lassen.mdx\n│   └── ...\n└── technologie/                 # Technology MDX content (NEW)\n    ├── next-js-agentur.mdx\n    └── ...\n\nlib/content/\n└── content-api.ts              # Extend with getBranchePage, getBlogPost\n```\n\n**Naming Conventions** (from structure.md):\n- ✅ Route folders: `kebab-case` (branchen, preise, technologie)\n- ✅ Component files: `PascalCase.tsx` (BrancheContent.tsx)\n- ✅ MDX content: `kebab-case.mdx` (gastronomie.mdx)\n- ✅ Utility files: `camelCase.ts` (content-api.ts)\n\n**Import Pattern**:\n```typescript\n// 1. React/Next.js\nimport type { Metadata } from 'next'\nimport Link from 'next/link'\n\n// 2. External dependencies\nimport { motion } from 'framer-motion'\n\n// 3. Internal components\nimport { Button } from '@/components/ui/button'\nimport HeroSection from '@/components/sections/HeroSection'\n\n// 4. Utilities\nimport { cn } from '@/lib/utils'\nimport { getBranchePage } from '@/lib/content/content-api'\n\n// 5. Types\nimport type { BranchePageData } from '@/lib/types/content'\n```\n\n**Code Size Guidelines**:\n- Component files: ≤ 300 lines (target: 100-200)\n- Page files: ≤ 200 lines (compose sections)\n- MDX content: No hard limit (content-driven)\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n**1. Layout Components** (components/layout/)\n- ✅ **Header.tsx**: Will update navigation to include \"Branchen\" menu item\n- ✅ **Footer.tsx**: Will add links to new sections (Branchen, Preise, Blog)\n\n**2. UI Primitives** (components/ui/)\n- ✅ **Button**: CTA buttons on all landing pages\n- ✅ **Accordion**: FAQ sections on industry pages\n- ✅ **Select**: PriceCalculator form inputs\n- ✅ **Card**: Pricing packages, feature grids\n\n**3. SEO Components** (components/seo/)\n- ✅ **StructuredData.tsx**: Extend with Article, Service schema types\n- ✅ **Breadcrumbs.tsx**: Use on all landing pages\n- ✅ **PageHeader.tsx**: Reuse for consistent headers\n\n**4. Section Components** (components/sections/)\n- ✅ **IndustryNavigator.tsx**: Update to link to dedicated industry pages\n- ✅ **ProcessSection.tsx**: Reuse on technology pages\n- ✅ **TrustPersonalitySection.tsx**: Reuse on pricing page\n\n**5. Content API** (lib/content/content-api.ts)\n- ✅ **getCityPage()**: Pattern for getBranchePage()\n- ✅ **getServicePage()**: Pattern for getTechnologyPage()\n- ✅ **compileMDXContent()**: Reuse for all new MDX content\n\n### Integration Points\n\n**1. Existing Regional Pages** (app/regionen/[city])\n- **Integration**: Industry pages follow identical pattern\n- **Reuse**: Same metadata generation approach\n- **Reuse**: Same MDX + Server Component pattern\n\n**2. Navigation System** (components/layout/Header.tsx)\n- **Integration**: Add \"Branchen\" dropdown with 6 industry links\n- **Integration**: Add \"Ratgeber\" (Blog) link\n- **Integration**: Add \"Preise\" link\n\n**3. IndustryNavigator Component** (components/sections/IndustryNavigator.tsx)\n- **Current State**: Displays 6 industries (Gastronomie, Handwerk, Einzelhandel, Beratung, Immobilien, Fitness)\n- **Integration**: Update each industry card to link to `/branchen/[id]`\n- **Code Change**: Wrap cards in `<Link href={`/branchen/${industry.id}`}>`\n\n**4. Sitemap Generation** (app/sitemap.ts)\n- **Integration**: Add new routes to sitemap\n  - /branchen + 6 industry pages\n  - /preise\n  - /blog + all blog posts\n  - /technologie + 6 technology pages\n\n**5. Supabase (Optional - Future)**\n- **No Integration Required**: All content is static MDX\n- **Future**: Contact form submissions on landing pages use existing Supabase contact table\n\n## Architecture\n\n### Overall Architecture Pattern\n\n**Hybrid Rendering Strategy**:\n```mermaid\ngraph TD\n    A[User Request] --> B{Route Type}\n    B -->|Static Routes| C[SSG - Pre-rendered at Build]\n    B -->|Dynamic Routes| D[SSR - Server Rendered]\n\n    C --> E[Industry Pages]\n    C --> F[Blog Posts]\n    C --> G[Technology Pages]\n    C --> H[Pricing Page]\n\n    D --> I[Contact Forms]\n\n    E --> J[CDN Cache]\n    F --> J\n    G --> J\n    H --> J\n\n    J --> K[Browser]\n```\n\n### Modular Design Principles\n\n**1. Single File Responsibility**:\n- Each industry page: One `page.tsx` + one `[branche].mdx`\n- Each blog post: One `[slug]/page.tsx` + one `blog-post.mdx`\n- Each component: One clear purpose (BrancheContent only renders industry pages)\n\n**2. Component Isolation**:\n- `BrancheContent.tsx`: Renders industry page sections\n- `PricingCalculator.tsx`: Interactive price calculator (isolated state)\n- `PricingTable.tsx`: Static pricing display\n- `BlogPostContent.tsx`: Blog post layout with TOC, author, share buttons\n\n**3. Service Layer Separation**:\n- **Data Access**: `lib/content/content-api.ts` (getBranchePage, getBlogPost)\n- **Business Logic**: Frontmatter validation, content compilation\n- **Presentation**: React components in `components/`\n\n**4. Utility Modularity**:\n- `lib/validations.ts`: Extend with PriceCalculator schema\n- `lib/utils.ts`: Add `generateBreadcrumbs()` utility\n\n### Data Flow\n\n```mermaid\ngraph LR\n    A[MDX File] --> B[content-api.ts]\n    B --> C[Frontmatter Parse]\n    B --> D[MDX Compilation]\n    C --> E[TypeScript Types]\n    D --> F[React Component]\n    E --> G[Page.tsx]\n    F --> G\n    G --> H[Server Render]\n    H --> I[HTML + Metadata]\n```\n\n## Components and Interfaces\n\n### Component 1: BrancheContent.tsx\n\n**Purpose**: Server Component that renders complete industry landing page\n\n**File**: `components/sections/BrancheContent.tsx`\n\n**Interfaces**:\n```typescript\ninterface BrancheContentProps {\n  branche: string\n  content: BranchePageData\n}\n\ninterface BranchePageData {\n  frontmatter: {\n    name: string\n    icon: string\n    heroTitle: string\n    heroSubtitle: string\n    features: Feature[]\n    pricing: PricingInfo\n    faqs: FAQ[]\n    caseStudies?: string[]\n  }\n  content: string\n}\n\ninterface Feature {\n  title: string\n  description: string\n  icon: string\n}\n\ninterface PricingInfo {\n  from: number\n  to?: number\n  currency: string\n}\n\ninterface FAQ {\n  question: string\n  answer: string\n}\n```\n\n**Dependencies**:\n- `@/components/ui/button` (CTA buttons)\n- `@/components/ui/accordion` (FAQ section)\n- `@/components/seo/Breadcrumbs` (navigation)\n- `lucide-react` (icons)\n\n**Reuses**:\n- **CityPageContent.tsx pattern**: Similar structure with hero, features, FAQs\n- **Existing section components**: Can embed ProcessSection, TrustSection\n\n**Rendering Strategy**: Server Component (no client interactivity except FAQ accordion)\n\n---\n\n### Component 2: PricingCalculator.tsx\n\n**Purpose**: Client Component with interactive price calculator form\n\n**File**: `components/sections/PricingCalculator.tsx`\n\n**Interfaces**:\n```typescript\n'use client'\n\ninterface PricingCalculatorProps {\n  className?: string\n}\n\ninterface CalculatorFormData {\n  projectType: 'website' | 'webapp' | 'app' | 'ecommerce'\n  complexity: 'simple' | 'medium' | 'complex'\n  features: string[] // ['seo', 'cms', 'analytics', 'branding', etc.]\n  pages?: number\n  customFeatures?: string\n}\n\ninterface PriceEstimate {\n  basePrice: number\n  featuresCost: number\n  complexityMultiplier: number\n  total: number\n  timeframe: string\n}\n```\n\n**Dependencies**:\n- `react-hook-form` (form state)\n- `zod` (validation schema)\n- `@/components/ui/select` (dropdowns)\n- `@/components/ui/button` (submit button)\n- `framer-motion` (price update animations)\n\n**State Management**:\n```typescript\nconst [estimate, setEstimate] = useState<PriceEstimate | null>(null)\nconst form = useForm<CalculatorFormData>({\n  resolver: zodResolver(calculatorSchema)\n})\n\n// Real-time calculation on form change\nuseEffect(() => {\n  const subscription = form.watch((values) => {\n    const calculated = calculatePrice(values)\n    setEstimate(calculated)\n  })\n  return () => subscription.unsubscribe()\n}, [form])\n```\n\n**Calculation Logic**:\n```typescript\nfunction calculatePrice(data: CalculatorFormData): PriceEstimate {\n  const basePrices = {\n    website: 5000,\n    webapp: 15000,\n    app: 20000,\n    ecommerce: 12000\n  }\n\n  const complexityMultipliers = {\n    simple: 1.0,\n    medium: 1.5,\n    complex: 2.5\n  }\n\n  const featureCosts = {\n    seo: 1500,\n    cms: 2000,\n    analytics: 500,\n    branding: 3000,\n    // ... more\n  }\n\n  const basePrice = basePrices[data.projectType]\n  const multiplier = complexityMultipliers[data.complexity]\n  const featuresCost = data.features.reduce((sum, f) => sum + (featureCosts[f] || 0), 0)\n\n  return {\n    basePrice,\n    featuresCost,\n    complexityMultiplier: multiplier,\n    total: (basePrice * multiplier) + featuresCost,\n    timeframe: estimateTimeframe(data)\n  }\n}\n```\n\n**Reuses**:\n- **React Hook Form pattern**: Same as contact form\n- **Zod validation**: Same pattern as lib/validations.ts\n\n---\n\n### Component 3: PricingTable.tsx\n\n**Purpose**: Server Component displaying static pricing packages\n\n**File**: `components/sections/PricingTable.tsx`\n\n**Interfaces**:\n```typescript\ninterface PricingTableProps {\n  packages: PricingPackage[]\n}\n\ninterface PricingPackage {\n  name: string\n  description: string\n  price: number\n  currency: string\n  features: string[]\n  highlighted?: boolean\n  ctaText: string\n  ctaLink: string\n}\n```\n\n**Dependencies**:\n- `@/components/ui/button` (CTA buttons)\n- `lucide-react` (CheckCircle icons)\n\n**Data Source**:\n```typescript\n// lib/content/pricing-data.ts\nexport const pricingPackages: PricingPackage[] = [\n  {\n    name: 'Basis',\n    description: 'Für kleine Unternehmen und Startups',\n    price: 2500,\n    currency: 'EUR',\n    features: [\n      'Responsive Website (5-8 Seiten)',\n      'CMS Integration',\n      'SEO-Grundoptimierung',\n      // ...\n    ],\n    ctaText: 'Jetzt anfragen',\n    ctaLink: '/contact?package=basis'\n  },\n  // ... Professional, Premium\n]\n```\n\n**Reuses**:\n- **Card layout pattern**: Similar to service cards on homepage\n\n---\n\n### Component 4: BlogPostContent.tsx\n\n**Purpose**: Server Component for blog post layout with TOC, sharing, related posts\n\n**File**: `components/sections/BlogPostContent.tsx`\n\n**Interfaces**:\n```typescript\ninterface BlogPostContentProps {\n  post: BlogPostData\n  relatedPosts: BlogPostData[]\n}\n\ninterface BlogPostData {\n  frontmatter: {\n    title: string\n    description: string\n    author: string\n    publishDate: string\n    readingTime: number\n    tags: string[]\n    featuredImage: string\n    relatedPosts?: string[]\n  }\n  content: string\n  tableOfContents: TOCItem[]\n}\n\ninterface TOCItem {\n  id: string\n  title: string\n  level: number\n}\n```\n\n**Dependencies**:\n- `@/components/ui/button` (share buttons)\n- `@/components/seo/Breadcrumbs` (navigation)\n- `lucide-react` (Share2, Clock, Calendar icons)\n\n**Layout Structure**:\n```typescript\nreturn (\n  <article>\n    {/* Breadcrumbs */}\n    <Breadcrumbs items={breadcrumbs} />\n\n    {/* Header */}\n    <header>\n      <h1>{post.frontmatter.title}</h1>\n      <div className=\"meta\">\n        <span>{post.frontmatter.author}</span>\n        <span>{formatDate(post.frontmatter.publishDate)}</span>\n        <span>{post.frontmatter.readingTime} Min. Lesezeit</span>\n      </div>\n    </header>\n\n    {/* Featured Image */}\n    <Image src={post.frontmatter.featuredImage} ... />\n\n    {/* Two-column layout: TOC (sticky) + Content */}\n    <div className=\"grid lg:grid-cols-[250px_1fr] gap-8\">\n      {/* Table of Contents (sticky sidebar) */}\n      <aside className=\"sticky top-24\">\n        <TableOfContents items={post.tableOfContents} />\n      </aside>\n\n      {/* Main Content */}\n      <div className=\"prose prose-lg\">\n        <MDXContent content={post.content} />\n      </div>\n    </div>\n\n    {/* Share Buttons */}\n    <ShareButtons url={currentUrl} title={post.frontmatter.title} />\n\n    {/* Related Posts */}\n    <RelatedPostsGrid posts={relatedPosts} />\n\n    {/* CTA */}\n    <CTASection />\n  </article>\n)\n```\n\n**Reuses**:\n- **Breadcrumbs component**: Existing\n- **Image component**: Next.js Image with optimization\n- **CTA Section**: Existing component\n\n---\n\n### Component 5: TechnologyPageContent.tsx\n\n**Purpose**: Server Component for technology-specific pages\n\n**File**: `components/sections/TechnologyPageContent.tsx`\n\n**Interfaces**:\n```typescript\ninterface TechnologyPageContentProps {\n  tech: string\n  content: TechnologyPageData\n  relatedProjects: PortfolioProject[]\n}\n\ninterface TechnologyPageData {\n  frontmatter: {\n    name: string\n    logo: string\n    description: string\n    benefits: string[]\n    useCases: UseCase[]\n    comparison: TechComparison\n    faqs: FAQ[]\n  }\n  content: string\n}\n\ninterface UseCase {\n  title: string\n  description: string\n  bestFor: string[]\n}\n\ninterface TechComparison {\n  alternatives: string[]\n  comparisonTable: ComparisonRow[]\n}\n```\n\n**Dependencies**:\n- `@/components/ui/accordion` (FAQ)\n- `@/components/sections/ProcessSection` (reuse)\n- `@/components/showcase/PhoneMockup3D` (showcase)\n\n**Reuses**:\n- **Service page pattern**: Similar structure to service pages\n- **Portfolio integration**: Link to projects using this tech\n\n---\n\n### Component 6: IndustryNavigator.tsx (Update)\n\n**Purpose**: Update existing component to link to industry landing pages\n\n**File**: `components/sections/IndustryNavigator.tsx` (existing)\n\n**Changes Required**:\n```typescript\n// BEFORE\n<motion.div className=\"industry-card\">\n  <Utensils className=\"icon\" />\n  <h3>{industry.title}</h3>\n  {/* ... */}\n</motion.div>\n\n// AFTER\n<Link href={`/branchen/${industry.id}`}>\n  <motion.div className=\"industry-card hover:scale-105\">\n    <Utensils className=\"icon\" />\n    <h3>{industry.title}</h3>\n    {/* ... */}\n  </motion.div>\n</Link>\n```\n\n**Impact**: Minimal - just wrap cards in Link components\n\n---\n\n## Data Models\n\n### Model 1: BranchePage (Industry Page)\n\n**File**: `content/branchen/[branche].mdx`\n\n**Frontmatter Schema**:\n```typescript\ninterface BrancheFrontmatter {\n  name: string                    // \"Gastronomie & Restaurant\"\n  icon: string                    // \"UtensilsCrossed\" (lucide-react icon name)\n  heroTitle: string               // \"Website für Restaurant & Gastronomie\"\n  heroSubtitle: string            // \"Online-Speisekarte, Reservierung & mehr\"\n\n  pricing: {\n    from: number                  // 2500\n    to?: number                   // 4500\n    currency: string              // \"EUR\"\n  }\n\n  features: Array<{\n    title: string                 // \"Online-Speisekarte\"\n    description: string           // \"Digitale Speisekarte mit Bildern...\"\n    icon: string                  // \"Menu\" (lucide icon)\n  }>\n\n  caseStudies?: string[]          // ['restaurant-beispiel-1']\n\n  faqs: Array<{\n    question: string\n    answer: string\n  }>\n}\n```\n\n**Content Structure** (after frontmatter):\n```markdown\n---\n# Frontmatter here\n---\n\n## Restaurant-Websites, die Gäste begeistern\n\nIn der Gastronomie ist der erste Eindruck entscheidend...\n\n### Warum HEADON für Ihre Restaurant-Website?\n\n**Gastronomie-Expertise:**\nWir kennen die Anforderungen...\n\n## Features für Restaurants\n\n### Online-Speisekarte (Digital Menu)\nPräsentieren Sie Ihre Gerichte...\n\n## Preise für Restaurant-Websites\n\n### Basis-Paket (2.500 EUR)\n- Responsive Website (5-8 Seiten)\n- Digitale Speisekarte mit Bildern\n...\n```\n\n**Validation** (lib/validations.ts):\n```typescript\nexport const brancheFrontmatterSchema = z.object({\n  name: z.string().min(1),\n  icon: z.string(),\n  heroTitle: z.string().min(10),\n  heroSubtitle: z.string().min(10),\n  pricing: z.object({\n    from: z.number().positive(),\n    to: z.number().positive().optional(),\n    currency: z.string().length(3)\n  }),\n  features: z.array(z.object({\n    title: z.string(),\n    description: z.string(),\n    icon: z.string()\n  })).min(3).max(8),\n  caseStudies: z.array(z.string()).optional(),\n  faqs: z.array(z.object({\n    question: z.string(),\n    answer: z.string()\n  })).min(3)\n})\n```\n\n---\n\n### Model 2: BlogPost\n\n**File**: `content/blog/[slug].mdx`\n\n**Frontmatter Schema**:\n```typescript\ninterface BlogPostFrontmatter {\n  title: string                   // \"Website Kosten 2025: Der komplette Guide\"\n  description: string             // SEO description (150-160 chars)\n  author: string                  // \"HEADON Team\"\n  publishDate: string             // \"2025-01-15\"\n  updateDate?: string             // \"2025-01-20\" (if updated)\n  readingTime: number             // 8 (minutes)\n\n  featuredImage: string           // \"/images/blog/website-kosten-2025.jpg\"\n  featuredImageAlt: string        // \"Laptop showing website pricing calculator\"\n\n  tags: string[]                  // [\"Webdesign\", \"Preise\", \"Ratgeber\"]\n  category: string                // \"Webdesign\"\n\n  keywords: string[]              // [\"Website Kosten\", \"Webdesign Preise\", ...]\n\n  relatedPosts?: string[]         // ['website-erstellen-lassen', ...]\n  relatedServices?: string[]      // ['web-development', ...]\n\n  seo: {\n    canonical?: string            // If published elsewhere first\n    noindex?: boolean             // Default: false\n  }\n}\n```\n\n**Content Structure**:\n```markdown\n---\n# Frontmatter\n---\n\n## Einleitung\n\n[Problem statement, hook]\n\n## Faktoren, die Website-Kosten beeinflussen\n\n### 1. Design-Komplexität\n\n[Explanation with examples]\n\n### 2. Funktionsumfang\n\n[Features list with cost estimates]\n\n## Preisübersicht nach Website-Typ\n\n### Landing Page (1.500 - 3.000 EUR)\n- Features\n- Use cases\n- Timeframe\n\n### Corporate Website (5.000 - 15.000 EUR)\n...\n\n## Versteckte Kosten\n\n- Hosting & Domain\n- SSL-Zertifikat\n- Wartung\n...\n\n## Interaktiver Preis-Rechner\n\n[Embed from /preise page]\n\n## Wann lohnt sich eine professionelle Agentur?\n\n...\n\n## Häufige Fragen\n\n[FAQ section]\n\n## Fazit\n\n[Summary + CTA]\n```\n\n---\n\n### Model 3: TechnologyPage\n\n**File**: `content/technologie/[tech].mdx`\n\n**Frontmatter Schema**:\n```typescript\ninterface TechnologyFrontmatter {\n  name: string                    // \"Next.js\"\n  officialName: string            // \"Next.js by Vercel\"\n  logo: string                    // \"/images/tech/nextjs.svg\"\n  version: string                 // \"15.x\"\n\n  description: string             // \"React Framework for Production\"\n\n  benefits: string[]              // [\"Server-Side Rendering\", \"SEO-optimiert\", ...]\n\n  useCases: Array<{\n    title: string                 // \"E-Commerce Websites\"\n    description: string\n    bestFor: string[]             // [\"High Traffic\", \"SEO-critical\"]\n  }>\n\n  comparison: {\n    alternatives: string[]        // [\"WordPress\", \"Gatsby\", \"Remix\"]\n    table: Array<{\n      feature: string\n      nextjs: string\n      alternative1: string\n      alternative2: string\n    }>\n  }\n\n  relatedProjects: string[]       // Portfolio project slugs\n\n  faqs: Array<{\n    question: string\n    answer: string\n  }>\n}\n```\n\n---\n\n### Model 4: PageMetadata (Reusable)\n\n**File**: `lib/types/metadata.ts`\n\n**TypeScript Interface**:\n```typescript\nexport interface PageMetadata {\n  title: string\n  description: string\n  keywords?: string | string[]\n  canonical?: string\n  openGraph: {\n    title: string\n    description: string\n    url: string\n    siteName: string\n    locale: string\n    type: 'website' | 'article'\n    images: Array<{\n      url: string\n      width: number\n      height: number\n      alt: string\n    }>\n    publishedTime?: string        // For blog posts\n    modifiedTime?: string\n    authors?: string[]\n    section?: string              // \"Blog\", \"Services\"\n  }\n  twitter: {\n    card: 'summary_large_image'\n    title: string\n    description: string\n    images: string[]\n  }\n  alternates?: {\n    canonical: string\n  }\n}\n```\n\n**Usage Example**:\n```typescript\n// app/branchen/gastronomie/page.tsx\nexport const metadata: Metadata = {\n  title: 'Website für Restaurant & Gastronomie | HEADON.pro',\n  description: 'Professionelle Restaurant-Websites mit Online-Speisekarte...',\n  keywords: [\n    'Website für Restaurant erstellen',\n    'Restaurant Webdesign',\n    // ...\n  ].join(', '),\n  openGraph: {\n    title: 'Restaurant Website erstellen | Gastronomie Webdesign',\n    description: 'Professionelle Websites für Restaurants...',\n    url: 'https://headon.pro/branchen/gastronomie',\n    siteName: 'HEADON.pro',\n    locale: 'de_DE',\n    type: 'website',\n    images: [{\n      url: '/og-images/branchen-gastronomie.jpg',\n      width: 1200,\n      height: 630,\n      alt: 'HEADON.pro - Restaurant Websites'\n    }]\n  },\n  alternates: {\n    canonical: 'https://headon.pro/branchen/gastronomie'\n  }\n}\n```\n\n---\n\n## Error Handling\n\n### Error Scenario 1: MDX File Not Found\n\n**Scenario**: User navigates to `/branchen/invalid-branche`\n\n**Handling**:\n```typescript\n// app/branchen/[branche]/page.tsx\nexport default async function BranchePage({ params }) {\n  const { branche } = await params\n\n  const brancheData = await getBranchePage(branche)\n\n  if (!brancheData) {\n    notFound() // Next.js 404 page\n  }\n\n  // ... render page\n}\n```\n\n**User Impact**:\n- User sees custom 404 page (app/not-found.tsx)\n- Suggested links to valid industry pages\n- Search bar to find content\n\n---\n\n### Error Scenario 2: Invalid MDX Frontmatter\n\n**Scenario**: Editor creates MDX file with missing required frontmatter fields\n\n**Handling**:\n```typescript\n// lib/content/content-api.ts\nimport { brancheFrontmatterSchema } from '@/lib/validations'\n\nexport async function getBranchePage(slug: string) {\n  try {\n    const rawContent = await fs.readFile(`content/branchen/${slug}.mdx`, 'utf-8')\n    const { data: frontmatter, content } = matter(rawContent)\n\n    // Validate frontmatter\n    const validated = brancheFrontmatterSchema.parse(frontmatter)\n\n    return {\n      frontmatter: validated,\n      content\n    }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      console.error('Invalid frontmatter:', error.errors)\n      // In development: throw detailed error\n      // In production: return null (triggers 404)\n      if (process.env.NODE_ENV === 'development') {\n        throw new Error(`Invalid frontmatter in ${slug}.mdx: ${error.message}`)\n      }\n      return null\n    }\n    // File not found\n    return null\n  }\n}\n```\n\n**User Impact**:\n- Development: Clear error message in console/terminal\n- Production: Graceful 404, page not rendered\n\n---\n\n### Error Scenario 3: PriceCalculator Form Validation Error\n\n**Scenario**: User submits calculator without selecting project type\n\n**Handling**:\n```typescript\n// components/sections/PricingCalculator.tsx\nconst onSubmit = (data: CalculatorFormData) => {\n  try {\n    const estimate = calculatePrice(data)\n    setEstimate(estimate)\n    toast.success('Preis berechnet!')\n  } catch (error) {\n    toast.error('Bitte alle Pflichtfelder ausfüllen')\n  }\n}\n\n// Inline validation with error messages\n<Select\n  {...form.register('projectType')}\n  error={form.formState.errors.projectType?.message}\n/>\n```\n\n**User Impact**:\n- Red border on invalid field\n- Error message below field: \"Bitte wählen Sie einen Projekttyp\"\n- Form submit disabled until valid\n\n---\n\n### Error Scenario 4: Image Loading Failure\n\n**Scenario**: Featured image for blog post fails to load (404)\n\n**Handling**:\n```typescript\n// components/sections/BlogPostContent.tsx\n<Image\n  src={post.frontmatter.featuredImage}\n  alt={post.frontmatter.featuredImageAlt}\n  width={1200}\n  height={630}\n  onError={(e) => {\n    // Fallback to placeholder\n    e.currentTarget.src = '/images/blog/placeholder.jpg'\n  }}\n  priority\n/>\n```\n\n**User Impact**:\n- Placeholder image shown (generic HEADON branding)\n- No layout shift (dimensions preserved)\n- Page still loads normally\n\n---\n\n### Error Scenario 5: Build-Time Static Generation Failure\n\n**Scenario**: `generateStaticParams()` fails for industry pages\n\n**Handling**:\n```typescript\n// app/branchen/[branche]/page.tsx\nexport async function generateStaticParams() {\n  try {\n    const branchenDir = path.join(process.cwd(), 'content/branchen')\n    const files = await fs.readdir(branchenDir)\n\n    return files\n      .filter(f => f.endsWith('.mdx'))\n      .map(f => ({ branche: f.replace('.mdx', '') }))\n  } catch (error) {\n    console.error('Failed to generate static params for branchen:', error)\n    // Return empty array - pages will be generated on-demand (SSR)\n    return []\n  }\n}\n```\n\n**User Impact**:\n- Build continues (doesn't fail)\n- Pages generated on-demand on first request\n- Slower initial load for first visitor (then cached)\n\n---\n\n## Testing Strategy\n\n### Unit Testing\n\n**Approach**: Test utility functions and price calculation logic\n\n**Framework**: Not currently implemented (per tech.md), but recommendation:\n- **Jest** or **Vitest** for unit tests\n- **React Testing Library** for component tests\n\n**Key Components to Test**:\n\n1. **PriceCalculator Logic**:\n```typescript\n// __tests__/lib/pricing.test.ts\ndescribe('calculatePrice', () => {\n  it('should calculate base website price correctly', () => {\n    const input = {\n      projectType: 'website',\n      complexity: 'simple',\n      features: []\n    }\n    const result = calculatePrice(input)\n    expect(result.total).toBe(5000)\n  })\n\n  it('should apply complexity multiplier', () => {\n    const input = {\n      projectType: 'website',\n      complexity: 'complex',\n      features: []\n    }\n    const result = calculatePrice(input)\n    expect(result.total).toBe(5000 * 2.5)\n  })\n\n  it('should add feature costs', () => {\n    const input = {\n      projectType: 'website',\n      complexity: 'simple',\n      features: ['seo', 'cms']\n    }\n    const result = calculatePrice(input)\n    expect(result.total).toBe(5000 + 1500 + 2000)\n  })\n})\n```\n\n2. **Frontmatter Validation**:\n```typescript\n// __tests__/lib/validations.test.ts\ndescribe('brancheFrontmatterSchema', () => {\n  it('should validate correct frontmatter', () => {\n    const valid = {\n      name: 'Gastronomie',\n      icon: 'Utensils',\n      heroTitle: 'Restaurant Websites',\n      heroSubtitle: 'Online-Speisekarte & mehr',\n      pricing: { from: 2500, currency: 'EUR' },\n      features: [\n        { title: 'Feature 1', description: 'Desc', icon: 'Icon1' },\n        { title: 'Feature 2', description: 'Desc', icon: 'Icon2' },\n        { title: 'Feature 3', description: 'Desc', icon: 'Icon3' }\n      ],\n      faqs: [\n        { question: 'Q1', answer: 'A1' },\n        { question: 'Q2', answer: 'A2' },\n        { question: 'Q3', answer: 'A3' }\n      ]\n    }\n    expect(() => brancheFrontmatterSchema.parse(valid)).not.toThrow()\n  })\n\n  it('should reject frontmatter with missing fields', () => {\n    const invalid = { name: 'Test' } // missing required fields\n    expect(() => brancheFrontmatterSchema.parse(invalid)).toThrow()\n  })\n})\n```\n\n3. **Metadata Generation**:\n```typescript\n// __tests__/lib/metadata-utils.test.ts\ndescribe('generateBrancheMetadata', () => {\n  it('should generate correct metadata', () => {\n    const frontmatter = { /* mock data */ }\n    const metadata = generateBrancheMetadata('gastronomie', frontmatter)\n\n    expect(metadata.title).toContain('Gastronomie')\n    expect(metadata.openGraph.images).toHaveLength(1)\n    expect(metadata.alternates.canonical).toBe('https://headon.pro/branchen/gastronomie')\n  })\n})\n```\n\n---\n\n### Integration Testing\n\n**Approach**: Test data flow from MDX files to rendered pages\n\n**Framework**: **Playwright** (already installed - tech.md)\n\n**Key Flows to Test**:\n\n1. **Industry Page Rendering**:\n```typescript\n// tests/integration/branchen.spec.ts\nimport { test, expect } from '@playwright/test'\n\ntest.describe('Industry Pages', () => {\n  test('should render Gastronomie page with all sections', async ({ page }) => {\n    await page.goto('/branchen/gastronomie')\n\n    // Check hero section\n    await expect(page.locator('h1')).toContainText('Restaurant')\n\n    // Check features section\n    await expect(page.locator('[data-testid=\"features-grid\"]')).toBeVisible()\n\n    // Check pricing section\n    await expect(page.locator('[data-testid=\"pricing-info\"]')).toContainText('2.500')\n\n    // Check FAQ accordion\n    await expect(page.locator('[data-testid=\"faq-section\"]')).toBeVisible()\n  })\n\n  test('should navigate to industry page from homepage', async ({ page }) => {\n    await page.goto('/')\n\n    // Click on Gastronomie card in IndustryNavigator\n    await page.click('[data-industry-id=\"gastronomie\"]')\n\n    await expect(page).toHaveURL('/branchen/gastronomie')\n  })\n})\n```\n\n2. **Pricing Calculator**:\n```typescript\n// tests/integration/pricing-calculator.spec.ts\ntest('should calculate price correctly', async ({ page }) => {\n  await page.goto('/preise')\n\n  // Select project type\n  await page.selectOption('[name=\"projectType\"]', 'website')\n\n  // Select complexity\n  await page.selectOption('[name=\"complexity\"]', 'medium')\n\n  // Add features\n  await page.check('[name=\"features\"][value=\"seo\"]')\n  await page.check('[name=\"features\"][value=\"cms\"]')\n\n  // Check calculated price\n  const priceElement = page.locator('[data-testid=\"calculated-price\"]')\n  await expect(priceElement).toContainText('11.000')\n})\n```\n\n3. **Blog Post Navigation**:\n```typescript\n// tests/integration/blog.spec.ts\ntest('should display blog post with TOC', async ({ page }) => {\n  await page.goto('/blog/website-kosten-2025')\n\n  // Check metadata\n  await expect(page).toHaveTitle(/Website Kosten 2025/)\n\n  // Check TOC\n  await expect(page.locator('[data-testid=\"table-of-contents\"]')).toBeVisible()\n\n  // Click TOC link\n  await page.click('a[href=\"#faktoren-die-website-kosten-beeinflussen\"]')\n\n  // Check scroll to section\n  const section = page.locator('#faktoren-die-website-kosten-beeinflussen')\n  await expect(section).toBeInViewport()\n})\n```\n\n---\n\n### End-to-End Testing\n\n**Approach**: Test complete user journeys from landing to conversion\n\n**Framework**: **Playwright** (already installed)\n\n**User Scenarios to Test**:\n\n1. **Restaurant Owner Journey**:\n```typescript\n// tests/e2e/restaurant-owner-journey.spec.ts\ntest('Restaurant owner finds industry page and requests quote', async ({ page }) => {\n  // 1. User searches Google and lands on homepage\n  await page.goto('/')\n\n  // 2. Sees IndustryNavigator, clicks Gastronomie\n  await page.click('[data-industry-id=\"gastronomie\"]')\n  await expect(page).toHaveURL('/branchen/gastronomie')\n\n  // 3. Reads features and pricing\n  await page.locator('[data-testid=\"features-grid\"]').scrollIntoViewIfNeeded()\n  await page.locator('[data-testid=\"pricing-info\"]').scrollIntoViewIfNeeded()\n\n  // 4. Clicks CTA button\n  await page.click('button:has-text(\"Jetzt Erstgespräch vereinbaren\")')\n\n  // 5. Fills contact form\n  await page.fill('[name=\"name\"]', 'Max Mustermann')\n  await page.fill('[name=\"email\"]', 'max@restaurant-beispiel.de')\n  await page.fill('[name=\"message\"]', 'Ich brauche eine Website für mein Restaurant')\n\n  // 6. Submits form\n  await page.click('button[type=\"submit\"]')\n\n  // 7. Sees success message\n  await expect(page.locator('[data-testid=\"success-toast\"]')).toBeVisible()\n})\n```\n\n2. **SEO Researcher Journey**:\n```typescript\n// tests/e2e/blog-reader-journey.spec.ts\ntest('User finds blog post via Google, reads, and explores services', async ({ page }) => {\n  // 1. User lands on blog post from Google\n  await page.goto('/blog/website-kosten-2025')\n\n  // 2. Reads intro and uses TOC\n  await page.click('a[href=\"#preisübersicht-nach-website-typ\"]')\n\n  // 3. Clicks embedded calculator link\n  await page.click('a:has-text(\"Interaktiver Preis-Rechner\")')\n  await expect(page).toHaveURL('/preise')\n\n  // 4. Uses calculator\n  await page.selectOption('[name=\"projectType\"]', 'website')\n  await page.selectOption('[name=\"complexity\"]', 'medium')\n\n  // 5. Sees estimate, clicks CTA\n  await page.click('button:has-text(\"Individuelles Angebot erhalten\")')\n\n  // 6. Redirected to contact\n  await expect(page).toHaveURL(/\\/contact/)\n})\n```\n\n3. **Technology Evaluation Journey**:\n```typescript\n// tests/e2e/technology-page.spec.ts\ntest('Developer evaluates Next.js expertise and checks portfolio', async ({ page }) => {\n  // 1. Lands on Next.js page\n  await page.goto('/technologie/next-js-agentur')\n\n  // 2. Reads benefits\n  await page.locator('h2:has-text(\"Vorteile von Next.js\")').scrollIntoViewIfNeeded()\n\n  // 3. Checks comparison table\n  await page.locator('[data-testid=\"tech-comparison\"]').scrollIntoViewIfNeeded()\n\n  // 4. Clicks related portfolio project\n  await page.click('[data-testid=\"related-project\"]:first-child')\n\n  // 5. Views portfolio case study\n  await expect(page).toHaveURL(/\\/portfolio\\//)\n})\n```\n\n---\n\n### Performance Testing (Lighthouse CI)\n\n**Approach**: Automated Lighthouse audits on each deployment\n\n**Implementation**:\n```yaml\n# .github/workflows/lighthouse-ci.yml (NEW FILE)\nname: Lighthouse CI\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: '22'\n\n      - name: Install pnpm\n        run: npm install -g pnpm\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Build\n        run: pnpm build\n\n      - name: Start server\n        run: pnpm start &\n\n      - name: Wait for server\n        run: npx wait-on http://localhost:3000\n\n      - name: Run Lighthouse CI\n        run: |\n          npm install -g @lhci/cli\n          lhci autorun\n        env:\n          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}\n```\n\n**Lighthouse CI Config**:\n```javascript\n// lighthouserc.js (NEW FILE)\nmodule.exports = {\n  ci: {\n    collect: {\n      numberOfRuns: 3,\n      url: [\n        'http://localhost:3000/',\n        'http://localhost:3000/branchen/gastronomie',\n        'http://localhost:3000/preise',\n        'http://localhost:3000/blog/website-kosten-2025'\n      ]\n    },\n    assert: {\n      assertions: {\n        'categories:performance': ['error', { minScore: 0.95 }],\n        'categories:accessibility': ['error', { minScore: 0.95 }],\n        'categories:best-practices': ['error', { minScore: 0.95 }],\n        'categories:seo': ['error', { minScore: 0.95 }]\n      }\n    },\n    upload: {\n      target: 'temporary-public-storage'\n    }\n  }\n}\n```\n\n**Pass Criteria**:\n- Performance: ≥ 95\n- Accessibility: ≥ 95\n- Best Practices: ≥ 95\n- SEO: ≥ 95\n\n---\n\n## Implementation Phases\n\n### Phase 1: Quick Wins (Week 1-2) - Foundation\n\n**Files to Modify**:\n- `app/layout.tsx` - Root title update\n- `app/page.tsx` - Homepage metadata update\n- `content/services/web-development.mdx` - Service metadata updates\n- `content/services/mobile-development.mdx`\n- `content/services/ui-ux-design.mdx`\n- `content/services/backend-solutions.mdx`\n\n**No New Components Required** - Pure metadata changes\n\n---\n\n### Phase 2: Industry Pages (Week 3-6) - Core Content\n\n**New Files**:\n```\napp/branchen/\n├── page.tsx                                    # Overview\n├── [branche]/\n│   ├── page.tsx                               # Dynamic route\n│   └── metadata.ts                            # Metadata helper\ncomponents/sections/\n└── BrancheContent.tsx                          # Industry layout\ncontent/branchen/\n├── gastronomie.mdx\n├── handwerk.mdx\n├── einzelhandel.mdx\n├── beratung.mdx\n├── immobilien.mdx\n└── fitness.mdx\nlib/content/\n└── content-api.ts                              # Add getBranchePage()\nlib/types/\n└── content.ts                                  # Add BranchePageData interface\n```\n\n**Updated Files**:\n- `components/sections/IndustryNavigator.tsx` - Add links\n- `components/layout/Header.tsx` - Add \"Branchen\" menu item\n- `app/sitemap.ts` - Add industry routes\n\n---\n\n### Phase 3: Pricing & Blog (Month 2-3) - Conversion Focus\n\n**New Files**:\n```\napp/preise/\n└── page.tsx                                    # Pricing page\ncomponents/sections/\n├── PricingCalculator.tsx                      # Interactive calculator\n├── PricingTable.tsx                           # Static packages\n├── PricingComparison.tsx                      # Agency vs Baukasten\n└── PricingFAQ.tsx                             # Pricing FAQs\nlib/\n├── pricing-data.ts                            # Pricing packages data\n└── pricing-utils.ts                           # calculatePrice()\ncontent/blog/\n├── website-kosten-2025.mdx\n├── website-erstellen-lassen.mdx\n├── dsgvo-konforme-website.mdx\n├── website-ladezeit-optimieren.mdx\n└── website-relaunch.mdx\ncomponents/sections/\n└── BlogPostContent.tsx                        # Blog layout\n```\n\n**Updated Files**:\n- `components/layout/Header.tsx` - Add \"Preise\" link\n- `app/sitemap.ts` - Add /preise and blog routes\n\n---\n\n### Phase 4: Content Expansion (Month 4-6) - Authority Building\n\n**New Files**:\n```\ncontent/blog/\n├── responsive-webdesign-guide.mdx\n├── progressive-web-apps.mdx\n├── nextjs-vs-wordpress.mdx\n├── headless-cms-vorteile.mdx\n├── website-typen-vergleich.mdx\n├── mobile-first-design.mdx\n├── website-performance-optimieren.mdx\n├── ssl-zertifikat-wichtigkeit.mdx\n├── website-wartung.mdx\n├── cms-vergleich.mdx\n├── restaurant-website-best-practices.mdx\n├── ecommerce-lokaler-einzelhandel.mdx\n├── handwerker-website-features.mdx\n├── website-coaches-berater.mdx\n├── immobilien-website-tipps.mdx\n├── fitness-website-kursbuchung.mdx\n├── lokale-seo-guide.mdx\n├── google-business-profile.mdx\n├── website-texte-schreiben.mdx\n├── backlinks-aufbauen.mdx\n└── google-analytics-guide.mdx\napp/regionen/\n├── heilbronn/page.tsx\n├── mosbach/page.tsx\n├── crailsheim/page.tsx\n└── aschaffenburg/page.tsx\ncontent/regionen/\n├── heilbronn.mdx\n├── mosbach.mdx\n├── crailsheim.mdx\n└── aschaffenburg.mdx\n```\n\n---\n\n### Phase 5: Technology Pages (Month 7-12) - Niche Expertise\n\n**New Files**:\n```\napp/technologie/\n├── page.tsx                                    # Tech overview\n└── [tech]/\n    ├── page.tsx                               # Dynamic tech page\n    └── metadata.ts\ncomponents/sections/\n└── TechnologyPageContent.tsx                  # Tech layout\ncontent/technologie/\n├── next-js-agentur.mdx\n├── react-entwicklung.mdx\n├── typescript-entwicklung.mdx\n├── supabase-backend.mdx\n├── headless-cms.mdx\n└── tailwind-css.mdx\n```\n\n---\n\n## Success Metrics & Monitoring\n\n### KPIs to Track\n\n**Google Search Console** (Weekly):\n- Impressions (target: +20% month-over-month)\n- Clicks (target: +25% month-over-month)\n- Average CTR (target: >3%)\n- Average Position (target: <20 for main keywords)\n\n**Google Analytics** (Weekly):\n- Organic Sessions (target: +200% in 12 months)\n- Pages/Session (target: >2.5)\n- Avg. Session Duration (target: >2 minutes)\n- Bounce Rate (target: <50%)\n- Goal Completions (contact form submissions, target: +150%)\n\n**Lighthouse CI** (Every Deploy):\n- Performance Score: ≥95\n- Accessibility Score: ≥95\n- SEO Score: ≥95\n\n**Keyword Rankings** (Monthly via Google Search Console):\n- Top-3 rankings count (target: 15-20 keywords)\n- Top-10 rankings count (target: 50+ keywords)\n- Top-100 rankings count (target: 200+ keywords)\n\n### Monitoring Dashboard\n\n**Tool**: Google Search Console + Google Analytics 4\n\n**Custom Dashboard Widgets**:\n1. **Organic Traffic Trend** (last 90 days)\n2. **Top-10 Landing Pages** (by sessions)\n3. **Keyword Rankings** (top 20 keywords tracked)\n4. **Core Web Vitals** (LCP, FID, CLS)\n5. **Conversion Funnel** (Landing → Service Page → Contact)\n\n---\n\n## Deployment Strategy\n\n### Build Verification\n\n**Pre-Deployment Checks**:\n```bash\n# Type checking\npnpm typecheck\n\n# Linting\npnpm lint\n\n# Production build\npnpm build\n\n# Size analysis\nnpx @next/bundle-analyzer\n```\n\n**Automated via GitHub Actions** (existing CI/CD):\n```yaml\n# .github/workflows/deploy.yml (existing, ensure these steps)\n- name: Type Check\n  run: pnpm typecheck\n\n- name: Lint\n  run: pnpm lint\n\n- name: Build\n  run: pnpm build\n\n- name: Lighthouse CI\n  run: lhci autorun\n```\n\n### Gradual Rollout\n\n**Phase 1 Rollout**:\n1. Deploy metadata changes\n2. Monitor Google Search Console for 2-4 days\n3. Verify impressions increase\n\n**Phase 2 Rollout**:\n1. Deploy 1 industry page first (Gastronomie)\n2. Test in production for 3-7 days\n3. Monitor analytics and fix issues\n4. Deploy remaining 5 industry pages\n\n**Phase 3 Rollout**:\n1. Deploy pricing page first\n2. Test calculator functionality\n3. Deploy blog posts (1-2 per week for SEO freshness)\n\n**Rollback Plan**:\n- Git revert commit if traffic drops >20%\n- Redeploy previous version via GitHub Actions\n- All routes have no database dependencies (stateless), easy rollback\n\n---\n\n## Risk Mitigation\n\n### Risk 1: Performance Degradation\n\n**Mitigation**:\n- Lighthouse CI blocks merge if score <95\n- Bundle size analysis on each PR\n- Image optimization enforced (Next.js Image component)\n- Code splitting per route (Next.js automatic)\n\n### Risk 2: SEO Ranking Drop\n\n**Mitigation**:\n- Keep all existing URLs unchanged\n- Add 301 redirects if any URL changes\n- Maintain keyword density <2% (no over-optimization)\n- Monitor Google Search Console daily in first 2 weeks\n\n### Risk 3: Content Quality Issues\n\n**Mitigation**:\n- Zod validation for all frontmatter\n- TypeScript strict mode catches type errors\n- Build fails if MDX content invalid\n- Editor guidelines document (separate from this spec)\n\n### Risk 4: Mobile Usability Problems\n\n**Mitigation**:\n- Tailwind responsive utilities on all components\n- Mobile-first design approach\n- Test on real devices (iOS 12+, Android 8+)\n- Google Mobile-Friendly Test automated\n\n---\n\n**Document Version**: 1.0\n**Created**: 2025-10-27\n**Status**: Ready for Review\n**Next Phase**: Tasks Document (after approval)\n",
  "fileStats": {
    "size": 45032,
    "lines": 1730,
    "lastModified": "2025-10-27T09:31:03.167Z"
  },
  "comments": []
}