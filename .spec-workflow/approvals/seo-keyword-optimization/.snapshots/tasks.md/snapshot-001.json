{
  "id": "snapshot_1761576229933_wi0pr2ly5",
  "approvalId": "approval_1761576229929_w8urvftl6",
  "approvalTitle": "SEO & Keyword Optimization - Tasks Document (77 Tasks)",
  "version": 1,
  "timestamp": "2025-10-27T14:43:49.933Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Tasks Document: SEO & Keyword Optimization\n\n## Phase 1: Quick Wins - Metadata Optimization (Week 1-2)\n\n### Foundation Tasks\n\n- [ ] 1.1 Update root layout metadata for main keywords\n  - **File**: `app/layout.tsx` (line 31)\n  - **Change**: Update title from `'Webentwicklung & Mobile Apps 4x schneller | KI-gestützte Digitalagentur'` to `'Webdesign & Marketing Agentur | KI-gestützt 4x schneller | Baden-Württemberg'`\n  - **Purpose**: Optimize root title for \"Webdesign Agentur\" and \"Marketing Agentur\" keywords\n  - **_Leverage**: Existing Next.js Metadata API, app/layout.tsx structure\n  - **_Requirements**: 1.1, 1.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Specialist with Next.js Metadata API expertise | Task: Update the root layout title in app/layout.tsx:31 to prioritize \"Webdesign Agentur\" and \"Marketing Agentur\" keywords while maintaining readability and staying under 60 characters, following requirements 1.1 and 1.2 | Restrictions: Do not exceed 60 characters for title, maintain existing metadata structure, do not modify other metadata fields in this task, ensure title is compelling for search results | _Leverage: app/layout.tsx existing metadata pattern | _Requirements: 1.1, 1.2 | Success: Title contains both \"Webdesign Agentur\" and \"Marketing Agentur\", stays under 60 chars, Next.js build succeeds, metadata validates in browser dev tools | Instructions: First mark this task as in-progress in tasks.md (change [ ] to [-]), implement the change, test locally, then mark as completed (change [-] to [x])\n\n- [ ] 1.2 Update homepage metadata for local keywords\n  - **File**: `app/page.tsx` (lines 10-60)\n  - **Changes**:\n    - Update title to `'Webdesign & Marketing Agentur Lauda-Königshofen | KI-gestützt'`\n    - Update description to include \"Website erstellen lassen\", \"Festpreise ab 2.500€\", \"Main-Tauber-Kreis\"\n    - Add keywords: \"Webdesign Agentur Baden-Württemberg\", \"Marketing Agentur Main-Tauber-Kreis\", \"Webdesign Festpreis\"\n  - **Purpose**: Optimize homepage for local + main keywords\n  - **_Leverage**: Existing metadata structure in app/page.tsx\n  - **_Requirements**: 1.3, 1.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Content Specialist with expertise in local SEO and Next.js | Task: Update homepage metadata in app/page.tsx:10-60 to include high-value local keywords (\"Website erstellen lassen\", \"Festpreise ab 2.500€\") and geographic targeting (Main-Tauber-Kreis, Baden-Württemberg), following requirements 1.3 and 1.4 | Restrictions: Title max 60 chars, description 150-160 chars, do not remove existing openGraph structure, maintain keyword density <2%, keep all existing metadata fields | _Leverage: app/page.tsx existing metadata pattern, openGraph structure | _Requirements: 1.3, 1.4 | Success: Title and description contain target keywords naturally, metadata validates, character limits respected, openGraph still functional | Instructions: Mark task in-progress in tasks.md, update metadata, verify in browser and Google Rich Results Test, mark completed\n\n- [ ] 1.3 Optimize web-development service page metadata\n  - **File**: `content/services/web-development.mdx` (lines 1-5)\n  - **Changes**:\n    - Update title to `'Webentwicklung Agentur | Professionelle Website erstellen lassen'`\n    - Update description to include USPs (KI-gestützt, Festpreis, 2-4 Wochen)\n  - **Purpose**: Target \"Webentwicklung Agentur\" + conversion keywords\n  - **_Leverage**: Existing MDX frontmatter pattern from content/services/\n  - **_Requirements**: 1.5, 1.6\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Technical SEO Specialist with MDX and Next.js knowledge | Task: Optimize web-development service page metadata in content/services/web-development.mdx:1-5, updating title to include \"Webentwicklung Agentur\" and description to emphasize USPs (KI-gestützt, Festpreis, delivery time), following requirements 1.5 and 1.6 | Restrictions: Maintain MDX frontmatter YAML format, title max 60 chars, description 150-160 chars, do not modify content below frontmatter in this task | _Leverage: content/services/web-development.mdx existing frontmatter structure | _Requirements: 1.5, 1.6 | Success: Frontmatter validates, title includes target keyword, description has compelling CTA with USPs, MDX compiles without errors | Instructions: Mark in-progress, update frontmatter, test page rendering at /services/web-development, mark completed\n\n- [ ] 1.4 Optimize mobile-development service page metadata\n  - **File**: `content/services/mobile-development.mdx` (lines 1-5)\n  - **Changes**:\n    - Update title to `'App Entwicklung Agentur | iOS & Android App erstellen lassen'`\n    - Update description to emphasize cross-platform and USPs\n  - **Purpose**: Target \"App Entwicklung\" keywords\n  - **_Leverage**: content/services/mobile-development.mdx existing pattern\n  - **_Requirements**: 1.5\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Mobile SEO Specialist with app development knowledge | Task: Optimize mobile-development service metadata following requirement 1.5, updating title for \"App Entwicklung Agentur\" keyword and description with cross-platform benefits (iOS/Android) | Restrictions: Title max 60 chars, description 150-160 chars, maintain MDX YAML format, keep existing pricing and deliverables fields | _Leverage: content/services/mobile-development.mdx frontmatter | _Requirements: 1.5 | Success: Keywords \"App Entwicklung Agentur\" in title, description mentions iOS and Android, frontmatter compiles | Instructions: Mark in-progress, update, test /services/mobile-development, mark completed\n\n- [ ] 1.5 Optimize ui-ux-design service page metadata\n  - **File**: `content/services/ui-ux-design.mdx` (lines 1-5)\n  - **Changes**:\n    - Update title to `'UI/UX Design Agentur | Professionelles Interface & User Experience Design'`\n    - Update description to highlight design process and tools\n  - **Purpose**: Target \"UI/UX Design Agentur\" keywords\n  - **_Leverage**: content/services/ui-ux-design.mdx existing structure\n  - **_Requirements**: 1.5\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Design-focused SEO Specialist | Task: Optimize UI/UX design service metadata per requirement 1.5, crafting title with \"UI/UX Design Agentur\" and description showcasing design expertise and process | Restrictions: Title 50-60 chars, description 150-160 chars with design terminology, maintain frontmatter structure | _Leverage: content/services/ui-ux-design.mdx | _Requirements: 1.5 | Success: Title contains target keyword, description appeals to design-conscious clients, compiles correctly | Instructions: Mark in-progress, optimize metadata, verify page, mark completed\n\n- [ ] 1.6 Optimize backend-solutions service page metadata\n  - **File**: `content/services/backend-solutions.mdx` (lines 1-5)\n  - **Changes**:\n    - Update title to `'Backend Entwicklung | API, Datenbank & Server-Lösungen'`\n    - Update description to mention scalability and tech stack\n  - **Purpose**: Target technical decision-makers searching for backend services\n  - **_Leverage**: content/services/backend-solutions.mdx\n  - **_Requirements**: 1.5\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Backend SEO Specialist with technical writing skills | Task: Optimize backend-solutions metadata following requirement 1.5, creating technical but accessible title and description mentioning APIs, databases, and scalability | Restrictions: Title max 60 chars, description technical but readable, maintain MDX format | _Leverage: content/services/backend-solutions.mdx | _Requirements: 1.5 | Success: Keywords present, technical accuracy maintained, compiles | Instructions: Mark in-progress, update, test, mark completed\n\n---\n\n## Phase 2: Industry Landing Pages (Week 3-6)\n\n### Infrastructure Setup\n\n- [ ] 2.1 Create branchen route structure\n  - **Files**:\n    - `app/branchen/page.tsx` (new)\n    - `app/branchen/[branche]/page.tsx` (new)\n    - `app/branchen/[branche]/metadata.ts` (new)\n  - **Purpose**: Set up dynamic routing for 6 industry pages\n  - **_Leverage**: app/regionen/[city]/page.tsx pattern, existing dynamic route handling\n  - **_Requirements**: 2.1, 2.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Next.js Developer with dynamic routing expertise | Task: Create branchen route structure with dynamic [branche] parameter following requirements 2.1-2.2, mirroring the pattern from app/regionen/[city]/page.tsx for consistency | Restrictions: Use Next.js 15 App Router conventions, implement generateStaticParams() for 6 industries (gastronomie, handwerk, einzelhandel, beratung, immobilien, fitness), create Server Components by default, do not add client-side logic yet | _Leverage: app/regionen/[city]/page.tsx for routing pattern, lib/content/content-api.ts for data loading pattern | _Requirements: 2.1, 2.2 | Success: Routes accessible at /branchen and /branchen/[id], generateStaticParams returns 6 industry slugs, pages render (even with placeholder content), build succeeds | Instructions: Mark in-progress, create files with basic structure, test routing, mark completed\n\n- [ ] 2.2 Create BrancheContent component\n  - **File**: `components/sections/BrancheContent.tsx` (new)\n  - **Purpose**: Reusable Server Component for rendering industry page sections\n  - **Dependencies**: Button, Accordion (shadcn/ui), Breadcrumbs, lucide-react icons\n  - **_Leverage**: components/sections/CityPageContent.tsx pattern, components/ui/button, components/ui/accordion\n  - **_Requirements**: 2.2, 2.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: React Developer with component architecture expertise | Task: Create BrancheContent.tsx Server Component following requirements 2.2-2.3, implementing hero section, features grid, pricing display, and FAQ accordion, mirroring CityPageContent.tsx structure | Restrictions: Server Component (no 'use client'), accept BranchePageData prop with frontmatter and content, use existing UI components (Button, Accordion), maintain HEADON design system, create TypeScript interface for props | _Leverage: components/sections/CityPageContent.tsx for structure, components/ui/button, components/ui/accordion, components/seo/Breadcrumbs.tsx | _Requirements: 2.2, 2.3 | Success: Component renders all sections (hero, features, pricing, FAQ), TypeScript types correct, uses design system, accessible | Instructions: Mark in-progress, create component with all sections, test with mock data, mark completed\n\n- [ ] 2.3 Extend content-api with getBranchePage\n  - **File**: `lib/content/content-api.ts` (modify existing)\n  - **Purpose**: Add function to load industry MDX files with frontmatter validation\n  - **_Leverage**: Existing getCityPage() pattern, Zod for validation\n  - **_Requirements**: 2.1, 2.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Node.js Developer with file system and MDX expertise | Task: Extend content-api.ts with getBranchePage() function following requirements 2.1-2.2, loading MDX from content/branchen/, parsing frontmatter with Zod validation, similar to getCityPage() | Restrictions: Use existing MDX loading utilities, validate frontmatter with Zod schema (define in lib/validations.ts), return null if file not found (triggers 404), handle errors gracefully | _Leverage: lib/content/content-api.ts getCityPage() function, lib/validations.ts for schema | _Requirements: 2.1, 2.2 | Success: Function loads MDX correctly, frontmatter validates, returns structured data, handles missing files, TypeScript types exported | Instructions: Mark in-progress, add function + Zod schema, test with sample MDX, mark completed\n\n- [ ] 2.4 Create Zod schema for branche frontmatter\n  - **File**: `lib/validations.ts` (modify existing)\n  - **Purpose**: Validate industry page frontmatter structure\n  - **_Leverage**: Existing Zod schemas in lib/validations.ts\n  - **_Requirements**: 2.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: TypeScript Developer with Zod validation expertise | Task: Create brancheFrontmatterSchema in lib/validations.ts following requirement 2.2, defining schema for name, icon, heroTitle, heroSubtitle, pricing (from/to/currency), features array, faqs array, caseStudies optional array | Restrictions: Use Zod syntax, ensure required fields are required, validate array min/max lengths (features: 3-8, faqs: min 3), export schema for reuse | _Leverage: lib/validations.ts existing schemas | _Requirements: 2.2 | Success: Schema validates correct frontmatter, rejects invalid data, TypeScript types inferred correctly | Instructions: Mark in-progress, define schema, test with valid/invalid data, mark completed\n\n### Content Creation - Industry Pages\n\n- [ ] 2.5 Create Gastronomie landing page content\n  - **File**: `content/branchen/gastronomie.mdx` (new)\n  - **Purpose**: Complete gastronomy-specific landing page with SEO-optimized content\n  - **Structure**: Frontmatter (metadata) + Markdown content (2000-2500 words)\n  - **Keywords**: \"Restaurant Website\", \"Online Speisekarte\", \"Gastronomie Webdesign\"\n  - **_Leverage**: Design doc template for Gastronomie (design.md lines 432-551), SEO-KEYWORD-OPTIMIERUNG.md Gastronomie section\n  - **_Requirements**: 2.4, 2.5\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Content Writer with gastronomy industry and SEO knowledge | Task: Create gastronomie.mdx following requirements 2.4-2.5, writing comprehensive content (2000-2500 words) targeting \"Restaurant Website\" and \"Online Speisekarte\" keywords, using template from design.md | Restrictions: Follow frontmatter schema from lib/validations.ts, keyword density 1-2%, natural writing style, include 4-6 features (Online-Speisekarte, Reservierungssystem, Online-Bestellung, Mobile-First), 5+ FAQs, pricing 2.500-4.500 EUR range | _Leverage: Design doc template (design.md:432-551), docs/SEO-KEYWORD-OPTIMIERUNG.md Gastronomie section | _Requirements: 2.4, 2.5 | Success: MDX compiles, frontmatter validates, content is 2000+ words, keywords naturally integrated, H2/H3 structure logical, FAQs answer common questions | Instructions: Mark in-progress, write content following template, validate frontmatter, test page rendering, mark completed\n\n- [ ] 2.6 Create Handwerk landing page content\n  - **File**: `content/branchen/handwerk.mdx` (new)\n  - **Purpose**: Handwerk-specific landing page\n  - **Keywords**: \"Handwerker Website\", \"Online Terminbuchung\", \"Handwerk Webdesign\"\n  - **_Leverage**: gastronomie.mdx structure, design doc Handwerk section\n  - **_Requirements**: 2.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Content Writer with tradesperson industry knowledge | Task: Create handwerk.mdx following requirement 2.4, adapting gastronomie.mdx structure for tradesperson services, targeting \"Handwerker Website\" keywords | Restrictions: 2000-2500 words, features: Online-Terminbuchung, Referenz-Galerie, Anfrage-Formular, Kundenverwaltung; pricing 3.000-5.000 EUR; 5+ FAQs specific to tradesperson needs | _Leverage: content/branchen/gastronomie.mdx structure, design doc | _Requirements: 2.4 | Success: Frontmatter validates, content industry-specific, keywords present, renders correctly | Instructions: Mark in-progress, write, validate, test, mark completed\n\n- [ ] 2.7 Create Einzelhandel landing page content\n  - **File**: `content/branchen/einzelhandel.mdx` (new)\n  - **Purpose**: E-commerce focused landing page\n  - **Keywords**: \"E-Commerce Website\", \"Online Shop Entwicklung\", \"Webshop\"\n  - **_Leverage**: gastronomie.mdx structure\n  - **_Requirements**: 2.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: E-Commerce Content Specialist | Task: Create einzelhandel.mdx per requirement 2.4, focusing on e-commerce features for retail businesses, targeting \"E-Commerce Website\" and \"Online Shop\" keywords | Restrictions: 2000-2500 words, features: E-Commerce Platform, Warenwirtschaft, Click & Collect, Payment Integration; pricing 5.000-12.000 EUR; e-commerce-specific FAQs | _Leverage: gastronomie.mdx structure | _Requirements: 2.4 | Success: E-commerce terminology correct, features relevant, pricing realistic, validates | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 2.8 Create Beratung landing page content\n  - **File**: `content/branchen/beratung.mdx` (new)\n  - **Purpose**: Consulting and coaching focused page\n  - **Keywords**: \"Website für Berater\", \"Coaching Website\", \"Consulting Webdesign\"\n  - **_Leverage**: gastronomie.mdx structure\n  - **_Requirements**: 2.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: B2B Content Writer with consulting industry knowledge | Task: Create beratung.mdx following requirement 2.4, targeting consultants and coaches with \"Website für Berater\" keywords | Restrictions: 2000-2500 words, features: Terminbuchung, Klienten-Portal, Online-Kurse, Lead-Magnets; pricing 4.000-8.000 EUR; professional tone for B2B | _Leverage: gastronomie.mdx | _Requirements: 2.4 | Success: Professional tone, consulting-specific features, validates correctly | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 2.9 Create Immobilien landing page content\n  - **File**: `content/branchen/immobilien.mdx` (new)\n  - **Purpose**: Real estate agency focused page\n  - **Keywords**: \"Immobilien Website\", \"Website für Makler\", \"Immobilienportal\"\n  - **_Leverage**: gastronomie.mdx structure\n  - **_Requirements**: 2.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Real Estate Content Specialist | Task: Create immobilien.mdx per requirement 2.4, targeting real estate agents with \"Immobilien Website\" and \"Website für Makler\" keywords | Restrictions: 2000-2500 words, features: Immobilien-Verwaltung, 360° Rundgänge, Exposé-Generator, Suchfilter; pricing 6.000-15.000 EUR; real-estate specific FAQs | _Leverage: gastronomie.mdx | _Requirements: 2.4 | Success: Real estate features accurate, high-end pricing justified, validates | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 2.10 Create Fitness landing page content\n  - **File**: `content/branchen/fitness.mdx` (new)\n  - **Purpose**: Fitness studio and wellness focused page\n  - **Keywords**: \"Fitness Studio Website\", \"Website für Fitnesstrainer\", \"Kursplan Integration\"\n  - **_Leverage**: gastronomie.mdx structure\n  - **_Requirements**: 2.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Fitness Industry Content Writer | Task: Create fitness.mdx following requirement 2.4, targeting fitness studios with \"Fitness Studio Website\" keywords and course booking features | Restrictions: 2000-2500 words, features: Kursplan, Mitglieder-Anmeldung, Trainer-Profile, Online-Buchung; pricing 4.000-8.000 EUR; health/fitness terminology | _Leverage: gastronomie.mdx | _Requirements: 2.4 | Success: Fitness-specific features, validates, engaging content | Instructions: Mark in-progress, write, validate, mark completed\n\n### Integration\n\n- [ ] 2.11 Update IndustryNavigator with links\n  - **File**: `components/sections/IndustryNavigator.tsx` (modify existing)\n  - **Purpose**: Make industry cards clickable, linking to dedicated pages\n  - **_Leverage**: Existing IndustryNavigator component, Next.js Link\n  - **_Requirements**: 2.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: React Developer with Next.js routing expertise | Task: Update IndustryNavigator.tsx per requirement 2.2, wrapping each industry card in Next.js Link component pointing to `/branchen/${industry.id}` | Restrictions: Maintain existing card styling and animations, ensure cards remain accessible with keyboard navigation, add hover state (scale-105), use Link from 'next/link', do not break existing functionality | _Leverage: components/sections/IndustryNavigator.tsx existing structure, Next.js Link | _Requirements: 2.2 | Success: Cards are clickable, navigate to correct routes, hover animation works, accessibility maintained, Framer Motion animations still work | Instructions: Mark in-progress, wrap cards in Link, test navigation and animations, mark completed\n\n- [ ] 2.12 Add \"Branchen\" to main navigation\n  - **File**: `components/layout/Header.tsx` (modify existing)\n  - **Purpose**: Add \"Branchen\" menu item with dropdown showing 6 industries\n  - **_Leverage**: Existing Header navigation structure, dropdown patterns (if any)\n  - **_Requirements**: 2.6\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Frontend Developer with navigation UX expertise | Task: Add \"Branchen\" navigation item to Header.tsx following requirement 2.6, implementing dropdown menu showing 6 industries (Gastronomie, Handwerk, Einzelhandel, Beratung, Immobilien, Fitness) | Restrictions: Maintain existing Header styling and mobile responsiveness, dropdown should close on selection, use existing dropdown pattern or create simple hover/click dropdown, accessible with keyboard, mobile-friendly navigation | _Leverage: components/layout/Header.tsx existing nav structure | _Requirements: 2.6 | Success: \"Branchen\" appears in navigation, dropdown shows 6 industries with correct links, works on desktop and mobile, accessible | Instructions: Mark in-progress, add nav item with dropdown, test responsive behavior, mark completed\n\n- [ ] 2.13 Update sitemap with branchen routes\n  - **File**: `app/sitemap.ts` (modify existing)\n  - **Purpose**: Add /branchen and 6 industry pages to XML sitemap\n  - **_Leverage**: Existing sitemap generation logic\n  - **_Requirements**: 2.7\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Technical Specialist with Next.js sitemap expertise | Task: Update sitemap.ts per requirement 2.7, adding /branchen overview page and 6 industry pages (/branchen/gastronomie, etc.) with appropriate priority and changefreq | Restrictions: Maintain existing sitemap structure, set priority: 0.8 for industry pages, changefreq: 'weekly', include lastModified timestamp, ensure sitemap validates (XML format) | _Leverage: app/sitemap.ts existing generation logic | _Requirements: 2.7 | Success: Sitemap includes all branchen URLs, validates at /sitemap.xml, proper priorities set, search engines can discover pages | Instructions: Mark in-progress, add routes to sitemap, test at /sitemap.xml, mark completed\n\n- [ ] 2.14 Create OG images for industry pages\n  - **Files**: Create 6 OG images in `public/og-images/`\n    - `branchen-gastronomie.jpg`\n    - `branchen-handwerk.jpg`\n    - `branchen-einzelhandel.jpg`\n    - `branchen-beratung.jpg`\n    - `branchen-immobilien.jpg`\n    - `branchen-fitness.jpg`\n  - **Purpose**: Social sharing images for industry pages\n  - **_Leverage**: Existing OG images pattern from public/og-images/\n  - **_Requirements**: 2.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Graphic Designer with web optimization knowledge | Task: Create 6 Open Graph images (1200x630px) for industry pages following requirement 2.3, using HEADON branding and industry-specific imagery or icons | Restrictions: Dimensions exactly 1200x630px, file size <500KB per image, JPEG or PNG format, include HEADON logo, industry icon/imagery, page title text, maintain brand colors, ensure text is readable when scaled down | _Leverage: public/og-images/ existing images for brand style reference | _Requirements: 2.3 | Success: 6 images created with correct dimensions, file sizes optimized, visually consistent with brand, text readable, images referenced in metadata work correctly | Instructions: Mark in-progress, design images, optimize and save to public/og-images/, verify in metadata previews (Twitter Card Validator, LinkedIn Inspector), mark completed\n\n---\n\n## Phase 3: Pricing Page & Blog Foundation (Month 2)\n\n### Pricing Page\n\n- [ ] 3.1 Create pricing page structure\n  - **File**: `app/preise/page.tsx` (new)\n  - **Purpose**: Pricing transparency page with calculator, packages, comparison\n  - **_Leverage**: app/page.tsx metadata pattern\n  - **_Requirements**: 3.1, 3.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Next.js Developer with page structure expertise | Task: Create app/preise/page.tsx following requirements 3.1-3.2, setting up page structure with metadata targeting \"Webdesign Preise\" and \"Website Kosten\" keywords, composing sections (Hero, Calculator, Table, Comparison, FAQ, CTA) | Restrictions: Server Component by default, metadata title max 60 chars with keywords, description 150-160 chars with USPs (\"Festpreise ab 2.500€\"), include openGraph and Twitter Card tags, canonical URL | _Leverage: app/page.tsx for metadata pattern and section composition | _Requirements: 3.1, 3.2 | Success: Page renders with all sections, metadata optimized for target keywords, SEO tags complete, page accessible at /preise | Instructions: Mark in-progress, create page with metadata and section placeholders, mark completed\n\n- [ ] 3.2 Create PricingCalculator component\n  - **File**: `components/sections/PricingCalculator.tsx` (new)\n  - **Purpose**: Interactive Client Component for price estimation\n  - **Dependencies**: React Hook Form, Zod, Select, Button (shadcn/ui), Framer Motion\n  - **_Leverage**: Existing form patterns from contact form, React Hook Form + Zod usage\n  - **_Requirements**: 3.2, 3.3, 3.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: React Developer with form handling and state management expertise | Task: Create PricingCalculator.tsx Client Component following requirements 3.2-3.4, implementing interactive calculator with React Hook Form for inputs (projectType, complexity, features checkboxes), Zod validation, and real-time price calculation using calculatePrice() utility | Restrictions: Must use 'use client' directive, form should update price in real-time (useEffect watching form values), validate with Zod schema (define in lib/validations.ts), display price with animation (Framer Motion), handle edge cases (no selection = base price), accessible form labels and ARIA | _Leverage: Existing contact form pattern for React Hook Form usage, @/components/ui/select, @/components/ui/button, @/lib/validations.ts | _Requirements: 3.2, 3.3, 3.4 | Success: Calculator updates price live, form validates, accessible, animations smooth, TypeScript types correct | Instructions: Mark in-progress, create component with form and calculation logic, test with various inputs, mark completed\n\n- [ ] 3.3 Create pricing calculation utility\n  - **File**: `lib/pricing-utils.ts` (new)\n  - **Purpose**: Pure function for price calculation logic\n  - **_Leverage**: lib/utils.ts pattern for utility functions\n  - **_Requirements**: 3.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: JavaScript Developer with algorithm design skills | Task: Create pricing-utils.ts with calculatePrice() function following requirement 3.3, implementing calculation logic for base prices (website: 5000, webapp: 15000, app: 20000, ecommerce: 12000), complexity multipliers (simple: 1.0, medium: 1.5, complex: 2.5), and feature costs (SEO: 1500, CMS: 2000, Analytics: 500, Branding: 3000, etc.) | Restrictions: Pure function (no side effects), TypeScript with proper types, return PriceEstimate interface with basePrice, featuresCost, complexityMultiplier, total, timeframe, include estimateTimeframe() helper function, handle invalid inputs gracefully | _Leverage: lib/utils.ts for utility function patterns | _Requirements: 3.3 | Success: Function calculates correctly for all input combinations, TypeScript types exported, tested with various inputs, returns sensible estimates | Instructions: Mark in-progress, implement calculation with pricing table, test edge cases, mark completed\n\n- [ ] 3.4 Create pricing data constants\n  - **File**: `lib/pricing-data.ts` (new)\n  - **Purpose**: Static pricing packages for PricingTable component\n  - **_Leverage**: Static data pattern from existing codebase\n  - **_Requirements**: 3.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Product Manager with pricing strategy knowledge | Task: Create pricing-data.ts defining 3 pricing packages (Basis: 2500 EUR, Professional: 5000 EUR, Premium: 10000 EUR) with feature lists, descriptions, and CTA links, following requirement 3.2 | Restrictions: Export as const array of PricingPackage objects, TypeScript interface for type safety, features as string arrays (6-10 per package), Professional package highlighted (highlighted: true), CTA links point to /contact with query params (?package=basis), realistic feature differentiation | _Leverage: Similar data structures in codebase | _Requirements: 3.2 | Success: 3 packages defined, features differentiated clearly, TypeScript types correct, data consumable by components | Instructions: Mark in-progress, define packages with features, export properly, mark completed\n\n- [ ] 3.5 Create PricingTable component\n  - **File**: `components/sections/PricingTable.tsx` (new)\n  - **Purpose**: Display static pricing packages in card layout\n  - **Dependencies**: Button (shadcn/ui), lucide-react (CheckCircle)\n  - **_Leverage**: Card layouts from homepage, Button component\n  - **_Requirements**: 3.5\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Frontend Developer with component design skills | Task: Create PricingTable.tsx Server Component following requirement 3.5, rendering 3 pricing packages in grid layout with cards showing name, price, features (checkmarks), and CTA button | Restrictions: Server Component, responsive grid (1 col mobile, 3 cols desktop), highlight Professional package (border/shadow), use Button from shadcn/ui, CheckCircle icons for features, accessible card structure, price formatted with currency (2.500 €) | _Leverage: lib/pricing-data.ts for data, @/components/ui/button, homepage card layouts | _Requirements: 3.5 | Success: 3 packages displayed in attractive layout, responsive, Professional highlighted, CTAs work, accessible | Instructions: Mark in-progress, create component with grid layout, test responsiveness, mark completed\n\n- [ ] 3.6 Create PricingComparison component\n  - **File**: `components/sections/PricingComparison.tsx` (new)\n  - **Purpose**: Comparison table: Agentur vs. Baukasten vs. Freelancer\n  - **_Leverage**: Table patterns, comparison matrix layouts\n  - **_Requirements**: 3.5\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: UX Developer with table design expertise | Task: Create PricingComparison.tsx Server Component per requirement 3.5, implementing comparison table with 3 columns (HEADON Agentur, Website-Baukasten, Freelancer) and rows for key criteria (Quality, Speed, Support, Scalability, Cost, Ownership) | Restrictions: Server Component, responsive (stack on mobile, table on desktop), use semantic HTML table or responsive comparison cards, visually highlight HEADON column (success color), use CheckCircle/XCircle icons for pro/contra, accessible table headers | _Leverage: Responsive design patterns from existing components | _Requirements: 3.5 | Success: Comparison clear and readable, HEADON advantages visible, responsive design works, accessible | Instructions: Mark in-progress, create comparison with data, test mobile/desktop, mark completed\n\n- [ ] 3.7 Create PricingFAQ component\n  - **File**: `components/sections/PricingFAQ.tsx` (new)\n  - **Purpose**: FAQ specific to pricing questions\n  - **Dependencies**: Accordion (shadcn/ui)\n  - **_Leverage**: FAQ patterns from service pages, Accordion component\n  - **_Requirements**: 3.6\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Content Developer with FAQ expertise | Task: Create PricingFAQ.tsx Server Component following requirement 3.6, rendering 10-15 pricing-related FAQs in Accordion with questions like \"Was kostet eine Website?\", \"Warum Festpreise?\", \"Was ist im Preis enthalten?\", \"Gibt es versteckte Kosten?\" | Restrictions: Server Component, use Accordion from shadcn/ui, natural Q&A writing style, answers 100-200 words each, include keywords naturally (\"Webdesign Preise\", \"Festpreis\"), structured data markup optional (JSON-LD FAQPage schema) | _Leverage: @/components/ui/accordion, FAQ content from docs/SEO-KEYWORD-OPTIMIERUNG.md | _Requirements: 3.6 | Success: 10-15 FAQs displayed, Accordion functional, answers comprehensive, keywords present | Instructions: Mark in-progress, write and implement FAQs, mark completed\n\n### Blog Infrastructure\n\n- [ ] 3.8 Create blog post route structure\n  - **Files**:\n    - `app/blog/[slug]/page.tsx` (modify existing or create if not exists)\n    - `app/blog/[slug]/metadata.ts` (new)\n  - **Purpose**: Dynamic blog post rendering with MDX\n  - **_Leverage**: Existing blog structure, dynamic routing patterns\n  - **_Requirements**: 4.1, 4.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Next.js Developer with blog architecture expertise | Task: Set up blog post dynamic route structure following requirements 4.1-4.2, implementing generateStaticParams() for blog posts, Server Component rendering MDX content, and metadata generation | Restrictions: Use Next.js 15 App Router, Server Component, generateStaticParams returns array of blog post slugs from content/blog/, handle 404 for missing posts (notFound()), render MDX with proper styling (prose classes) | _Leverage: app/regionen/[city]/page.tsx for dynamic route pattern, lib/content/content-api.ts for loading MDX | _Requirements: 4.1, 4.2 | Success: Blog posts accessible at /blog/[slug], render MDX content, 404 for invalid slugs, build generates static pages | Instructions: Mark in-progress, create route with MDX rendering, test with sample post, mark completed\n\n- [ ] 3.9 Create BlogPostContent component\n  - **File**: `components/sections/BlogPostContent.tsx` (new)\n  - **Purpose**: Blog post layout with header, TOC, content, share buttons, related posts\n  - **_Leverage**: Article layout patterns, TOC generation\n  - **_Requirements**: 4.2, 4.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: React Developer with content presentation expertise | Task: Create BlogPostContent.tsx Server Component following requirements 4.2-4.3, implementing comprehensive blog layout with article header (title, author, date, reading time), sticky TOC sidebar, MDX content area with prose styling, share buttons (Twitter, LinkedIn, Facebook), and related posts grid | Restrictions: Server Component, two-column layout (TOC + content) on desktop, single column on mobile, TOC sticky (top-24), prose classes for typography, share buttons open in new window, related posts max 3 cards | _Leverage: components/seo/Breadcrumbs.tsx for navigation, @/components/ui/button for share buttons | _Requirements: 4.2, 4.3 | Success: Complete blog layout renders, TOC navigates correctly, share buttons work, responsive design, accessible | Instructions: Mark in-progress, create layout with all sections, test with sample content, mark completed\n\n- [ ] 3.10 Extend content-api with getBlogPost\n  - **File**: `lib/content/content-api.ts` (modify existing)\n  - **Purpose**: Load blog post MDX with frontmatter validation and TOC generation\n  - **_Leverage**: Existing MDX loading utilities, getBranchePage pattern\n  - **_Requirements**: 4.1\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Node.js Developer with MDX processing expertise | Task: Extend content-api.ts with getBlogPost() function per requirement 4.1, loading MDX from content/blog/, validating frontmatter with Zod, generating table of contents from headings (H2/H3), and loading related posts if specified | Restrictions: Validate frontmatter with blogPostFrontmatterSchema, generate TOC array with {id, title, level}, load related posts recursively (max 3), return null for missing files, handle errors gracefully | _Leverage: lib/content/content-api.ts existing patterns, lib/validations.ts for schema | _Requirements: 4.1 | Success: Function loads posts, validates frontmatter, generates TOC, loads related posts, TypeScript types correct | Instructions: Mark in-progress, implement function with TOC generation, test with sample post, mark completed\n\n- [ ] 3.11 Create Zod schema for blog post frontmatter\n  - **File**: `lib/validations.ts` (modify existing)\n  - **Purpose**: Validate blog post frontmatter\n  - **_Leverage**: Existing Zod schemas, brancheFrontmatterSchema\n  - **_Requirements**: 4.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: TypeScript Developer with content schema expertise | Task: Create blogPostFrontmatterSchema in lib/validations.ts following requirement 4.2, defining schema for title, description, author, publishDate (date string), updateDate (optional), readingTime (number), featuredImage, featuredImageAlt, tags (array), category, keywords (array), relatedPosts (optional array), relatedServices (optional array), SEO object (canonical optional, noindex optional) | Restrictions: Use Zod syntax, validate date strings (ISO format), readingTime must be positive integer, arrays min length 1, export schema for reuse | _Leverage: lib/validations.ts existing patterns | _Requirements: 4.2 | Success: Schema validates correct blog frontmatter, rejects invalid data, types inferred correctly | Instructions: Mark in-progress, define comprehensive schema, test with valid/invalid data, mark completed\n\n### High-Impact Blog Posts\n\n- [ ] 3.12 Write \"Website Kosten 2025\" blog post\n  - **File**: `content/blog/website-kosten-2025.mdx` (new)\n  - **Target Keyword**: \"Website Kosten\" (⭐⭐⭐⭐⭐ search volume)\n  - **Word Count**: 2500-3000 words\n  - **_Leverage**: docs/SEO-KEYWORD-OPTIMIERUNG.md blog post structure (lines 654-665)\n  - **_Requirements**: 4.1, 4.2, 4.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Content Writer with web development knowledge | Task: Write comprehensive blog post \"Website Kosten 2025: Was kostet eine professionelle Website?\" targeting \"Website Kosten\" keyword per requirements 4.1-4.3, following structure from docs/SEO-KEYWORD-OPTIMIERUNG.md:654-665 with sections on cost factors, price overview by website type, hidden costs, interactive calculator embed, and when to hire an agency | Restrictions: 2500-3000 words, keyword density 1-2%, H2/H3 structure, internal links to /preise and service pages, 1-2 external authoritative sources, natural writing (8th-10th grade reading level), include 2-3 images with alt tags, publish date 2025-01-15, reading time ~12 min | _Leverage: docs/SEO-KEYWORD-OPTIMIERUNG.md structure template, lib/pricing-data.ts for price references | _Requirements: 4.1, 4.2, 4.3 | Success: Post is 2500+ words, keyword naturally integrated, H2/H3 hierarchy logical, internal links present, frontmatter validates, renders correctly | Instructions: Mark in-progress, write comprehensive content, validate frontmatter, test page rendering, mark completed\n\n- [ ] 3.13 Write \"Website erstellen lassen\" blog post\n  - **File**: `content/blog/website-erstellen-lassen-guide.mdx` (new)\n  - **Target Keyword**: \"Website erstellen lassen\" (⭐⭐⭐⭐)\n  - **Word Count**: 2500-3000 words\n  - **_Leverage**: docs/SEO-KEYWORD-OPTIMIERUNG.md structure (lines 667-677), website-kosten-2025.mdx pattern\n  - **_Requirements**: 4.1, 4.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Content Writer with agency expertise | Task: Write \"Website erstellen lassen: Der ultimative Guide 2025\" targeting \"Website erstellen lassen\" keyword following requirements 4.1-4.2, covering why professional websites matter, step-by-step creation process, agency vs freelancer vs builder comparison, pre-project checklist, and how to find the right agency | Restrictions: 2500-3000 words, keyword density 1-2%, structured with H2/H3, internal links to /branchen pages and services, external authority links, conversational tone, include checklist (downloadable PDF optional), publish date 2025-01-18, reading ~12 min | _Leverage: docs/SEO-KEYWORD-OPTIMIERUNG.md template:667-677, website-kosten-2025.mdx for structure | _Requirements: 4.1, 4.2 | Success: Comprehensive guide, keywords natural, checklist actionable, internal linking strategic, validates and renders | Instructions: Mark in-progress, write guide with checklist section, validate, mark completed\n\n- [ ] 3.14 Write \"DSGVO-konforme Website\" blog post\n  - **File**: `content/blog/dsgvo-konforme-website-checkliste.mdx` (new)\n  - **Target Keyword**: \"DSGVO konforme Website\" (⭐⭐⭐)\n  - **Word Count**: 2000-2500 words\n  - **_Leverage**: website-kosten-2025.mdx structure\n  - **_Requirements**: 4.1\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Legal Tech Content Writer with GDPR knowledge | Task: Write \"DSGVO-konforme Website: Checkliste für Unternehmen 2025\" targeting \"DSGVO konforme Website\" per requirement 4.1, explaining GDPR importance, key requirements, 15-point checklist for compliance, cookie banner best practices, and common mistakes | Restrictions: 2000-2500 words, accurate legal information (disclaimer: not legal advice), checklist format with actionable items, keyword density 1-2%, internal links to services, external links to official GDPR resources, publish date 2025-01-22, reading ~10 min | _Leverage: website-kosten-2025.mdx structure | _Requirements: 4.1 | Success: Legally accurate content, checklist comprehensive, keywords present, validates | Instructions: Mark in-progress, write with legal accuracy, validate, mark completed\n\n- [ ] 3.15 Write \"Website Ladezeit optimieren\" blog post\n  - **File**: `content/blog/website-ladezeit-optimieren.mdx` (new)\n  - **Target Keyword**: \"Website Ladezeit verbessern\" (⭐⭐⭐)\n  - **Word Count**: 2000-2500 words\n  - **_Leverage**: website-kosten-2025.mdx structure\n  - **_Requirements**: 4.1\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Technical SEO Writer with performance optimization expertise | Task: Write \"Website Ladezeit optimieren: 10 Sofort-Tipps für bessere Performance\" targeting \"Website Ladezeit verbessern\" following requirement 4.1, covering why speed matters (SEO+UX), 10 actionable optimization tips, measurement tools, Core Web Vitals explanation, and when to get professional help | Restrictions: 2000-2500 words, technical but accessible language, numbered list format for 10 tips, screenshots of tools (Google PageSpeed Insights, GTmetrix), internal links to web-development service, external links to Google documentation, publish date 2025-01-25, reading ~10 min | _Leverage: website-kosten-2025.mdx | _Requirements: 4.1 | Success: Technical accuracy maintained, tips actionable, keywords present, validates | Instructions: Mark in-progress, write technical guide, validate, mark completed\n\n- [ ] 3.16 Write \"Website Relaunch\" blog post\n  - **File**: `content/blog/website-relaunch-guide.mdx` (new)\n  - **Target Keywords**: \"Website neu gestalten\", \"Alte Website modernisieren\" (⭐⭐⭐⭐)\n  - **Word Count**: 2500-3000 words\n  - **_Leverage**: website-kosten-2025.mdx structure\n  - **_Requirements**: 4.1\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Web Strategy Content Writer | Task: Write \"Website Relaunch: So modernisieren Sie Ihre alte Website in 2025\" targeting \"Website neu gestalten\" and \"Alte Website modernisieren\" per requirement 4.1, covering 10 signs your site needs a relaunch, step-by-step relaunch process, relaunch vs rebuild comparison, SEO considerations to avoid ranking loss, and relaunch checklist (PDF) | Restrictions: 2500-3000 words, address common fears (losing rankings, downtime), relaunch checklist comprehensive, internal links to services and blog/website-kosten-2025, external links to migration guides, publish date 2025-01-28, reading ~12 min | _Leverage: website-kosten-2025.mdx | _Requirements: 4.1 | Success: Addresses client concerns, checklist actionable, keywords natural, validates | Instructions: Mark in-progress, write comprehensive relaunch guide, validate, mark completed\n\n---\n\n## Phase 4: Content Expansion & Local SEO (Month 4-6)\n\n### Content Cluster Posts (21 blog posts)\n\n**Note**: For efficiency, these tasks are grouped by cluster. Each task creates 3-5 related posts.\n\n- [ ] 4.1 Write Webdesign & Development cluster posts (5 posts)\n  - **Files**: Create 5 MDX files in `content/blog/`:\n    - `responsive-webdesign-guide.mdx`\n    - `progressive-web-apps-pwa.mdx`\n    - `nextjs-vs-wordpress.mdx`\n    - `mobile-first-design-2025.mdx`\n    - `website-performance-technisch.mdx`\n  - **Word Count**: 1500-2000 words each\n  - **_Leverage**: Existing blog post structure, technical knowledge from tech stack\n  - **_Requirements**: 6.2, 6.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Technical Content Writer with web development expertise | Task: Create 5 blog posts for Webdesign & Development cluster following requirements 6.2-6.3, targeting technical but accessible audience with posts on responsive design, PWAs, Next.js vs WordPress comparison, mobile-first principles, and technical performance optimization | Restrictions: 1500-2000 words each, technical accuracy required, include code examples where appropriate, internal links to web-development service, external links to official docs (Next.js, MDN, W3C), H2/H3 structure, keywords naturally integrated, publish dates spread over 3 weeks | _Leverage: website-kosten-2025.mdx structure, tech.md for technical details | _Requirements: 6.2, 6.3 | Success: 5 posts created, technically accurate, readable for non-developers, keywords present, all validate and render | Instructions: Mark in-progress, write 5 posts following cluster theme, validate all frontmatter, test rendering, mark completed\n\n- [ ] 4.2 Write Branchen-Lösungen cluster posts (6 posts)\n  - **Files**: Create 6 MDX files in `content/blog/`:\n    - `restaurant-website-best-practices.mdx`\n    - `ecommerce-lokaler-einzelhandel.mdx`\n    - `handwerker-website-features.mdx`\n    - `website-coaches-berater.mdx`\n    - `immobilien-website-tipps.mdx`\n    - `fitness-website-kursbuchung.mdx`\n  - **Word Count**: 1500-2000 words each\n  - **_Leverage**: Industry page content from content/branchen/\n  - **_Requirements**: 6.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Industry-focused Content Writer | Task: Create 6 industry-specific blog posts per requirement 6.3, diving deeper into best practices, use cases, and features for each industry covered in branchen pages (restaurant, e-commerce, handwerk, consulting, real estate, fitness) | Restrictions: 1500-2000 words each, industry-specific terminology and examples, internal links to corresponding /branchen/[industry] page, case study mentions if available, practical advice focus, publish dates spread over 4 weeks | _Leverage: content/branchen/ MDX files for industry context, website-kosten-2025.mdx structure | _Requirements: 6.3 | Success: 6 posts created, industry expertise demonstrated, internal linking strategic, validates and renders | Instructions: Mark in-progress, write 6 industry posts with practical advice, validate, mark completed\n\n- [ ] 4.3 Write SEO & Marketing cluster posts (5 posts)\n  - **Files**: Create 5 MDX files in `content/blog/`:\n    - `lokale-seo-guide.mdx`\n    - `google-business-profile-optimieren.mdx`\n    - `website-texte-schreiben-seo.mdx`\n    - `backlinks-aufbauen-lokale-unternehmen.mdx`\n    - `google-analytics-einrichten.mdx`\n  - **Word Count**: 1500-2000 words each\n  - **_Leverage**: SEO knowledge from this spec, existing blog structure\n  - **_Requirements**: 6.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO & Marketing Content Specialist | Task: Create 5 SEO & Marketing cluster posts following requirement 6.3, covering local SEO strategies, Google Business Profile optimization, SEO copywriting, backlink building for local businesses, and Google Analytics setup | Restrictions: 1500-2000 words each, actionable advice for small businesses, step-by-step guides where appropriate, screenshots/examples, internal links to services and related posts, external links to tools (Google Analytics, Search Console), publish dates spread over 3 weeks | _Leverage: docs/SEO-KEYWORD-OPTIMIERUNG.md for SEO knowledge, website-kosten-2025.mdx structure | _Requirements: 6.3 | Success: 5 posts created, SEO advice accurate and current, guides actionable, validates | Instructions: Mark in-progress, write 5 SEO guides, validate, mark completed\n\n- [ ] 4.4 Write remaining Development cluster posts (5 posts)\n  - **Files**: Create 5 MDX files in `content/blog/`:\n    - `headless-cms-vorteile-nachteile.mdx`\n    - `website-typen-vergleich.mdx`\n    - `ssl-zertifikat-wichtigkeit.mdx`\n    - `website-wartung-guide.mdx`\n    - `cms-vergleich-2025.mdx`\n  - **Word Count**: 1500-2000 words each\n  - **_Leverage**: Technical knowledge, blog structure\n  - **_Requirements**: 6.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Technical Content Writer with CMS and infrastructure expertise | Task: Create 5 remaining development cluster posts per requirement 6.2, covering headless CMS, website type comparison, SSL importance, website maintenance, and CMS comparison (WordPress, Contentful, Sanity, etc.) | Restrictions: 1500-2000 words each, technical but accessible, comparison tables for CMS post, pros/cons lists, internal links to backend-solutions service, external links to CMS providers and documentation, publish dates spread over 3 weeks | _Leverage: tech.md for stack knowledge, website-kosten-2025.mdx structure | _Requirements: 6.2 | Success: 5 posts created, comparisons fair and accurate, technical content accessible, validates | Instructions: Mark in-progress, write 5 posts with comparisons, validate, mark completed\n\n### Local SEO Expansion\n\n- [ ] 4.5 Create Heilbronn regional page\n  - **Files**:\n    - `app/regionen/heilbronn/page.tsx` (create if not exists, or content file)\n    - `content/regionen/heilbronn.mdx` (new)\n  - **Purpose**: Expand local SEO to larger city (Heilbronn)\n  - **_Leverage**: Existing regional page pattern from app/regionen/[city]/, content/regionen/ MDX\n  - **_Requirements**: 5.2, 5.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Local SEO Specialist with regional knowledge | Task: Create Heilbronn regional page following requirements 5.2-5.3, mirroring existing regional page structure with city-specific content targeting \"Webdesign Agentur Heilbronn\" and local business types | Restrictions: Follow existing regional page MDX frontmatter structure, include city name in title/description, mention local landmarks or business districts, list services relevant to Heilbronn businesses, 1000-1500 words content, map integration with location, 5+ local FAQs | _Leverage: Existing content/regionen/ MDX files for structure, app/regionen/[city]/page.tsx for routing | _Requirements: 5.2, 5.3 | Success: Page accessible at /regionen/heilbronn, content city-specific, metadata optimized for local keywords, renders correctly with map | Instructions: Mark in-progress, create MDX with local content, ensure routing works, mark completed\n\n- [ ] 4.6 Create Mosbach regional page\n  - **Files**:\n    - `content/regionen/mosbach.mdx` (new)\n  - **Purpose**: Regional coverage expansion\n  - **_Leverage**: heilbronn.mdx structure\n  - **_Requirements**: 5.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Local Content Writer | Task: Create Mosbach regional page following requirement 5.2, adapting heilbronn.mdx structure for Mosbach with local context | Restrictions: 1000-1500 words, local business focus, \"Webdesign Agentur Mosbach\" in title, city-specific content, 5+ FAQs | _Leverage: content/regionen/heilbronn.mdx | _Requirements: 5.2 | Success: Page created, local content, metadata optimized, validates | Instructions: Mark in-progress, write local content, validate, mark completed\n\n- [ ] 4.7 Create Crailsheim regional page\n  - **Files**:\n    - `content/regionen/crailsheim.mdx` (new)\n  - **Purpose**: Regional coverage expansion\n  - **_Leverage**: heilbronn.mdx structure\n  - **_Requirements**: 5.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Local Content Writer | Task: Create Crailsheim regional page following requirement 5.2, adapting structure for Crailsheim | Restrictions: 1000-1500 words, local context, keywords in metadata, 5+ FAQs | _Leverage: content/regionen/heilbronn.mdx | _Requirements: 5.2 | Success: Page created, validates, local content | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 4.8 Create Aschaffenburg regional page\n  - **Files**:\n    - `content/regionen/aschaffenburg.mdx` (new)\n  - **Purpose**: Regional coverage to nearby larger city\n  - **_Leverage**: heilbronn.mdx structure\n  - **_Requirements**: 5.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Local Content Writer | Task: Create Aschaffenburg regional page per requirement 5.2, following established structure | Restrictions: 1000-1500 words, \"Webdesign Agentur Aschaffenburg\" keywords, local business focus, 5+ FAQs | _Leverage: content/regionen/heilbronn.mdx | _Requirements: 5.2 | Success: Page created, local content, validates | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 4.9 Update generateStaticParams for new regional pages\n  - **File**: `app/regionen/[city]/page.tsx` (modify existing)\n  - **Purpose**: Add 4 new cities to static generation\n  - **_Leverage**: Existing generateStaticParams function\n  - **_Requirements**: 5.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Next.js Developer | Task: Update generateStaticParams() in app/regionen/[city]/page.tsx per requirement 5.3, adding heilbronn, mosbach, crailsheim, aschaffenburg to the returned array | Restrictions: Maintain existing city entries (6 original cities), add 4 new cities in kebab-case, ensure all 10 cities generate static pages at build time | _Leverage: app/regionen/[city]/page.tsx existing generateStaticParams | _Requirements: 5.3 | Success: Build generates 10 regional pages, all accessible, no build errors | Instructions: Mark in-progress, add 4 cities to array, test build, mark completed\n\n- [ ] 4.10 Update sitemap with new regional pages\n  - **File**: `app/sitemap.ts` (modify existing)\n  - **Purpose**: Add 4 new regional pages to sitemap\n  - **_Leverage**: Existing sitemap logic\n  - **_Requirements**: 5.7\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Developer | Task: Update sitemap.ts following requirement 5.7, adding heilbronn, mosbach, crailsheim, aschaffenburg regional pages with appropriate priority and changefreq | Restrictions: Priority 0.7 for regional pages, changefreq 'monthly', include lastModified, maintain existing sitemap entries | _Leverage: app/sitemap.ts existing regional page entries | _Requirements: 5.7 | Success: Sitemap includes 10 regional pages total, validates, accessible at /sitemap.xml | Instructions: Mark in-progress, add 4 URLs to sitemap, validate XML, mark completed\n\n---\n\n## Phase 5: Technology Pages (Month 7-12)\n\n### Technology Pages Infrastructure\n\n- [ ] 5.1 Create technologie route structure\n  - **Files**:\n    - `app/technologie/page.tsx` (new)\n    - `app/technologie/[tech]/page.tsx` (new)\n    - `app/technologie/[tech]/metadata.ts` (new)\n  - **Purpose**: Dynamic routing for 6 technology pages\n  - **_Leverage**: app/branchen/[branche]/ pattern\n  - **_Requirements**: 7.1, 7.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Next.js Developer | Task: Create technologie route structure with dynamic [tech] parameter following requirements 7.1-7.2, mirroring branchen route pattern with generateStaticParams for 6 technologies (next-js-agentur, react-entwicklung, typescript-entwicklung, supabase-backend, headless-cms, tailwind-css) | Restrictions: Server Components, generateStaticParams returns 6 tech slugs, handle 404 for invalid slugs, implement metadata generation | _Leverage: app/branchen/[branche]/ pattern, lib/content/content-api.ts | _Requirements: 7.1, 7.2 | Success: Routes accessible at /technologie/[tech], 6 pages generate at build, renders correctly | Instructions: Mark in-progress, create structure, test routing, mark completed\n\n- [ ] 5.2 Create TechnologyPageContent component\n  - **File**: `components/sections/TechnologyPageContent.tsx` (new)\n  - **Purpose**: Technology showcase layout with benefits, use cases, comparison\n  - **_Leverage**: BrancheContent.tsx pattern\n  - **_Requirements**: 7.2, 7.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: React Developer with technical content expertise | Task: Create TechnologyPageContent.tsx Server Component following requirements 7.2-7.3, implementing hero section with tech logo, benefits list, use cases section, comparison table (vs alternatives), related portfolio projects, and FAQ | Restrictions: Server Component, accept TechnologyPageData prop, use shadcn/ui components, integrate portfolio project cards (if available), comparison table responsive, accessible structure | _Leverage: components/sections/BrancheContent.tsx for structure, components/ui components | _Requirements: 7.2, 7.3 | Success: Component renders all sections, responsive, portfolio integration works, accessible | Instructions: Mark in-progress, create component with sections, test with mock data, mark completed\n\n- [ ] 5.3 Extend content-api with getTechnologyPage\n  - **File**: `lib/content/content-api.ts` (modify existing)\n  - **Purpose**: Load technology MDX files\n  - **_Leverage**: getBranchePage pattern\n  - **_Requirements**: 7.1\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Node.js Developer | Task: Extend content-api.ts with getTechnologyPage() function per requirement 7.1, loading MDX from content/technologie/ with frontmatter validation | Restrictions: Follow getBranchePage pattern, validate with technologyFrontmatterSchema, return null for 404, handle errors | _Leverage: lib/content/content-api.ts getBranchePage | _Requirements: 7.1 | Success: Function loads tech pages, validates frontmatter, returns structured data | Instructions: Mark in-progress, add function, test with sample MDX, mark completed\n\n- [ ] 5.4 Create Zod schema for technology frontmatter\n  - **File**: `lib/validations.ts` (modify existing)\n  - **Purpose**: Validate technology page frontmatter\n  - **_Leverage**: Existing schemas\n  - **_Requirements**: 7.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: TypeScript Developer | Task: Create technologyFrontmatterSchema in lib/validations.ts following requirement 7.2, defining schema for name, officialName, logo, version, description, benefits array, useCases array (with title/description/bestFor), comparison object (alternatives array, table rows), relatedProjects array, faqs array | Restrictions: Zod syntax, required fields required, arrays validated, export schema | _Leverage: lib/validations.ts patterns | _Requirements: 7.2 | Success: Schema validates tech frontmatter, types inferred correctly | Instructions: Mark in-progress, define schema, test validation, mark completed\n\n### Technology Content Creation\n\n- [ ] 5.5 Create Next.js Agentur page\n  - **File**: `content/technologie/next-js-agentur.mdx` (new)\n  - **Target Keyword**: \"Next.js Agentur\" (⭐⭐)\n  - **Word Count**: 1500-2000 words\n  - **_Leverage**: Tech.md for Next.js details\n  - **_Requirements**: 7.3, 7.4\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Technical Content Writer with Next.js expertise | Task: Create next-js-agentur.mdx following requirements 7.3-7.4, showcasing HEADON's Next.js expertise, explaining benefits (SSR, performance, SEO), use cases, comparison with alternatives (WordPress, Gatsby, Remix), and FAQs | Restrictions: 1500-2000 words, technically accurate, frontmatter includes benefits (4-6), use cases (3-4), comparison table (vs WordPress, Gatsby, Remix), 5+ FAQs, relatedProjects if available, keywords \"Next.js Agentur\" naturally integrated | _Leverage: tech.md for Next.js technical details, existing blog structure | _Requirements: 7.3, 7.4 | Success: Content technically accurate, showcases expertise, keywords present, frontmatter validates, renders correctly | Instructions: Mark in-progress, write comprehensive Next.js content, validate, mark completed\n\n- [ ] 5.6 Create React Entwicklung page\n  - **File**: `content/technologie/react-entwicklung.mdx` (new)\n  - **Target Keyword**: \"React Entwicklung Agentur\" (⭐⭐)\n  - **Word Count**: 1500-2000 words\n  - **_Leverage**: next-js-agentur.mdx structure\n  - **_Requirements**: 7.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: React Developer and Technical Writer | Task: Create react-entwicklung.mdx per requirement 7.3, explaining React benefits, component-based architecture, use cases, comparison with alternatives (Vue, Angular, Svelte) | Restrictions: 1500-2000 words, benefits list, use cases, comparison table, 5+ FAQs, keywords \"React Entwicklung\" integrated | _Leverage: next-js-agentur.mdx structure | _Requirements: 7.3 | Success: React expertise demonstrated, technically sound, validates | Instructions: Mark in-progress, write React content, validate, mark completed\n\n- [ ] 5.7 Create TypeScript Entwicklung page\n  - **File**: `content/technologie/typescript-entwicklung.mdx` (new)\n  - **Target Keyword**: \"TypeScript Entwicklung\" (⭐⭐)\n  - **Word Count**: 1500-2000 words\n  - **_Leverage**: next-js-agentur.mdx structure\n  - **_Requirements**: 7.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: TypeScript Expert and Technical Writer | Task: Create typescript-entwicklung.mdx following requirement 7.3, explaining TypeScript benefits (type safety, IDE support, refactoring), use cases, comparison with JavaScript | Restrictions: 1500-2000 words, benefits, use cases, comparison (TypeScript vs JavaScript), code examples optional, 5+ FAQs | _Leverage: next-js-agentur.mdx | _Requirements: 7.3 | Success: TypeScript advantages clear, validates | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 5.8 Create Supabase Backend page\n  - **File**: `content/technologie/supabase-backend.mdx` (new)\n  - **Target Keyword**: \"Supabase Entwicklung\" (⭐)\n  - **Word Count**: 1500-2000 words\n  - **_Leverage**: next-js-agentur.mdx structure\n  - **_Requirements**: 7.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Backend Developer with Supabase experience | Task: Create supabase-backend.mdx per requirement 7.3, explaining Supabase as PostgreSQL BaaS, benefits (real-time, auth, managed), use cases, comparison with alternatives (Firebase, custom Node.js) | Restrictions: 1500-2000 words, benefits, use cases, comparison table, 5+ FAQs, emphasize PostgreSQL advantage | _Leverage: next-js-agentur.mdx | _Requirements: 7.3 | Success: Supabase benefits clear, technically accurate, validates | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 5.9 Create Headless CMS page\n  - **File**: `content/technologie/headless-cms.mdx` (new)\n  - **Target Keyword**: \"Headless CMS Agentur\" (⭐⭐)\n  - **Word Count**: 1500-2000 words\n  - **_Leverage**: next-js-agentur.mdx structure\n  - **_Requirements**: 7.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: CMS Architect and Content Writer | Task: Create headless-cms.mdx following requirement 7.3, explaining headless CMS concept, benefits (flexibility, omnichannel), use cases, comparison with traditional CMS (WordPress, Drupal) and other headless options (Contentful, Sanity, Strapi) | Restrictions: 1500-2000 words, benefits, use cases, comprehensive comparison table, 5+ FAQs, keywords integrated | _Leverage: next-js-agentur.mdx | _Requirements: 7.3 | Success: Headless CMS concept clear, comparison fair, validates | Instructions: Mark in-progress, write, validate, mark completed\n\n- [ ] 5.10 Create Tailwind CSS page\n  - **File**: `content/technologie/tailwind-css.mdx` (new)\n  - **Target Keyword**: \"Tailwind CSS Agentur\" (⭐)\n  - **Word Count**: 1500-2000 words\n  - **_Leverage**: next-js-agentur.mdx structure\n  - **_Requirements**: 7.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Frontend Developer with CSS framework expertise | Task: Create tailwind-css.mdx per requirement 7.3, explaining Tailwind utility-first approach, benefits (performance, consistency, DX), use cases, comparison with alternatives (Bootstrap, Material-UI, CSS-in-JS) | Restrictions: 1500-2000 words, benefits, use cases, comparison table, 5+ FAQs, code examples showing utility classes optional | _Leverage: next-js-agentur.mdx | _Requirements: 7.3 | Success: Tailwind benefits demonstrated, comparison accurate, validates | Instructions: Mark in-progress, write, validate, mark completed\n\n### Final Integration\n\n- [ ] 5.11 Add \"Technologie\" to main navigation (optional)\n  - **File**: `components/layout/Header.tsx` (modify existing)\n  - **Purpose**: Add optional \"Technologie\" navigation item\n  - **_Leverage**: Header navigation structure\n  - **_Requirements**: 7.6\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Frontend Developer | Task: Optionally add \"Technologie\" navigation item to Header.tsx per requirement 7.6, with dropdown showing 6 technologies or single link to /technologie overview | Restrictions: Maintain responsive design, accessible dropdown if used, consistent with existing nav styling | _Leverage: components/layout/Header.tsx, \"Branchen\" nav item as example | _Requirements: 7.6 | Success: Nav item added (if desired), dropdown works, responsive | Instructions: Mark in-progress, add nav item (if requested by user), test, mark completed\n\n- [ ] 5.12 Update sitemap with technology pages\n  - **File**: `app/sitemap.ts` (modify existing)\n  - **Purpose**: Add 6 technology pages + overview to sitemap\n  - **_Leverage**: Existing sitemap logic\n  - **_Requirements**: 7.6\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Developer | Task: Update sitemap.ts following requirement 7.6, adding /technologie overview and 6 tech pages with priority 0.6, changefreq 'monthly' | Restrictions: Maintain existing entries, set appropriate priority (lower than main pages), include lastModified | _Leverage: app/sitemap.ts | _Requirements: 7.6 | Success: Sitemap includes 7 technologie URLs, validates | Instructions: Mark in-progress, add URLs to sitemap, validate, mark completed\n\n- [ ] 5.13 Create technology overview page content\n  - **File**: `app/technologie/page.tsx` (update with content)\n  - **Purpose**: Overview page listing all 6 technologies\n  - **_Leverage**: app/branchen/page.tsx pattern\n  - **_Requirements**: 7.1\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Frontend Developer | Task: Create technology overview page following requirement 7.1, displaying 6 technology cards with logos, names, short descriptions, and links to detail pages | Restrictions: Server Component, metadata optimized for \"Technologie Stack\" keywords, responsive grid layout (2 cols mobile, 3 cols desktop), cards link to /technologie/[tech] pages, use existing card styles | _Leverage: app/branchen/page.tsx for overview pattern | _Requirements: 7.1 | Success: Overview displays all 6 technologies, cards link correctly, responsive, metadata optimized | Instructions: Mark in-progress, create overview with cards, test, mark completed\n\n---\n\n## Phase 6: Monitoring & Continuous Optimization (Ongoing)\n\n- [ ] 6.1 Set up Google Search Console monitoring\n  - **Purpose**: Weekly performance tracking\n  - **_Requirements**: 8.1, 8.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Analyst | Task: Document baseline metrics from Google Search Console following requirements 8.1-8.2, recording total impressions, clicks, average CTR, average position, top-10 keywords with current rankings, and set up weekly monitoring schedule | Restrictions: Document baseline in project docs folder (docs/seo-baseline.md), include date of measurement, screenshot key metrics, create weekly tracking spreadsheet or document template for ongoing monitoring | _Leverage: Google Search Console interface, docs/SEO-KEYWORD-OPTIMIERUNG.md KPI section for metrics to track | _Requirements: 8.1, 8.2 | Success: Baseline documented with date and metrics, weekly monitoring process defined, team knows what to track | Instructions: Mark in-progress, access GSC, document baseline metrics, create monitoring template, mark completed\n\n- [ ] 6.2 Set up Google Analytics tracking\n  - **Purpose**: Traffic and conversion monitoring\n  - **_Requirements**: 8.1, 8.2\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Analytics Specialist | Task: Document baseline Analytics metrics following requirements 8.1-8.2, recording organic sessions, pages/session, avg session duration, bounce rate, conversion rate (contact form submissions), and set up weekly monitoring | Restrictions: Document in docs/seo-baseline.md, include date, set up custom dashboard in GA4 for SEO metrics, define conversion tracking for contact form (if not already set up) | _Leverage: Google Analytics 4 interface, existing analytics setup | _Requirements: 8.1, 8.2 | Success: Baseline documented, GA4 dashboard configured for SEO metrics, conversions tracked | Instructions: Mark in-progress, document GA metrics, set up dashboard, mark completed\n\n- [ ] 6.3 Create monthly SEO report template\n  - **File**: `docs/seo-report-template.md` (new)\n  - **Purpose**: Standardized monthly reporting\n  - **_Requirements**: 8.3\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: SEO Manager | Task: Create monthly SEO report template per requirement 8.3, including sections for overview metrics (traffic, impressions, clicks, CTR), top-10 keywords table, new rankings in top-100, new pages with traffic, and next month's action items | Restrictions: Markdown format for easy editing, placeholders for metrics ([METRIC]), table format for keywords, actionable next steps section, reference docs/SEO-KEYWORD-OPTIMIERUNG.md report structure (lines 1180-1206) | _Leverage: docs/SEO-KEYWORD-OPTIMIERUNG.md monthly report structure | _Requirements: 8.3 | Success: Template created with all sections, easy to fill out monthly, provides clear overview | Instructions: Mark in-progress, create template following structure from docs, mark completed\n\n- [ ] 6.4 Document content update schedule\n  - **File**: `docs/content-maintenance-schedule.md` (new)\n  - **Purpose**: Ongoing content freshness plan\n  - **_Requirements**: 8.7\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Content Manager | Task: Create content maintenance schedule document following requirement 8.7, planning quarterly content reviews (every 3 months review blog posts for outdated info), new blog posts schedule (2-3 per month), A/B testing calendar for title/description optimization, and seasonal content updates | Restrictions: Markdown format, schedule by quarter, assign review cycles (Q1: review Jan-Mar posts, Q2: Apr-Jun, etc.), list criteria for when content needs updating (date references, outdated stats, broken links, new features to mention) | _Leverage: docs/SEO-KEYWORD-OPTIMIERUNG.md continuous optimization section | _Requirements: 8.7 | Success: Schedule documented, review criteria clear, team knows when to update content | Instructions: Mark in-progress, create schedule document, define review criteria, mark completed\n\n- [ ] 6.5 Set up Lighthouse CI monitoring\n  - **File**: `.github/workflows/lighthouse-ci.yml` (new)\n  - **Purpose**: Automated performance monitoring on every deployment\n  - **_Requirements**: Performance requirements (all new pages must maintain 95+ Lighthouse score)\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: DevOps Engineer with CI/CD expertise | Task: Set up Lighthouse CI workflow in GitHub Actions following performance requirements, running automated Lighthouse audits on key pages (homepage, sample branchen page, blog post, pricing page) on every push to main and every PR, failing build if scores drop below 95 in any category | Restrictions: Use @lhci/cli package, configure lighthouserc.js with thresholds (performance: 95, accessibility: 95, best-practices: 95, seo: 95), run on sample URLs representing each page type, upload results to temporary public storage or GitHub Pages | _Leverage: design.md Lighthouse CI section (lines 731-785) for configuration example, existing GitHub Actions workflows | _Requirements: Performance maintenance (95+ Lighthouse score) | Success: Lighthouse CI runs on every deployment, fails build if scores drop, team notified of performance issues | Instructions: Mark in-progress, create workflow file and config, test with sample PR, mark completed\n\n---\n\n## Meta Tasks\n\n- [ ] META.1 Create comprehensive implementation checklist\n  - **File**: `docs/seo-implementation-checklist.md` (new)\n  - **Purpose**: Pre/post-launch checklist for each phase\n  - **_Leverage**: docs/SEO-KEYWORD-OPTIMIERUNG.md checklists section\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Project Manager with SEO expertise | Task: Create implementation checklist document compiling pre-launch and post-launch checks from docs/SEO-KEYWORD-OPTIMIERUNG.md:1309-1372, organized by phase (Quick Wins, Industry Pages, Pricing/Blog, Content Expansion, Technology Pages) | Restrictions: Markdown with checkbox format, separate sections for pre-launch (before deploying changes) and post-launch (after deployment) checks, include verification steps (test URL, validate metadata, check GSC indexing) | _Leverage: docs/SEO-KEYWORD-OPTIMIERUNG.md Pre-Launch and Post-Launch Checklists | _Requirements: All (cross-cutting) | Success: Comprehensive checklist created, team can verify each phase implementation systematically | Instructions: Mark in-progress, compile checklists from planning doc, organize by phase, mark completed\n\n- [ ] META.2 Create SEO style guide for content\n  - **File**: `docs/seo-content-style-guide.md` (new)\n  - **Purpose**: Guidelines for writing SEO-optimized content\n  - **_Leverage**: docs/SEO-KEYWORD-OPTIMIERUNG.md content standards\n  - **_Prompt**: Implement the task for spec seo-keyword-optimization, first run spec-workflow-guide to get the workflow guide then implement the task: | Role: Content Strategist and SEO Specialist | Task: Create SEO content style guide documenting writing standards from requirements: keyword density 1-2%, title length 50-60 chars, description length 150-160 chars, heading hierarchy (one H1, then H2s and H3s), internal linking (3-5 links per page), external linking (1-2 authoritative sources), image alt tags (descriptive with keywords), content quality (original, valuable, no thin content) | Restrictions: Markdown format, include examples of good vs bad titles/descriptions, keyword integration examples, heading structure templates, provide MDX frontmatter template for blog posts | _Leverage: Requirements document content standards section, docs/SEO-KEYWORD-OPTIMIERUNG.md content standards | _Requirements: All content-related requirements | Success: Style guide is comprehensive and actionable, writers can follow guidelines, includes templates | Instructions: Mark in-progress, document all content standards with examples, mark completed\n\n---\n\n## Completion Criteria\n\n**Phase 1 Complete When:**\n- [ ] All 6 Quick Win tasks completed (1.1-1.6)\n- [ ] Metadata changes deployed to production\n- [ ] Google Search Console shows updated titles/descriptions\n- [ ] Baseline metrics documented\n\n**Phase 2 Complete When:**\n- [ ] All 14 Industry Page tasks completed (2.1-2.14)\n- [ ] 6 industry landing pages live and indexed\n- [ ] Navigation updated with \"Branchen\" link\n- [ ] Sitemap includes all branchen URLs\n- [ ] Google Search Console shows impressions for industry keywords\n\n**Phase 3 Complete When:**\n- [ ] All 9 Pricing & Blog tasks completed (3.1-3.16)\n- [ ] Pricing page live with functional calculator\n- [ ] 5 high-impact blog posts published and indexed\n- [ ] Blog post infrastructure fully functional\n- [ ] +20-30% organic traffic increase observed (vs baseline)\n\n**Phase 4 Complete When:**\n- [ ] All 6 Content Expansion tasks completed (4.1-4.10)\n- [ ] 21 blog posts published across 3 content clusters\n- [ ] 4 new regional pages live\n- [ ] Sitemap updated with all new URLs\n- [ ] +100-150% organic traffic increase observed (vs baseline)\n\n**Phase 5 Complete When:**\n- [ ] All 9 Technology Page tasks completed (5.1-5.13)\n- [ ] 6 technology pages live and indexed\n- [ ] Technology overview page functional\n- [ ] Sitemap includes all tech URLs\n- [ ] +200-300% organic traffic increase observed (vs baseline)\n\n**Phase 6 Complete When:**\n- [ ] All 5 Monitoring tasks completed (6.1-6.5)\n- [ ] Weekly and monthly monitoring established\n- [ ] Lighthouse CI running automatically\n- [ ] Content maintenance schedule followed\n- [ ] 12-month KPIs achieved (Top-3 rankings for 15-20 keywords, 5-10 leads/week from organic)\n\n**Meta Tasks Complete When:**\n- [ ] Implementation checklist created and used\n- [ ] Content style guide documented and shared with team\n\n---\n\n**Total Tasks**: 75 implementation tasks + 2 meta tasks = **77 tasks**\n**Estimated Total Effort**: 60-80 hours across 6 months\n**Priority Order**: Phase 1 → Phase 2 → Phase 3 → Phase 4 → Phase 5 → Phase 6 (ongoing)\n\n---\n\n**Document Version**: 1.0\n**Created**: 2025-10-27\n**Status**: Ready for Implementation\n**Next Step**: Begin Phase 1 (Quick Wins) - Tasks 1.1-1.6\n",
  "fileStats": {
    "size": 83635,
    "lines": 648,
    "lastModified": "2025-10-27T14:43:31.765Z"
  },
  "comments": []
}