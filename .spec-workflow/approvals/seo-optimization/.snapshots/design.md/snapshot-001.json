{
  "id": "snapshot_1761485602564_9f8uuqcuk",
  "approvalId": "approval_1761485602561_svsk6tg1r",
  "approvalTitle": "SEO Optimization Design Document",
  "version": 1,
  "timestamp": "2025-10-26T13:33:22.564Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThis design document outlines the technical architecture for implementing comprehensive SEO optimization across the HEADON.pro website. The implementation builds upon an **existing, well-structured SEO infrastructure** including schema generators, metadata builders, and structured data components. Rather than rebuilding, we'll **extend, enhance, and optimize** existing systems while adding missing pieces like OG images, FAQ pages, and content hubs.\n\n**Key Design Principles:**\n1. **Leverage Existing Infrastructure** - Reuse StructuredData, SchemaGenerator, and meta-builder utilities\n2. **Incremental Enhancement** - Add missing schemas and metadata without disrupting existing functionality\n3. **Performance-First** - Ensure SEO enhancements don't negatively impact Core Web Vitals\n4. **Type Safety** - Maintain strict TypeScript types for all SEO components\n5. **Maintainability** - Keep SEO concerns modular and colocated with page components\n\n**Architecture Overview:**\nThe SEO optimization feature spans multiple layers:\n- **Component Layer**: Schema components, metadata generators, OG image components\n- **Utility Layer**: Schema builders, meta builders, validation utilities\n- **Content Layer**: FAQ pages, glossary, comparison articles, enhanced service pages\n- **Asset Layer**: OG images (1200x630px), optimized for social media\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\n\n**Framework Compliance:**\n- **Next.js 15 App Router**: Utilize built-in Metadata API for SEO optimization\n- **TypeScript Strict Mode**: All SEO utilities maintain type safety with explicit interfaces\n- **Server Components**: Schema generators render on server for zero client-side cost\n- **Performance Requirements**: All changes must maintain Lighthouse 95+ and LCP < 1.5s\n\n**Technology Integration:**\n- **Supabase**: No changes required - SEO is purely presentational layer\n- **Tailwind CSS**: Use for FAQ page, glossary, and comparison article styling\n- **Framer Motion**: Minimal use for FAQ accordion animations (optional)\n- **Next.js Image**: Use for OG image optimization and delivery\n\n**Build Process:**\n- **Standalone Output**: SEO enhancements compatible with Docker deployment\n- **Static Generation**: FAQ, glossary, and comparison pages use SSG for optimal performance\n- **Metadata Generation**: Leverage Next.js Metadata API for automatic tag injection\n\n**Code Quality:**\n- **ESLint/Prettier**: All new code follows existing formatting standards\n- **Type Safety**: Schemas use `@/lib/types/schema` interfaces\n- **Validation**: Runtime schema validation in development, fail-safe in production\n\n### Project Structure (structure.md)\n\n**Directory Organization:**\n```\napp/\n├── faq/\n│   └── page.tsx                    # NEW: Dedicated FAQ page with FAQPage schema\n├── glossar/\n│   ├── page.tsx                    # NEW: Glossary listing page\n│   └── [term]/page.tsx             # NEW: Individual glossary term pages\n├── vergleiche/\n│   ├── page.tsx                    # NEW: Comparison articles listing\n│   └── [slug]/page.tsx             # NEW: Individual comparison articles\n├── page.tsx                        # ENHANCE: Already has metadata, verify H1\n└── services/\n    └── [service]/page.tsx          # ENHANCE: Add FAQ sections with schema\n\ncomponents/\n├── seo/\n│   ├── StructuredData.tsx          # EXISTS: Organization, LocalBusiness, Service, Breadcrumb\n│   ├── SchemaGenerator.tsx         # EXISTS: Universal generator with wrappers\n│   ├── WebsiteSchema.tsx           # EXISTS: WebSite schema with SearchAction\n│   ├── Breadcrumbs.tsx             # EXISTS: Breadcrumb UI component\n│   ├── PageHeader.tsx              # EXISTS: Page header component\n│   └── FAQAccordion.tsx            # NEW: Reusable FAQ accordion with schema\n├── sections/\n│   ├── HeroSection.tsx             # VERIFY: H1 tag populated (already done?)\n│   ├── FAQSection.tsx              # EXISTS: FAQ section component\n│   └── StatsSection.tsx            # NEW: \"About us in numbers\" for AI SEO\n└── content/\n    ├── GlossaryCard.tsx            # NEW: Glossary term card component\n    ├── ComparisonTable.tsx         # NEW: Feature comparison table\n    └── CaseStudyCard.tsx           # ENHANCE: Portfolio card with enhanced schema\n\nlib/\n├── seo/\n│   ├── schema-builder.ts           # EXISTS: Type-safe schema builders\n│   ├── meta-builder.ts             # EXISTS: SEO-optimized metadata generators\n│   ├── og-image-generator.ts       # NEW: OG image generation utility\n│   └── keyword-analyzer.ts         # NEW: Keyword density analysis tool\n├── content/\n│   ├── glossary.ts                 # NEW: Glossary data source\n│   ├── comparisons.ts              # NEW: Comparison articles data\n│   └── faq-data.ts                 # NEW: Centralized FAQ data\n└── types/\n    ├── schema.ts                   # EXISTS: Schema.org type definitions\n    └── content.ts                  # ENHANCE: Add Glossary, Comparison types\n\npublic/\n└── og-images/                      # NEW: Social media images\n    ├── home.jpg                    # 1200x630, < 100KB\n    ├── services.jpg\n    ├── web-dev.jpg\n    ├── mobile-dev.jpg\n    ├── design.jpg\n    ├── backend.jpg\n    ├── blog.jpg\n    ├── contact.jpg\n    └── about.jpg\n```\n\n**Pattern Consistency:**\n- **Metadata Location**: Colocated with page component using Next.js Metadata API\n- **Schema Location**: Rendered in page component body (Server Component)\n- **Content Types**: Use MDX for glossary terms, TypeScript data files for structured content\n- **Image Assets**: Store OG images in `/public/og-images/`, optimize before commit\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n\n1. **StructuredData Component** (`components/seo/StructuredData.tsx`)\n   - **Current Capabilities**: Organization, LocalBusiness, Service, Breadcrumb schemas\n   - **Reuse Strategy**: Continue using for global schemas in layout.tsx\n   - **No Changes Needed**: Component is well-designed and functional\n   - **Note**: LocalBusiness schema already includes areaServed, geo, openingHours\n\n2. **SchemaGenerator System** (`components/seo/SchemaGenerator.tsx`)\n   - **Current Capabilities**: Universal schema injector with specialized wrappers (ArticleSchema, FAQSchema, CreativeWorkSchema, PersonSchema, ReviewSchema, BreadcrumbSchema)\n   - **Reuse Strategy**: Use existing FAQSchema wrapper for FAQ sections\n   - **Integration Points**: Add FAQSchema to service pages and new FAQ page\n   - **No New Components Needed**: Existing system handles all requirements\n\n3. **Schema Builder Utilities** (`lib/seo/schema-builder.ts`)\n   - **Current Capabilities**: Type-safe builders for Article, FAQ, CreativeWork, Person, Review, AggregateRating, Breadcrumb\n   - **Reuse Strategy**: Use buildFAQPageSchema for FAQ sections, buildPersonSchema for team pages, buildAggregateRatingSchema for reviews\n   - **Extension Needed**: None - all required builders exist\n   - **Integration**: Import and use in new pages\n\n4. **Meta Builder Utilities** (`lib/seo/meta-builder.ts`)\n   - **Current Capabilities**: Metadata generators for Blog, Portfolio, Service, City, generic pages; automatic truncation to optimal lengths\n   - **Reuse Strategy**: Use generatePageMetadata for FAQ, glossary, comparison pages\n   - **Extension Needed**: Add generateGlossaryMetadata, generateComparisonMetadata for specialized titles\n   - **Benefits**: Consistent metadata format, automatic Open Graph generation, truncation\n\n5. **WebsiteSchema Component** (`components/seo/WebsiteSchema.tsx`)\n   - **Status**: Already implemented with SearchAction for sitelinks\n   - **Reuse Strategy**: Keep as-is in layout.tsx\n   - **No Changes Needed**: Meets all requirements from SEO plan\n\n6. **HeroSection Component** (`components/sections/HeroSection.tsx`)\n   - **Status**: H1 tag exists and is populated (lines 212-266)\n   - **Content**: \"Full-Service Digitalagentur für Webentwicklung, Apps & kreatives Design\"\n   - **Analysis**: Already contains target keywords - may need minor optimization\n   - **Action**: Verify in live HTML; adjust wording if needed for keyword balance\n\n7. **Homepage Metadata** (`app/page.tsx`)\n   - **Status**: Already implemented with comprehensive keywords\n   - **Content**: Title, description, keywords array, OpenGraph tags\n   - **Analysis**: Follows SEO best practices - meets P1 requirements\n   - **Action**: Verify OG image exists at referenced path; update if needed\n\n### Integration Points\n\n1. **Root Layout** (`app/layout.tsx`)\n   - **Current Integration**: StructuredData components (Organization, LocalBusiness), WebsiteSchema\n   - **Status**: Complete - no changes needed\n   - **Verification**: Ensure 4+ JSON-LD scripts render (Organization, LocalBusiness, WebSite, any page-specific)\n\n2. **Service Pages** (`app/services/[service]/page.tsx`)\n   - **Current State**: Service metadata exists (via MDX frontmatter)\n   - **Enhancement Needed**: Add FAQ sections with FAQSchema\n   - **Integration**: Import { FAQSchema } from '@/components/seo/SchemaGenerator', render with service-specific FAQ data\n   - **Data Source**: Create lib/content/service-faqs.ts with FAQs per service\n\n3. **Blog Posts** (`app/blog/[slug]/page.tsx`)\n   - **Current Integration**: ArticleSchema via SchemaGenerator\n   - **Status**: Complete - no changes needed\n   - **Verification**: Ensure Article schema renders on all blog posts\n\n4. **Portfolio Projects** (`app/portfolio/[slug]/page.tsx`)\n   - **Current Integration**: CreativeWorkSchema via SchemaGenerator\n   - **Enhancement**: Add testimonial Review schema if client testimonials exist\n   - **Integration**: Import { ReviewSchema } from SchemaGenerator, render per testimonial\n\n## Architecture\n\n### Modular Design Principles\n\n**1. Single File Responsibility:**\n- **Schema Components**: Each schema component handles one schema type (FAQSchema, ArticleSchema, etc.)\n- **Page Components**: Pages compose schemas rather than implementing them\n- **Utility Functions**: Builders focus on schema construction, validators on validation\n- **Content Files**: Separate data from presentation (faq-data.ts, glossary.ts)\n\n**2. Component Isolation:**\n- **FAQAccordion**: Self-contained FAQ UI with integrated schema generation\n- **ComparisonTable**: Standalone comparison table with structured data\n- **StatsSection**: Isolated \"About in numbers\" section for AI SEO\n- **GlossaryCard**: Reusable card for glossary term display\n\n**3. Service Layer Separation:**\n- **Data Layer**: Content files (faq-data.ts, glossary.ts, comparisons.ts)\n- **Business Logic**: Schema builders (schema-builder.ts) and metadata generators (meta-builder.ts)\n- **Presentation Layer**: React components consuming data and generating UI\n- **Validation Layer**: Runtime schema validation in development (validateSchema in SchemaGenerator)\n\n**4. Utility Modularity:**\n- **schema-builder.ts**: Schema construction (buildFAQPageSchema, buildPersonSchema, etc.)\n- **meta-builder.ts**: Metadata construction (generatePageMetadata, truncateTitle, etc.)\n- **og-image-generator.ts**: NEW - OG image URL generation and validation\n- **keyword-analyzer.ts**: NEW - Keyword density analysis for development\n\n### Architecture Diagram\n\n```mermaid\ngraph TD\n    A[User Request] --> B{Page Type}\n\n    B -->|Home| C[app/page.tsx]\n    B -->|Service| D[app/services/[service]/page.tsx]\n    B -->|FAQ| E[app/faq/page.tsx]\n    B -->|Glossary| F[app/glossar/page.tsx]\n    B -->|Comparison| G[app/vergleiche/[slug]/page.tsx]\n\n    C --> H[Metadata API]\n    D --> H\n    E --> H\n    F --> H\n    G --> H\n\n    C --> I[Schema Components]\n    D --> I\n    E --> I\n    F --> I\n    G --> I\n\n    H --> J[meta-builder.ts]\n    J --> K[generatePageMetadata]\n    J --> L[truncateTitle/Description]\n\n    I --> M[SchemaGenerator]\n    M --> N[buildFAQPageSchema]\n    M --> O[buildPersonSchema]\n    M --> P[buildArticleSchema]\n    M --> Q[buildBreadcrumbListSchema]\n\n    N --> R[schema-builder.ts]\n    O --> R\n    P --> R\n    Q --> R\n\n    R --> S[Rendered JSON-LD]\n    K --> T[Rendered Meta Tags]\n\n    S --> U[Search Engine]\n    T --> U\n\n    style C fill:#e1f5fe\n    style D fill:#e1f5fe\n    style E fill:#c8e6c9\n    style F fill:#c8e6c9\n    style G fill:#c8e6c9\n    style I fill:#fff9c4\n    style J fill:#fff9c4\n    style R fill:#ffecb3\n```\n\n**Data Flow:**\n1. **Request**: User/crawler requests a page\n2. **Route**: Next.js router matches page component\n3. **Metadata Generation**: Page exports `metadata` object via Metadata API\n4. **Schema Generation**: Page renders Schema components (Server Components)\n5. **Builder Invocation**: Schema components call schema-builder functions\n6. **Validation**: Schemas validated (dev only), rendered as JSON-LD scripts\n7. **HTML Output**: Complete HTML with meta tags and structured data\n8. **Indexing**: Search engines parse and index content\n\n## Components and Interfaces\n\n### Component 1: FAQAccordion\n\n- **Purpose:** Reusable FAQ accordion UI component with integrated FAQPage schema generation\n- **Location:** `components/seo/FAQAccordion.tsx`\n- **Type:** Client Component (uses Framer Motion for animation)\n- **Interfaces:**\n  ```typescript\n  interface FAQAccordionProps {\n    faqs: FAQ[]\n    includeSchema?: boolean // Default: true\n    className?: string\n  }\n\n  interface FAQ {\n    question: string\n    answer: string\n  }\n  ```\n- **Dependencies:**\n  - `@/lib/types/content` (FAQ type)\n  - `@/components/seo/SchemaGenerator` (FAQSchema wrapper)\n  - `framer-motion` (accordion animation)\n  - `lucide-react` (ChevronDown icon)\n- **Reuses:**\n  - Existing `FAQSchema` component for schema generation\n  - Existing `buildFAQPageSchema` utility from schema-builder\n- **Behavior:**\n  - Renders collapsible FAQ items with smooth animations\n  - Automatically generates FAQPage schema if `includeSchema=true`\n  - Keyboard accessible (Enter/Space to toggle, Arrow keys to navigate)\n  - Mobile-optimized touch targets\n\n### Component 2: OG Image Generator Utility\n\n- **Purpose:** Generate and validate Open Graph image URLs for social media\n- **Location:** `lib/seo/og-image-generator.ts`\n- **Type:** Server-side utility (no React component)\n- **Interfaces:**\n  ```typescript\n  interface OGImageOptions {\n    page: 'home' | 'services' | 'web-dev' | 'mobile-dev' | 'design' | 'backend' | 'blog' | 'contact' | 'about' | 'custom'\n    customFilename?: string // For 'custom' page type\n  }\n\n  function getOGImageUrl(options: OGImageOptions): string\n  function validateOGImageExists(url: string): boolean // Dev-only check\n  ```\n- **Dependencies:**\n  - `fs` (Node.js) for file existence validation\n  - `path` for URL construction\n- **Reuses:**\n  - Base URL from `process.env.NEXT_PUBLIC_SITE_URL`\n- **Behavior:**\n  - Returns absolute OG image URL for specified page\n  - Validates image exists in development (logs warning if missing)\n  - Falls back to default logo if custom image missing\n  - Ensures URLs are properly formatted for Open Graph tags\n\n### Component 3: Glossary Page\n\n- **Purpose:** Display glossary of technical terms with structured data\n- **Location:** `app/glossar/page.tsx`\n- **Type:** Server Component (SSG)\n- **Interfaces:**\n  ```typescript\n  interface GlossaryTerm {\n    id: string\n    term: string\n    shortDefinition: string\n    fullExplanation: string\n    benefits: string[]\n    relatedTerms: { term: string; id: string }[]\n    resources?: { title: string; url: string }[]\n  }\n\n  export async function generateStaticParams(): Promise<{ term: string }[]>\n  export async function generateMetadata(): Promise<Metadata>\n  ```\n- **Dependencies:**\n  - `@/lib/content/glossary` (glossary data source)\n  - `@/lib/seo/meta-builder` (metadata generation)\n  - `@/components/content/GlossaryCard` (term card UI)\n- **Reuses:**\n  - `generatePageMetadata` for meta tag generation\n  - Existing layout and typography styles\n- **Behavior:**\n  - Renders A-Z indexed glossary with anchor navigation\n  - Generates metadata with long-tail keywords (\"Was ist React?\")\n  - Uses SSG for fast page loads and optimal SEO\n  - Links to related terms and external resources\n\n### Component 4: Comparison Article Page\n\n- **Purpose:** Detailed comparison articles (React vs Vue, Native vs Cross-Platform, etc.)\n- **Location:** `app/vergleiche/[slug]/page.tsx`\n- **Type:** Server Component (SSG)\n- **Interfaces:**\n  ```typescript\n  interface ComparisonArticle {\n    slug: string\n    title: string\n    description: string\n    publishedAt: string\n    items: {\n      name: string\n      features: Record<string, string | boolean>\n      pros: string[]\n      cons: string[]\n      useCase: string\n      recommendation: string\n    }[]\n    featureCategories: string[]\n    conclusion: string\n    relatedService: { name: string; url: string }\n  }\n\n  export async function generateStaticParams(): Promise<{ slug: string }[]>\n  export async function generateMetadata({ params }): Promise<Metadata>\n  ```\n- **Dependencies:**\n  - `@/lib/content/comparisons` (comparison data source)\n  - `@/lib/seo/meta-builder` (metadata generation)\n  - `@/components/content/ComparisonTable` (feature table UI)\n  - `@/components/seo/SchemaGenerator` (Article schema)\n- **Reuses:**\n  - `buildArticleSchema` for structured data\n  - `generatePageMetadata` with article-specific enhancements\n  - Existing Button component for CTA to service pages\n- **Behavior:**\n  - Renders interactive feature comparison table\n  - Includes pros/cons lists, use case examples, recommendations\n  - CTA links to relevant service page\n  - Article schema for SEO visibility\n  - Mobile-responsive table with horizontal scroll\n\n### Component 5: Enhanced Service Pages\n\n- **Purpose:** Add FAQ sections to existing service pages\n- **Location:** `app/services/[service]/page.tsx` (enhancement)\n- **Type:** Server Component (existing, enhanced)\n- **Interfaces:**\n  ```typescript\n  // Extend existing service page frontmatter\n  interface ServicePageFrontmatter {\n    // ... existing fields\n    faqs?: FAQ[] // NEW: Service-specific FAQs\n  }\n  ```\n- **Dependencies:**\n  - `@/lib/content/service-faqs` (service-specific FAQ data)\n  - `@/components/seo/FAQAccordion` (FAQ UI + schema)\n- **Reuses:**\n  - Existing service page structure and styling\n  - Existing metadata generation from frontmatter\n  - Existing Service schema from StructuredData component\n- **Behavior:**\n  - Renders FAQ section below service description\n  - Automatically generates FAQPage schema for service FAQs\n  - Each service has 5-7 FAQs answering common questions\n  - FAQs optimized for featured snippets\n\n### Component 6: Stats Section (AI SEO)\n\n- **Purpose:** \"About us in numbers\" section with structured data for AI search engines\n- **Location:** `components/sections/StatsSection.tsx`\n- **Type:** Client Component (for number count-up animation)\n- **Interfaces:**\n  ```typescript\n  interface Stat {\n    value: string | number\n    label: string\n    unit?: string\n    schemaProperty?: string // For Organization schema integration\n  }\n\n  interface StatsSectionProps {\n    stats: Stat[]\n    title?: string\n    includeSchema?: boolean // Add to Organization schema\n  }\n  ```\n- **Dependencies:**\n  - `framer-motion` (count-up animation)\n  - `react-intersection-observer` (trigger animation on scroll)\n- **Reuses:**\n  - Existing grid and card styles\n  - Brand colors and typography\n- **Behavior:**\n  - Displays key metrics (50+ projects, 10+ years, 4x faster, 100% satisfaction)\n  - Animates numbers when section enters viewport\n  - Optionally extends Organization schema with QuantitativeValue properties\n  - Mobile-responsive grid layout\n\n## Data Models\n\n### Model 1: FAQ Data Structure\n\n```typescript\n// lib/types/content.ts (existing, already defined)\nexport interface FAQ {\n  question: string\n  answer: string\n}\n\n// lib/content/faq-data.ts (NEW)\nexport interface FAQCollection {\n  general: FAQ[] // Homepage and /faq page\n  webDevelopment: FAQ[]\n  mobileDevelopment: FAQ[]\n  uiUxDesign: FAQ[]\n  backendSolutions: FAQ[]\n}\n\n// Example data:\nexport const faqData: FAQCollection = {\n  general: [\n    {\n      question: \"Was kostet eine professionelle Website?\",\n      answer: \"Eine professionelle Website kostet bei uns ab 2.500€. Der finale Preis hängt vom Funktionsumfang ab. Nach unserem kostenlosen 15-Minuten-Beratungsgespräch erhalten Sie ein transparentes Festpreis-Angebot.\"\n    },\n    // ... 6 more general FAQs\n  ],\n  webDevelopment: [\n    {\n      question: \"Welche Technologien nutzt ihr für Webentwicklung?\",\n      answer: \"Wir setzen auf moderne, zukunftssichere Technologien: React und Next.js für Websites, TypeScript für Type-Safety und Tailwind CSS für performantes Styling.\"\n    },\n    // ... 4-6 more web-specific FAQs\n  ],\n  // ... other service-specific FAQs\n}\n```\n\n**Storage:** TypeScript data file (`lib/content/faq-data.ts`)\n**Access Pattern:** Import and consume in FAQ page and service pages\n**Type Safety:** Strict TypeScript interfaces ensure consistency\n**Maintainability:** Centralized data source prevents duplication\n\n### Model 2: Glossary Term Structure\n\n```typescript\n// lib/types/content.ts (ENHANCE)\nexport interface GlossaryTerm {\n  id: string // Slug for URL (e.g., \"api\", \"responsive-design\")\n  term: string // Display name (e.g., \"API\", \"Responsive Design\")\n  category: 'technology' | 'design' | 'development' | 'marketing'\n  shortDefinition: string // 1 sentence for preview cards\n  fullExplanation: string // 2-3 paragraphs for detail page\n  benefits: string[] // Bullet points of advantages\n  relatedTerms: Array<{ term: string; id: string }> // Links to other glossary entries\n  resources?: Array<{ title: string; url: string }> // External links (optional)\n  keywords: string[] // For SEO and search functionality\n}\n\n// lib/content/glossary.ts (NEW)\nexport const glossaryTerms: GlossaryTerm[] = [\n  {\n    id: \"api\",\n    term: \"API (Application Programming Interface)\",\n    category: \"technology\",\n    shortDefinition: \"Eine Programmierschnittstelle ermöglicht die Kommunikation zwischen verschiedenen Softwareanwendungen.\",\n    fullExplanation: \"Eine API (Application Programming Interface) ist eine klar definierte Schnittstelle, die es verschiedenen Softwareanwendungen ermöglicht, miteinander zu kommunizieren und Daten auszutauschen...\\n\\n[2-3 paragraphs total]\",\n    benefits: [\n      \"Wiederverwendbarkeit von Funktionalitäten\",\n      \"Modulare Architektur für bessere Wartbarkeit\",\n      \"Integration von Drittanbieter-Services\"\n    ],\n    relatedTerms: [\n      { term: \"REST API\", id: \"rest-api\" },\n      { term: \"GraphQL\", id: \"graphql\" }\n    ],\n    resources: [\n      { title: \"REST API Tutorial\", url: \"https://example.com/rest\" }\n    ],\n    keywords: [\"api\", \"schnittstelle\", \"integration\", \"backend\"]\n  },\n  // ... 29+ more terms\n]\n```\n\n**Storage:** TypeScript data file with static data\n**Access Pattern:** Import entire array, filter by category or search\n**Type Safety:** Strict interface prevents missing fields\n**Scalability:** Can migrate to CMS (Contentful, Sanity) later if needed\n\n### Model 3: Comparison Article Structure\n\n```typescript\n// lib/types/content.ts (ENHANCE)\nexport interface ComparisonArticle {\n  slug: string // URL slug (e.g., \"react-vs-vue\")\n  title: string // SEO-optimized title\n  description: string // Meta description\n  publishedAt: string // ISO 8601 date\n  updatedAt?: string // For dateModified in Article schema\n  author: {\n    name: string\n    image?: string\n  }\n\n  // Items being compared (2-5 items)\n  items: Array<{\n    name: string // e.g., \"React\", \"Vue.js\"\n    logo?: string // Logo image URL\n    features: Record<string, string | boolean | number> // Feature values\n    pros: string[] // Advantages\n    cons: string[] // Disadvantages\n    useCase: string // Best use case description\n    recommendation: string // When to choose this option\n  }>\n\n  // Feature categories for table headers\n  featureCategories: Array<{\n    category: string // e.g., \"Performance\", \"Ecosystem\"\n    features: string[] // e.g., [\"Bundle Size\", \"Rendering Speed\"]\n  }>\n\n  // Article content\n  introduction: string\n  conclusion: string\n\n  // Related service CTA\n  relatedService?: {\n    name: string\n    url: string\n    cta: string\n  }\n\n  // SEO\n  keywords: string[]\n  ogImage?: string\n}\n\n// lib/content/comparisons.ts (NEW)\nexport const comparisonArticles: ComparisonArticle[] = [\n  {\n    slug: \"react-vs-vue\",\n    title: \"React vs Vue.js: Der große Framework-Vergleich 2025\",\n    description: \"Detaillierter Vergleich von React und Vue.js: Performance, Lernkurve, Ecosystem und Use Cases. Welches Framework passt zu Ihrem Projekt?\",\n    publishedAt: \"2025-01-15\",\n    author: { name: \"HEADON Team\" },\n    items: [\n      {\n        name: \"React\",\n        logo: \"/logos/react.svg\",\n        features: {\n          \"Lernkurve\": \"Mittel\",\n          \"Bundle Size\": \"42 KB (gzipped)\",\n          \"Performance\": \"Sehr hoch\",\n          \"Community\": \"Sehr groß\",\n          \"TypeScript Support\": true,\n          \"Job Market\": \"Exzellent\"\n        },\n        pros: [\n          \"Riesiges Ecosystem mit unzähligen Libraries\",\n          \"Sehr gute Job-Aussichten\",\n          \"Flexible Architektur\"\n        ],\n        cons: [\n          \"Steile Lernkurve für Anfänger\",\n          \"Viele Entscheidungen notwendig\"\n        ],\n        useCase: \"Enterprise-Anwendungen, komplexe UIs, große Teams\",\n        recommendation: \"Wählen Sie React für große, langlebige Projekte mit mehreren Entwicklern.\"\n      },\n      {\n        name: \"Vue.js\",\n        logo: \"/logos/vue.svg\",\n        features: {\n          \"Lernkurve\": \"Niedrig\",\n          \"Bundle Size\": \"34 KB (gzipped)\",\n          \"Performance\": \"Sehr hoch\",\n          \"Community\": \"Groß\",\n          \"TypeScript Support\": true,\n          \"Job Market\": \"Gut\"\n        },\n        pros: [\n          \"Einfache Lernkurve, schneller Einstieg\",\n          \"Hervorragende Dokumentation\",\n          \"Weniger Boilerplate-Code\"\n        ],\n        cons: [\n          \"Kleineres Ecosystem als React\",\n          \"Weniger Enterprise-Adoption\"\n        ],\n        useCase: \"Prototypen, mittelgroße Anwendungen, Solo-Entwickler\",\n        recommendation: \"Wählen Sie Vue für schnelle Entwicklung und einfache Wartung.\"\n      }\n    ],\n    featureCategories: [\n      {\n        category: \"Technische Aspekte\",\n        features: [\"Lernkurve\", \"Bundle Size\", \"Performance\"]\n      },\n      {\n        category: \"Ecosystem & Support\",\n        features: [\"Community\", \"TypeScript Support\", \"Job Market\"]\n      }\n    ],\n    introduction: \"React und Vue.js sind zwei der beliebtesten JavaScript-Frameworks im Jahr 2025...\",\n    conclusion: \"Beide Frameworks sind exzellente Optionen. Die Wahl hängt von Ihrem Projekt ab...\",\n    relatedService: {\n      name: \"Web Development\",\n      url: \"/services/web-development\",\n      cta: \"Website mit React oder Vue entwickeln lassen\"\n    },\n    keywords: [\"react vs vue\", \"javascript framework vergleich\", \"react oder vue 2025\"]\n  },\n  // ... 4+ more comparison articles\n]\n```\n\n**Storage:** TypeScript data files for structured comparisons\n**Access Pattern:** Import array, filter by slug for dynamic routes\n**Type Safety:** Strict interface ensures all fields present\n**Extensibility:** Easy to add new comparisons or features\n\n### Model 4: Open Graph Image Metadata\n\n```typescript\n// lib/types/seo.ts (NEW)\nexport interface OGImageMetadata {\n  page: string // Page identifier\n  url: string // Absolute URL to image\n  width: number // Image width (1200)\n  height: number // Image height (630)\n  alt: string // Alt text for accessibility\n  fileSize?: number // File size in bytes (< 100KB)\n  format: 'jpg' | 'png' | 'webp' // Image format\n}\n\n// lib/seo/og-images.ts (NEW)\nexport const ogImages: Record<string, OGImageMetadata> = {\n  home: {\n    page: \"home\",\n    url: \"https://headon.pro/og-images/home.jpg\",\n    width: 1200,\n    height: 630,\n    alt: \"HEADON.pro - Full-Service Digitalagentur für Web & App Entwicklung\",\n    format: \"jpg\"\n  },\n  services: {\n    page: \"services\",\n    url: \"https://headon.pro/og-images/services.jpg\",\n    width: 1200,\n    height: 630,\n    alt: \"HEADON.pro Services - Web, Mobile, Design & Backend\",\n    format: \"jpg\"\n  },\n  // ... more pages\n}\n```\n\n**Storage:** TypeScript configuration object\n**Access Pattern:** Import and lookup by page key\n**Type Safety:** Ensures correct image dimensions and URLs\n**Validation:** Dev-only validation checks image file existence\n\n## Error Handling\n\n### Error Scenario 1: Missing Schema Data\n\n- **Description:** FAQ, glossary, or comparison data is undefined or empty\n- **Handling:**\n  - Schema builders return `null` if data is invalid (existing behavior in buildFAQPageSchema)\n  - SchemaGenerator component checks for null and skips rendering\n  - Log warning in development: `console.warn('No FAQs provided to buildFAQPageSchema')`\n  - Fail gracefully: Page renders without schema rather than crashing\n- **User Impact:** Page renders normally, but missing structured data means no rich snippets in search results\n\n### Error Scenario 2: Invalid Metadata\n\n- **Description:** Metadata generation fails (e.g., title is empty, image URL is malformed)\n- **Handling:**\n  - meta-builder validates required fields before returning Metadata object\n  - Falls back to root layout metadata if page metadata is invalid\n  - Truncation functions handle edge cases (empty strings, single words)\n  - Logs error in development: `console.error('Invalid metadata for page:', pageName)`\n- **User Impact:** Page displays with default site-wide metadata instead of page-specific metadata\n\n### Error Scenario 3: OG Image Not Found\n\n- **Description:** Referenced OG image file doesn't exist at specified path\n- **Handling:**\n  - Development: `validateOGImageExists()` checks file existence, logs warning\n  - Production: No validation (performance), falls back to default logo if image fails to load\n  - Browser handles missing images gracefully (shows placeholder or nothing)\n  - Social media platforms fall back to first image on page or site logo\n- **User Impact:** Social media shares show default logo instead of custom OG image; reduced click-through rate but no broken functionality\n\n### Error Scenario 4: Schema Validation Failure\n\n- **Description:** Generated schema is malformed or missing required fields (@context, @type)\n- **Handling:**\n  - `validateSchema()` in SchemaGenerator checks structure before rendering\n  - Returns false if invalid, component returns null (no rendering)\n  - Logs warning: `console.warn('[SchemaGenerator] Schema missing @context:', schema)`\n  - Page renders normally without the invalid schema\n- **User Impact:** Search engines don't receive structured data for that specific schema, but page remains functional\n\n### Error Scenario 5: Build-Time Data Loading Failure\n\n- **Description:** Static data files (glossary.ts, comparisons.ts) fail to import or parse\n- **Handling:**\n  - TypeScript compilation catches syntax errors\n  - Runtime: try/catch around data imports in generateStaticParams()\n  - Falls back to empty array if import fails\n  - Logs error: `console.error('Failed to load glossary data:', error)`\n  - Page returns 404 instead of crashing build\n- **User Impact:** Glossary or comparison pages return 404 until data is fixed; other pages unaffected\n\n### Error Scenario 6: Keyword Density Analysis Failure\n\n- **Description:** Keyword analyzer utility throws error on malformed HTML or missing content\n- **Handling:**\n  - Only used in development for analysis, not in production\n  - Wrapped in try/catch in analysis scripts\n  - Returns default values (0% density) if analysis fails\n  - Logs detailed error for debugging\n- **User Impact:** No user impact (dev-only tool); developers see warning but can continue work\n\n## Testing Strategy\n\n### Unit Testing\n\n**Approach:** Playwright unit tests for utility functions and schema builders\n\n**Key Components to Test:**\n\n1. **Schema Builders** (`lib/seo/schema-builder.ts`)\n   - `buildFAQPageSchema()`: Validates output matches FAQPage schema spec\n   - `buildPersonSchema()`: Checks all fields are properly formatted\n   - `buildBreadcrumbListSchema()`: Ensures positions start at 1, URLs are absolute\n   - Edge cases: Empty arrays, missing optional fields, special characters in text\n\n2. **Meta Builders** (`lib/seo/meta-builder.ts`)\n   - `truncateTitle()`: Verifies truncation at word boundaries, 60 char limit\n   - `truncateDescription()`: Checks 160 char limit, ellipsis placement\n   - `buildMetaTags()`: Validates Open Graph structure, canonical URLs, image dimensions\n   - Edge cases: Very short strings, strings without spaces, special characters\n\n3. **OG Image Generator** (`lib/seo/og-image-generator.ts`)\n   - `getOGImageUrl()`: Returns correct absolute URLs for each page type\n   - `validateOGImageExists()`: Correctly identifies missing files in development\n   - Edge cases: Custom filenames, malformed paths, missing page types\n\n4. **Keyword Analyzer** (`lib/seo/keyword-analyzer.ts`)\n   - Calculates keyword density accurately\n   - Handles HTML entities and special characters\n   - Edge cases: Empty content, very short content, case sensitivity\n\n**Test Framework:** Playwright (already configured in project)\n**Coverage Goal:** 80%+ for utility functions\n**Run Command:** `pnpm test:unit` (to be added)\n\n### Integration Testing\n\n**Approach:** Test schema generation in context of actual page components\n\n**Key Flows to Test:**\n\n1. **FAQ Page Rendering**\n   - Test: Navigate to `/faq`, verify FAQPage schema in HTML\n   - Assertions:\n     - FAQPage schema exists in HTML with @type \"FAQPage\"\n     - All FAQ questions and answers present in schema\n     - Page metadata includes \"FAQ\" in title\n     - Accordion UI renders and is interactive\n   - Tools: Playwright E2E test\n\n2. **Service Page with FAQs**\n   - Test: Navigate to `/services/web-development`, verify FAQ section + schema\n   - Assertions:\n     - Service page renders successfully\n     - FAQ section appears below service description\n     - FAQPage schema includes service-specific questions\n     - Both Service schema (from StructuredData) and FAQPage schema present\n   - Tools: Playwright E2E test\n\n3. **Glossary Term Page**\n   - Test: Navigate to `/glossar/api`, verify content and metadata\n   - Assertions:\n     - Term definition renders correctly\n     - Metadata includes term name in title\n     - Related terms link to other glossary pages\n     - Proper heading hierarchy (H1, H2, H3)\n   - Tools: Playwright E2E test\n\n4. **Comparison Article Page**\n   - Test: Navigate to `/vergleiche/react-vs-vue`, verify comparison table + schema\n   - Assertions:\n     - Comparison table renders with all features\n     - Pros/cons lists display correctly\n     - Article schema includes headline, author, datePublished\n     - CTA button links to related service page\n   - Tools: Playwright E2E test\n\n5. **Multiple Schemas Per Page**\n   - Test: Homepage should render Organization, LocalBusiness, WebSite schemas\n   - Assertions:\n     - Exactly 3+ JSON-LD scripts present in HTML\n     - Each has unique @type\n     - All schemas validate against schema.org spec\n   - Tools: Playwright + schema validator API call\n\n**Test Framework:** Playwright\n**Coverage Goal:** All new pages and enhanced pages tested\n**Run Command:** `pnpm test:integration` or `pnpm test`\n\n### End-to-End Testing\n\n**Approach:** Simulate real user journeys and search engine crawler behavior\n\n**User Scenarios to Test:**\n\n1. **SEO Crawler Simulation**\n   - **Scenario:** Search engine bot crawls homepage\n   - **Steps:**\n     1. Fetch homepage HTML (user-agent: Googlebot)\n     2. Parse and count JSON-LD scripts\n     3. Validate each schema against schema.org\n     4. Check meta tags (title length, description length, og:image)\n     5. Verify H1 tag exists and contains keywords\n   - **Expected Results:**\n     - 4+ valid JSON-LD schemas\n     - Meta tags within optimal lengths\n     - Single H1 tag with primary keywords\n     - Open Graph image URL returns 200 status\n   - **Tools:** Playwright with custom Googlebot user-agent\n\n2. **FAQ User Journey**\n   - **Scenario:** User searches Google, finds FAQ snippet, clicks through\n   - **Steps:**\n     1. Navigate to FAQ page\n     2. Verify FAQ schema in HTML\n     3. Click accordion item to expand\n     4. Read answer content\n     5. Click related link to service page\n   - **Expected Results:**\n     - FAQ page loads in < 2 seconds (LCP)\n     - Accordion animation smooth (60fps)\n     - Service page link navigates correctly\n     - No layout shift during accordion animation (CLS < 0.1)\n   - **Tools:** Playwright with performance profiling\n\n3. **Social Media Share**\n   - **Scenario:** User shares homepage on Twitter/Facebook\n   - **Steps:**\n     1. Fetch homepage Open Graph metadata\n     2. Verify og:image URL is absolute and accessible\n     3. Check image dimensions (1200x630)\n     4. Verify og:title, og:description present\n   - **Expected Results:**\n     - OG image returns 200 status\n     - Image file size < 100KB\n     - Metadata matches expected values\n     - No CORS issues for image loading\n   - **Tools:** Playwright + Open Graph validator API\n\n4. **Content Hub Navigation**\n   - **Scenario:** User browses glossary, clicks related term, reads comparison article\n   - **Steps:**\n     1. Navigate to `/glossar`\n     2. Click glossary term (e.g., \"React\")\n     3. Read term definition\n     4. Click related term link\n     5. Navigate to comparison article\n     6. Click CTA to service page\n   - **Expected Results:**\n     - All pages load quickly (< 2s LCP)\n     - Internal links work correctly\n     - No broken links or 404 errors\n     - Breadcrumb navigation reflects current location\n   - **Tools:** Playwright with link crawler\n\n5. **Mobile SEO Experience**\n   - **Scenario:** Mobile user searches Google, visits site\n   - **Steps:**\n     1. Navigate to homepage on mobile viewport (375x667)\n     2. Check mobile-specific metadata (viewport tag)\n     3. Verify tap targets are 48x48px minimum\n     4. Test FAQ accordion on touch device\n     5. Check Core Web Vitals\n   - **Expected Results:**\n     - Mobile-friendly meta tags present\n     - All interactive elements tappable\n     - No horizontal scrolling\n     - FID < 100ms, CLS < 0.1, LCP < 2.5s\n   - **Tools:** Playwright with mobile emulation + Lighthouse\n\n**Test Framework:** Playwright with custom helpers\n**Coverage Goal:** 5 critical user journeys tested\n**Run Command:** `pnpm test:e2e`\n**CI/CD Integration:** Run E2E tests on PR to main branch\n\n### Validation Strategy\n\n**Development Validation:**\n- **Pre-commit hook:** Run TypeScript type check on SEO files\n- **Build validation:** Ensure all pages build successfully with new schemas\n- **Schema validation:** Runtime validation in development (validateSchema in SchemaGenerator)\n- **Lighthouse audit:** Run on localhost before committing major changes\n\n**Production Validation:**\n- **Google Rich Results Test:** Validate structured data after deployment\n- **Schema.org Validator:** Verify JSON-LD syntax is correct\n- **Google Search Console:** Monitor coverage errors and rich snippets\n- **Meta Tags Preview:** Use metatags.io to verify Open Graph rendering\n\n**Monitoring & Alerts:**\n- **Weekly:** Check Google Search Console for schema errors\n- **Bi-weekly:** Run Lighthouse audits on production URLs\n- **Monthly:** Review keyword rankings, organic traffic trends\n- **Alerts:** Set up notifications for sudden ranking drops or schema errors\n",
  "fileStats": {
    "size": 39583,
    "lines": 991,
    "lastModified": "2025-10-26T13:33:10.722Z"
  },
  "comments": []
}
