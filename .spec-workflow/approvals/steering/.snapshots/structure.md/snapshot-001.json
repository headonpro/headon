{
  "id": "snapshot_1759340514772_aum0y7fsr",
  "approvalId": "approval_1759340514770_x29e7cuy2",
  "approvalTitle": "Structure Document (structure.md) - Codebase Organization",
  "version": 1,
  "timestamp": "2025-10-01T17:41:54.772Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Project Structure\n\n## Directory Organization\n\n```\nheadon/\n├── app/                        # Next.js 15 App Router (Pages & Routes)\n│   ├── (routes)/              # Page directories\n│   │   ├── about/            # About page\n│   │   ├── blog/             # Blog listing\n│   │   ├── contact/          # Contact page with multi-step form\n│   │   ├── portfolio/        # Portfolio showcase\n│   │   ├── services/         # Services overview\n│   │   ├── imprint/          # Legal: Impressum\n│   │   └── privacy/          # Legal: Datenschutz\n│   ├── api/                  # API Routes (Server-side)\n│   │   ├── contact/          # Form submission endpoint\n│   │   └── health/           # Health check for deployment\n│   ├── layout.tsx            # Root layout with Header/Footer\n│   ├── page.tsx              # Homepage\n│   ├── not-found.tsx         # 404 error page\n│   ├── robots.ts             # robots.txt configuration\n│   ├── sitemap.ts            # sitemap.xml generation\n│   └── globals.css           # Global styles\n│\n├── components/               # Reusable React Components\n│   ├── ui/                  # shadcn/ui Primitives (Radix-based)\n│   │   ├── button.tsx       # Button component with variants\n│   │   ├── input.tsx        # Form input component\n│   │   ├── label.tsx        # Form label component\n│   │   ├── select.tsx       # Select dropdown component\n│   │   ├── accordion.tsx    # Collapsible content\n│   │   ├── dialog.tsx       # Modal dialog\n│   │   └── ...              # Other UI primitives\n│   ├── layout/              # Layout Components\n│   │   ├── Header.tsx       # Global navigation header\n│   │   └── Footer.tsx       # Global footer\n│   ├── sections/            # Page Section Components\n│   │   ├── HeroSection.tsx\n│   │   ├── ServicesContent.tsx\n│   │   ├── ProcessSection.tsx\n│   │   ├── PricingSection.tsx\n│   │   ├── SuccessStoriesSection.tsx\n│   │   ├── TechnologyTrustSection.tsx\n│   │   ├── TrustPersonalitySection.tsx\n│   │   ├── ProblemSolutionSection.tsx\n│   │   ├── KIAdvantageSection.tsx\n│   │   ├── FinalCTASection.tsx\n│   │   ├── AboutContent.tsx\n│   │   ├── PortfolioContent.tsx\n│   │   ├── BlogContent.tsx\n│   │   └── IndustryNavigator.tsx\n│   ├── contact/             # Contact-specific Components\n│   │   ├── CalendlyWidget.tsx\n│   │   └── FileUploadZone.tsx\n│   ├── seo/                 # SEO Components\n│   │   ├── Breadcrumbs.tsx\n│   │   ├── PageHeader.tsx\n│   │   └── StructuredData.tsx\n│   ├── showcase/            # Premium Showcase Components\n│   │   ├── PhoneMockup3D.tsx\n│   │   ├── PremiumShowcase.tsx\n│   │   ├── BeforeAfterSlider.tsx\n│   │   └── placeholders.tsx\n│   └── icons/               # Custom Icon Components\n│       └── AnimatedRobot.tsx\n│\n├── lib/                      # Utilities & Configuration\n│   ├── supabase.ts          # Supabase client initialization\n│   ├── utils.ts             # Utility functions (cn, etc.)\n│   └── validations.ts       # Zod validation schemas\n│\n├── types/                    # TypeScript Type Definitions\n│   └── supabase.ts          # Database type definitions\n│\n├── public/                   # Static Assets (Served as-is)\n│   ├── icons/               # Favicons and app icons\n│   ├── images/              # Images and graphics\n│   └── headon-logo.svg      # Brand logo\n│\n├── deploy/                   # Deployment Configuration\n│   └── nginx/               # Nginx reverse proxy config\n│\n├── scripts/                  # Build & Automation Scripts\n│\n├── docs/                     # Documentation\n│\n├── .spec-workflow/          # Spec Workflow System\n│   ├── steering/            # Project steering documents\n│   ├── specs/               # Feature specifications\n│   ├── templates/           # Document templates\n│   └── approvals/           # Approval tracking\n│\n├── .github/                  # GitHub Configuration\n│   └── workflows/           # CI/CD GitHub Actions\n│\n├── package.json             # Dependencies & Scripts\n├── pnpm-lock.yaml           # pnpm lockfile\n├── tsconfig.json            # TypeScript configuration\n├── next.config.ts           # Next.js configuration\n├── tailwind.config.ts       # Tailwind CSS configuration\n├── postcss.config.mjs       # PostCSS configuration\n├── components.json          # shadcn/ui configuration\n├── .eslintrc.json           # ESLint configuration\n├── .prettierrc              # Prettier configuration\n├── CLAUDE.md                # Claude Code instructions\n└── README.md                # Project documentation\n```\n\n## Naming Conventions\n\n### Files\n\n#### Pages & Routes (app/)\n- **Route Folders**: `kebab-case` (e.g., `contact/`, `about/`)\n- **Page Components**: `page.tsx` (Next.js convention)\n- **Layout Components**: `layout.tsx` (Next.js convention)\n- **Metadata Files**: `metadata.ts` (separate metadata exports)\n- **Route Handlers**: `route.ts` (API route handlers)\n- **Special Files**: `not-found.tsx`, `error.tsx`, `loading.tsx`\n\n#### Components (components/)\n- **Component Files**: `PascalCase.tsx` (e.g., `HeroSection.tsx`, `Button.tsx`)\n- **Multi-word Components**: `PascalCase` with no separators (e.g., `MultiStepForm.tsx`)\n- **Client Components**: Explicit `'use client'` directive at top\n- **Server Components**: No directive (default in Next.js 15)\n\n#### Utilities & Libraries (lib/)\n- **Utility Files**: `camelCase.ts` (e.g., `utils.ts`, `validations.ts`)\n- **Client Files**: `camelCase.ts` (e.g., `supabase.ts`)\n\n#### Types (types/)\n- **Type Definition Files**: `camelCase.ts` (e.g., `supabase.ts`)\n\n#### Configuration Files\n- **Config Files**: `kebab-case.config.ts` (e.g., `next.config.ts`)\n- **RC Files**: `.{tool}rc` or `.{tool}rc.json`\n\n### Code\n\n#### TypeScript Types & Interfaces\n- **Interfaces**: `PascalCase` (e.g., `ButtonProps`, `FormData`)\n- **Types**: `PascalCase` (e.g., `Variant`, `Size`)\n- **Type Props Suffix**: Component props end with `Props` (e.g., `HeroSectionProps`)\n- **Enums**: `PascalCase` for name, `SCREAMING_SNAKE_CASE` for values\n\n#### Functions & Methods\n- **Functions**: `camelCase` (e.g., `getUserData`, `validateForm`)\n- **React Components**: `PascalCase` (e.g., `Button`, `HeroSection`)\n- **Event Handlers**: `handle{Event}` prefix (e.g., `handleSubmit`, `handleClick`)\n- **Boolean Functions**: `is/has/should` prefix (e.g., `isValid`, `hasError`)\n\n#### Constants\n- **Global Constants**: `SCREAMING_SNAKE_CASE` (e.g., `MAX_FILE_SIZE`, `API_ENDPOINT`)\n- **Component Constants**: `camelCase` for local, `SCREAMING_SNAKE_CASE` for exports\n- **Config Objects**: `camelCase` (e.g., `buttonVariants`, `formConfig`)\n\n#### Variables\n- **Variables**: `camelCase` (e.g., `userName`, `isLoading`, `formData`)\n- **React State**: `camelCase` (e.g., `isOpen`, `selectedOption`)\n- **Props Destructuring**: `camelCase` matching interface definition\n\n#### CSS Classes (Tailwind)\n- **Class Utilities**: Tailwind utility classes (e.g., `flex`, `justify-center`)\n- **Custom Classes**: `kebab-case` in globals.css (e.g., `custom-scrollbar`)\n- **CSS Variables**: `--kebab-case` (e.g., `--font-outfit`, `--primary-600`)\n\n## Import Patterns\n\n### Import Order (Enforced by ESLint + Prettier)\n\n1. **React/Next.js Core**\n   ```typescript\n   import React from 'react'\n   import { useState, useEffect } from 'react'\n   import type { Metadata } from 'next'\n   import Link from 'next/link'\n   import Image from 'next/image'\n   ```\n\n2. **External Dependencies**\n   ```typescript\n   import { motion } from 'framer-motion'\n   import { useForm } from 'react-hook-form'\n   import { zodResolver } from '@hookform/resolvers/zod'\n   import { z } from 'zod'\n   ```\n\n3. **Internal Components (Absolute Imports via @/)**\n   ```typescript\n   import { Button } from '@/components/ui/button'\n   import Header from '@/components/layout/Header'\n   import HeroSection from '@/components/sections/HeroSection'\n   ```\n\n4. **Utilities & Libraries**\n   ```typescript\n   import { cn } from '@/lib/utils'\n   import { createClient } from '@/lib/supabase'\n   ```\n\n5. **Types**\n   ```typescript\n   import type { Database } from '@/types/supabase'\n   ```\n\n6. **Styles (Last)**\n   ```typescript\n   import './globals.css'\n   import styles from './component.module.css'\n   ```\n\n### Module Organization\n\n#### Absolute Imports\n- **Path Alias**: `@/` maps to project root\n- **Usage**: All internal imports use `@/` prefix\n- **Example**: `import { Button } from '@/components/ui/button'`\n- **Configuration**: Defined in `tsconfig.json` paths\n\n#### Relative Imports\n- **Avoided**: Minimize relative imports except for co-located files\n- **Exception**: `./metadata.ts` in same directory as `page.tsx`\n\n#### Barrel Exports\n- **Not Used**: Direct imports preferred over index files\n- **Rationale**: Better tree-shaking, clearer dependencies\n- **Exception**: `@/components/ui` from shadcn (auto-generated)\n\n## Code Structure Patterns\n\n### Component File Organization\n\n```typescript\n// 1. Imports\n'use client' // If client component\nimport React from 'react'\nimport { motion } from 'framer-motion'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\n\n// 2. Type Definitions\ninterface ComponentProps {\n  title: string\n  variant?: 'default' | 'secondary'\n  className?: string\n}\n\n// 3. Constants (outside component for stability)\nconst ANIMATION_VARIANTS = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1 }\n}\n\n// 4. Component Implementation\nexport default function Component({\n  title,\n  variant = 'default',\n  className\n}: ComponentProps) {\n  // 4a. Hooks (top of component)\n  const [isActive, setIsActive] = React.useState(false)\n\n  // 4b. Derived State\n  const computedClass = cn('base-class', className)\n\n  // 4c. Event Handlers\n  const handleClick = () => {\n    setIsActive(true)\n  }\n\n  // 4d. Return JSX\n  return (\n    <motion.div\n      variants={ANIMATION_VARIANTS}\n      className={computedClass}\n      onClick={handleClick}\n    >\n      <h2>{title}</h2>\n      <Button variant={variant}>Click Me</Button>\n    </motion.div>\n  )\n}\n\n// 5. Named Exports (if needed)\nexport { type ComponentProps }\n```\n\n### API Route Organization\n\n```typescript\n// app/api/[route]/route.ts\nimport { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase'\nimport { z } from 'zod'\n\n// 1. Validation Schema\nconst requestSchema = z.object({\n  email: z.string().email(),\n  message: z.string().min(10)\n})\n\n// 2. Route Handler\nexport async function POST(request: NextRequest) {\n  try {\n    // 2a. Parse and Validate\n    const body = await request.json()\n    const validated = requestSchema.parse(body)\n\n    // 2b. Business Logic\n    const supabase = createClient()\n    const { data, error } = await supabase\n      .from('contacts')\n      .insert(validated)\n\n    // 2c. Error Handling\n    if (error) throw error\n\n    // 2d. Success Response\n    return NextResponse.json({ success: true, data })\n  } catch (error) {\n    // 2e. Error Response\n    return NextResponse.json(\n      { success: false, error: 'Invalid request' },\n      { status: 400 }\n    )\n  }\n}\n```\n\n### Page Structure\n\n```typescript\n// app/[route]/page.tsx\nimport type { Metadata } from 'next'\nimport HeroSection from '@/components/sections/HeroSection'\nimport FeatureSection from '@/components/sections/FeatureSection'\nimport CTASection from '@/components/sections/CTASection'\n\n// 1. Metadata Export (Server-side only)\nexport const metadata: Metadata = {\n  title: 'Page Title',\n  description: 'Page description'\n}\n\n// 2. Page Component (Server Component by default)\nexport default function Page() {\n  return (\n    <>\n      <HeroSection />\n      <FeatureSection />\n      <CTASection />\n    </>\n  )\n}\n```\n\n### Utility File Organization\n\n```typescript\n// lib/utils.ts\nimport { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\n// 1. Primary Utility\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// 2. Helper Functions\nexport function formatDate(date: Date): string {\n  return new Intl.DateTimeFormat('de-DE').format(date)\n}\n\n// 3. Type Guards\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string'\n}\n```\n\n## Code Organization Principles\n\n### 1. Component Composition\n- **Single Responsibility**: Each component has one clear purpose\n- **Composition over Inheritance**: Build complex UIs from simple components\n- **Props-based Configuration**: Behavior controlled via props, not internal state\n- **Server Components by Default**: Only use `'use client'` when necessary\n\n### 2. Type Safety\n- **TypeScript Strict Mode**: All code must pass strict type checking\n- **Explicit Return Types**: Functions declare return types\n- **Props Interfaces**: All components have typed props\n- **Runtime Validation**: Zod schemas for external data\n\n### 3. Performance Optimization\n- **Code Splitting**: Lazy load non-critical components\n- **Server Components**: Reduce JavaScript bundle size\n- **Static Generation**: Pre-render pages at build time when possible\n- **Image Optimization**: Use Next.js Image component\n\n### 4. Maintainability\n- **Consistent Patterns**: Follow established conventions\n- **Self-Documenting Code**: Clear names over comments\n- **Minimal Complexity**: Avoid clever code, prefer explicit\n- **Testable Structure**: Components designed for testing\n\n## Module Boundaries\n\n### Core Application vs Features\n- **Core** (`app/layout.tsx`, `components/layout`): Global layout and navigation\n- **Features** (`app/[route]`, `components/sections`): Page-specific functionality\n- **Shared UI** (`components/ui`): Reusable UI primitives\n- **Utilities** (`lib/`): Cross-cutting concerns\n\n### Public API vs Internal\n- **Public**: Exported components, types, and utilities\n- **Internal**: Helper functions, private components (not exported)\n- **Convention**: Only export what's intended for reuse\n\n### Client vs Server\n- **Server Components** (default): Data fetching, static rendering\n- **Client Components** (`'use client'`): Interactivity, hooks, browser APIs\n- **Boundary Rule**: Server components can import client components, not vice versa\n\n### Feature Isolation\n- **Route-specific**: Components in `app/[route]` are scoped to that route\n- **Shared sections**: `components/sections` for reusable page sections\n- **No cross-dependencies**: Routes don't import from other routes\n\n## Code Size Guidelines\n\n### File Size\n- **Component Files**: ≤ 300 lines (ideal: 100-200)\n- **Page Files**: ≤ 200 lines (should mostly compose sections)\n- **Utility Files**: ≤ 400 lines (consider splitting if larger)\n- **Type Definition Files**: No hard limit (generated files exempt)\n\n### Function Size\n- **Component Functions**: ≤ 100 lines (ideal: 20-50)\n- **Utility Functions**: ≤ 50 lines (ideal: 5-20)\n- **Event Handlers**: ≤ 20 lines (extract complex logic)\n- **JSX Returns**: ≤ 100 lines (extract to sub-components if larger)\n\n### Complexity Limits\n- **Cyclomatic Complexity**: ≤ 10 per function\n- **Nesting Depth**: ≤ 4 levels\n- **Props Count**: ≤ 8 props per component (use composition or config objects)\n- **Conditional Rendering**: ≤ 3 nested ternaries (prefer early returns or variables)\n\n### When to Split\n- **Extract Component**: When JSX block is reused or exceeds 50 lines\n- **Extract Hook**: When stateful logic is reused across components\n- **Extract Utility**: When function is pure and reusable\n- **Extract Section**: When page component exceeds 200 lines\n\n## SEO Structure\n\n### Metadata Organization\n```typescript\n// app/[route]/metadata.ts (separate file)\nexport const metadata = {\n  title: 'Page Title',\n  description: 'Description',\n  openGraph: { ... }\n}\n\n// app/[route]/page.tsx\nexport { metadata } from './metadata'\n```\n\n### SEO Component Pattern\n- **Breadcrumbs**: `components/seo/Breadcrumbs.tsx`\n- **Structured Data**: `components/seo/StructuredData.tsx`\n- **Page Headers**: `components/seo/PageHeader.tsx`\n- **Usage**: Imported into page components\n\n## Documentation Standards\n\n### Code Documentation\n\n#### Component Documentation\n```typescript\n/**\n * Primary button component with multiple variants\n *\n * @example\n * ```tsx\n * <Button variant=\"primary\" size=\"lg\">Click Me</Button>\n * ```\n */\nexport function Button({ ... }) { ... }\n```\n\n#### Function Documentation\n```typescript\n/**\n * Merges Tailwind CSS classes intelligently\n *\n * @param inputs - Class values to merge\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]): string { ... }\n```\n\n### README Standards\n- **Project Root**: `README.md` with setup instructions\n- **Major Modules**: No module-level READMEs (use CLAUDE.md instead)\n- **Documentation**: `docs/` folder for guides and architecture docs\n\n### Inline Comments\n- **Avoid Obvious Comments**: Code should be self-explanatory\n- **Explain Why, Not What**: Comments explain reasoning, not mechanics\n- **Complex Logic**: Add comments for non-trivial algorithms\n- **TODOs**: Format as `// TODO: description` with GitHub issue reference\n\n### TypeScript as Documentation\n- **Types First**: Types serve as primary documentation\n- **JSDoc for Public APIs**: Add JSDoc to exported functions/components\n- **No Redundant Comments**: If types are clear, comments are optional\n\n## Build Output Structure\n\n```\n.next/                          # Next.js Build Output\n├── cache/                     # Build cache\n├── server/                    # Server-side code\n│   ├── app/                  # Compiled pages\n│   └── chunks/               # Code chunks\n├── static/                    # Static assets\n│   ├── chunks/               # JavaScript chunks\n│   ├── css/                  # Compiled CSS\n│   └── media/                # Optimized images\n└── standalone/                # Standalone deployment bundle\n    ├── node_modules/         # Production dependencies only\n    ├── .next/                # Optimized build\n    └── server.js             # Production server\n```\n\n### Standalone Output\n- **Purpose**: Optimized for Docker containers\n- **Size**: Minimal (~50-100MB vs 500MB+ with full node_modules)\n- **Usage**: Production deployment only\n- **Configuration**: `next.config.ts` with `output: 'standalone'`\n",
  "fileStats": {
    "size": 18884,
    "lines": 544,
    "lastModified": "2025-10-01T17:41:37.741Z"
  },
  "comments": []
}
