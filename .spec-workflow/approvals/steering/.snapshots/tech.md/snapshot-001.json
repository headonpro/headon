{
  "id": "snapshot_1759340357813_b1ss3dyzg",
  "approvalId": "approval_1759340357811_fwxxmuu1z",
  "approvalTitle": "Tech Document (tech.md) - Technology Stack & Architecture",
  "version": 1,
  "timestamp": "2025-10-01T17:39:17.813Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack\n\n## Project Type\n**Modern Web Application** - Server-side rendered (SSR) marketing website with dynamic client interactions, optimized for performance and SEO. Built as a production-ready template for marketing and creative agencies.\n\n## Core Technologies\n\n### Primary Language(s)\n- **Language**: TypeScript 5.9.2\n- **Runtime**: Node.js v22.18.0 (managed via NVM)\n- **Target**: ES2020\n- **Strict Mode**: Enabled with comprehensive type checking\n- **Language-specific tools**:\n  - **pnpm** v10.15.0 (enforced package manager)\n  - **tsx/tsc** for TypeScript compilation\n  - **Next.js Compiler** for production builds\n\n### Key Dependencies/Libraries\n\n#### Frontend Framework\n- **Next.js** 15.5.2: React framework with App Router, SSR, SSG, and ISR capabilities\n- **React** 19.1.1: UI library for component-based architecture\n- **React DOM** 19.1.1: React renderer for web\n\n#### Styling & UI Components\n- **Tailwind CSS** 4.1.13: Utility-first CSS framework\n- **shadcn/ui** 3.2.1: Component library built on Radix UI\n- **Radix UI**: Headless, accessible UI primitives\n  - Accordion, Dialog, Label, Select, Slot components\n- **class-variance-authority** 0.7.1: Type-safe class variants\n- **tailwind-merge** 3.3.1: Smart Tailwind class merging\n- **tailwindcss-animate** 1.0.7: Animation utilities\n\n#### Animation & Interaction\n- **Framer Motion** 12.23.12: Production-ready animation library\n- **react-intersection-observer** 9.16.0: Scroll-triggered animations\n- **vaul** 1.1.2: Drawer component library\n\n#### Forms & Validation\n- **React Hook Form** 7.62.0: Performant form state management\n- **Zod** 4.1.5: TypeScript-first schema validation\n- **@hookform/resolvers** 5.2.1: Form validation integrations\n- **react-dropzone** 14.3.8: File upload handling\n\n#### Backend & Database\n- **Supabase JS** 2.57.2: Backend-as-a-Service client\n- **@supabase/ssr** 0.7.0: SSR-compatible Supabase client\n- **@supabase/auth-helpers-nextjs** 0.10.0: Next.js authentication helpers\n\n#### Icons & Assets\n- **Lucide React** 0.542.0: Modern icon library\n\n#### Notifications & Feedback\n- **Sonner** 2.0.7: Toast notification system\n\n#### Email Integration\n- **Resend** 6.1.1: Transactional email API\n\n#### Performance Monitoring\n- **web-vitals** 5.1.0: Core Web Vitals tracking\n\n### Application Architecture\n\n**Hybrid Architecture** combining:\n1. **Server-Side Rendering (SSR)**: Dynamic pages with real-time data\n2. **Static Site Generation (SSG)**: Pre-rendered marketing pages\n3. **API Routes**: Backend endpoints for form processing and data operations\n4. **Client Components**: Interactive UI elements with React hooks\n\n**Component Hierarchy**:\n```\napp/layout.tsx (Root Layout)\n├── Server Components (Data Fetching)\n├── Client Components ('use client' directive)\n│   ├── Interactive Forms\n│   ├── Animations\n│   └── User Interactions\n└── API Routes (/api/*)\n```\n\n**Rendering Strategy**:\n- **Server Components by default**: Reduced JavaScript bundle\n- **Client Components for interactivity**: Forms, animations, state\n- **Edge Runtime capable**: Fast global distribution\n- **Metadata API**: Type-safe SEO optimization\n\n### Data Storage\n\n#### Primary Storage\n- **Supabase PostgreSQL**: Relational database for structured data\n- **Row Level Security (RLS)**: Database-level security policies\n- **Real-time subscriptions**: Live data updates\n\n#### Caching\n- **Next.js Built-in Cache**: Automatic request memoization\n- **React Cache**: Server-side data caching\n- **Static Generation Cache**: Pre-rendered pages stored on CDN\n\n#### Data Formats\n- **JSON**: Primary data interchange format\n- **TypeScript Interfaces**: Type-safe data structures\n- **Zod Schemas**: Runtime validation and type inference\n\n### External Integrations\n\n#### APIs\n- **Supabase REST API**: Database operations\n- **Supabase Auth API**: User authentication\n- **Resend API**: Transactional email delivery\n\n#### Protocols\n- **HTTP/HTTPS**: Primary communication protocol\n- **WebSocket**: Real-time Supabase subscriptions (optional)\n- **REST**: Supabase API communication\n\n#### Authentication\n- **Supabase Auth**: JWT-based authentication\n- **Service Role Key**: Server-side admin operations\n- **Anonymous Key**: Client-side public operations\n\n### Monitoring & Dashboard Technologies\n\n#### Dashboard Framework\n- **Next.js App Router**: File-based routing system\n- **React Server Components**: Data fetching layer\n- **React Client Components**: Interactive UI\n\n#### Real-time Communication\n- **Supabase Realtime**: PostgreSQL changes via WebSocket\n- **React State**: Local UI state management\n- **Web Vitals API**: Performance metrics collection\n\n#### Visualization Libraries\n- **Framer Motion**: Smooth animations and transitions\n- **Lucide Icons**: Visual indicators and UI elements\n- **Tailwind CSS**: Responsive design utilities\n\n#### State Management\n- **React Hooks**: Local component state (useState, useReducer)\n- **React Hook Form**: Form state management\n- **URL State**: Search params for shareable states\n- **Server State**: Supabase as source of truth\n\n## Development Environment\n\n### Build & Development Tools\n- **Build System**: Next.js built-in Turbopack/Webpack\n- **Package Management**: pnpm with workspaces support\n- **Development Workflow**:\n  - Hot Module Replacement (HMR)\n  - Fast Refresh for React components\n  - TypeScript incremental compilation\n- **Scripts**:\n  - `pnpm dev`: Development server with HMR\n  - `pnpm build`: Production build\n  - `pnpm start`: Production server\n  - `pnpm type-check`: TypeScript validation\n\n### Code Quality Tools\n\n#### Static Analysis\n- **TypeScript Compiler**: Strict type checking\n- **ESLint** 9.35.0: JavaScript/TypeScript linting\n- **eslint-config-next** 15.5.2: Next.js-specific rules\n- **eslint-config-prettier** 10.1.8: Prettier integration\n\n#### Formatting\n- **Prettier** 3.6.2: Opinionated code formatter\n- **prettier-plugin-tailwindcss** 0.6.14: Tailwind class sorting\n- Configuration:\n  - Single quotes\n  - No semicolons\n  - 2 space indentation\n  - 100 character line width\n\n#### Testing Framework\n- **Playwright** 1.55.0: End-to-end testing\n- **Manual testing**: Development environment verification\n- **Build verification**: Production build as test gate\n\n#### Documentation\n- **CLAUDE.md**: Project-specific AI assistant instructions\n- **README.md**: User-facing documentation\n- **TypeScript JSDoc**: Inline code documentation\n\n### Version Control & Collaboration\n\n#### VCS\n- **Git** 2.43.0: Version control system\n- **GitHub**: Remote repository hosting\n- **Git Config**:\n  - Username: headonpro\n  - Email: cirakoglu.onur@gmail.com\n\n#### Branching Strategy\n- **Main Branch**: Production-ready code\n- **Feature Branches**: Development work\n- **Conventional Commits**: Standardized commit messages\n\n#### Code Review Process\n- **Pull Requests**: Required for main branch\n- **CI/CD Checks**: Automated build and lint validation\n- **Manual Review**: Code quality assurance\n\n### Dashboard Development\n- **Live Reload**: Hot Module Replacement via Next.js\n- **Port Management**: Default port 3000, configurable\n- **Multi-Instance Support**: Multiple dev servers via port configuration\n\n## Deployment & Distribution\n\n### Target Platform(s)\n- **Primary**: VPS with Docker containers\n- **Alternative**: Vercel, Netlify, AWS Amplify\n- **Environment**: Linux (Ubuntu 24.04.3 LTS)\n\n### Distribution Method\n- **Docker Container**: Standalone output for containerization\n- **CI/CD Pipeline**: GitHub Actions automation\n- **Deployment Trigger**: Push to main branch\n\n### Installation Requirements\n- **Node.js**: v22.x or higher\n- **pnpm**: v10.15.0 (enforced)\n- **Docker**: v27.5.1+ (production)\n- **Environment Variables**:\n  - `NEXT_PUBLIC_SUPABASE_URL`\n  - `NEXT_PUBLIC_SUPABASE_ANON_KEY`\n  - `SUPABASE_SERVICE_ROLE_KEY`\n  - `NEXT_PUBLIC_SITE_URL`\n\n### Update Mechanism\n- **Automatic Deployment**: GitHub Actions CI/CD\n- **Health Checks**: `/api/health` endpoint monitoring\n- **Zero-Downtime**: Docker container orchestration\n\n## Technical Requirements & Constraints\n\n### Performance Requirements\n- **Page Load Time (LCP)**: < 1.5 seconds\n- **Time to Interactive (TTI)**: < 3 seconds\n- **First Input Delay (FID)**: < 100ms\n- **Cumulative Layout Shift (CLS)**: < 0.1\n- **Lighthouse Score**: 95+ in all categories\n- **Build Time**: < 60 seconds\n- **Initial Bundle Size**: < 200KB (gzipped)\n\n### Compatibility Requirements\n\n#### Platform Support\n- **Browsers**: Modern browsers (Chrome, Firefox, Safari, Edge)\n- **Browser Versions**: Last 2 versions + Safari 12+\n- **Operating Systems**: Cross-platform (Windows, macOS, Linux)\n- **Mobile**: iOS 12+, Android 8+\n\n#### Dependency Versions\n- **Node.js**: ≥22.0.0\n- **pnpm**: 10.15.0 (exact)\n- **TypeScript**: ≥5.9.0\n\n#### Standards Compliance\n- **ECMAScript**: ES2020\n- **CSS**: CSS3 + CSS Variables\n- **HTML**: HTML5 semantic markup\n- **Accessibility**: WCAG 2.1 Level AA\n- **SEO**: Open Graph, Twitter Cards, Schema.org\n\n### Security & Compliance\n\n#### Security Requirements\n- **Authentication**: Supabase JWT-based auth\n- **Authorization**: Row Level Security (RLS) policies\n- **Data Protection**: HTTPS enforced, secure headers\n- **Input Validation**: Zod schemas on client and server\n- **XSS Prevention**: React auto-escaping, CSP headers\n- **CSRF Protection**: SameSite cookies\n\n#### Security Headers\n- X-DNS-Prefetch-Control\n- X-XSS-Protection\n- X-Frame-Options: SAMEORIGIN\n- X-Content-Type-Options: nosniff\n- Referrer-Policy: origin-when-cross-origin\n\n#### Compliance Standards\n- **GDPR**: Data privacy considerations\n- **Cookie Consent**: Required for analytics\n- **Data Retention**: Configurable per business needs\n\n#### Threat Model\n- **Client-side attacks**: XSS, CSRF mitigated\n- **Server-side attacks**: SQL injection prevented (Supabase RLS)\n- **Data leaks**: Environment variables for secrets\n- **DDoS**: CDN-level protection via deployment platform\n\n### Scalability & Reliability\n\n#### Expected Load\n- **Users**: 10,000+ monthly visitors (initial)\n- **Concurrent**: 100+ simultaneous users\n- **Data Volume**: < 100MB initial database size\n\n#### Availability Requirements\n- **Uptime Target**: 99.9% (8.76 hours downtime/year)\n- **Disaster Recovery**: Automated backups via Supabase\n- **Failover**: Multi-region CDN distribution\n\n#### Growth Projections\n- **Horizontal Scaling**: Multiple container instances\n- **Database Scaling**: Supabase managed scaling\n- **CDN Scaling**: Automatic edge caching\n\n## Technical Decisions & Rationale\n\n### Decision Log\n\n1. **Next.js 15 App Router over Pages Router**\n   - **Why**: Better performance with React Server Components, reduced JavaScript bundle size, improved SEO with streaming SSR\n   - **Alternatives**: Pages Router (legacy), pure React SPA, Remix\n   - **Trade-offs**: Steeper learning curve, newer API surface\n\n2. **pnpm over npm/yarn**\n   - **Why**: Faster installs (up to 2x), efficient disk space usage (shared dependencies), strict dependency resolution\n   - **Alternatives**: npm (slower), yarn (legacy)\n   - **Trade-offs**: Less widespread adoption, occasional compatibility issues\n\n3. **Tailwind CSS over CSS-in-JS**\n   - **Why**: Zero runtime cost, excellent DX with IntelliSense, purged CSS for minimal bundle size, v4 performance improvements\n   - **Alternatives**: Styled Components, Emotion, CSS Modules\n   - **Trade-offs**: Utility-first learning curve, markup verbosity\n\n4. **Supabase over Custom Backend**\n   - **Why**: Rapid development, managed infrastructure, built-in auth, real-time capabilities, PostgreSQL reliability\n   - **Alternatives**: Firebase (NoSQL), Custom Node/Express, tRPC\n   - **Trade-offs**: Vendor lock-in, less control over infrastructure\n\n5. **TypeScript Strict Mode**\n   - **Why**: Catch errors at compile time, better IDE support, self-documenting code, safer refactoring\n   - **Alternatives**: JavaScript, TypeScript loose mode\n   - **Trade-offs**: Initial setup overhead, learning curve\n\n6. **Zod for Validation**\n   - **Why**: TypeScript-first, type inference, composable schemas, excellent DX\n   - **Alternatives**: Yup, Joi, class-validator\n   - **Trade-offs**: Additional library weight (mitigated by tree-shaking)\n\n7. **Standalone Output for Docker**\n   - **Why**: Minimal container size, faster deployments, optimized for production\n   - **Alternatives**: Full node_modules copy, custom Dockerfile\n   - **Trade-offs**: Initial build time slightly higher\n\n## Known Limitations\n\n### Current Technical Debt\n1. **TypeScript/ESLint Build Errors Currently Ignored**\n   - **Impact**: Temporary bypass for rapid development\n   - **Solution**: Strict mode re-enabled, refactoring plan in progress\n   - **Timeline**: To be resolved before v1.0 release\n\n2. **No Test Coverage**\n   - **Impact**: Manual testing required, regression risk\n   - **Solution**: Playwright E2E tests planned, unit tests for critical paths\n   - **Timeline**: Test suite implementation in progress\n\n3. **Basic Error Handling**\n   - **Impact**: Generic error messages, limited error tracking\n   - **Solution**: Sentry integration planned, custom error boundaries\n   - **Timeline**: Next sprint priority\n\n### Platform Limitations\n1. **Supabase Free Tier Constraints**\n   - **Impact**: Limited database size, API request rate limits\n   - **Solution**: Upgrade to paid tier for production\n   - **Mitigation**: Request caching, database optimization\n\n2. **Single Region Deployment**\n   - **Impact**: Higher latency for distant users\n   - **Solution**: Multi-region CDN, edge runtime functions\n   - **Mitigation**: Aggressive caching, static generation\n\n### Future Improvements\n1. **Incremental Static Regeneration (ISR)** for blog posts\n2. **Edge Runtime** for API routes to reduce latency\n3. **Image Optimization** with custom Supabase storage integration\n4. **Internationalization (i18n)** for multi-language support\n5. **Advanced Analytics** integration (Plausible, Umami)\n6. **Progressive Web App (PWA)** capabilities\n",
  "fileStats": {
    "size": 13907,
    "lines": 388,
    "lastModified": "2025-10-01T17:39:03.976Z"
  },
  "comments": []
}